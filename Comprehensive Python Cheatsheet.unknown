From: <Saved by Blink>
Snapshot-Content-Location: https://gto76.github.io/python-cheatsheet/
Subject: Comprehensive Python Cheatsheet
Date: Sun, 21 Sep 2025 10:33:00 +0530
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----"


------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/html
Content-ID: <frame-5A917A512AD95EDCB2E72B08816D1DD8@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/

<!DOCTYPE html><html class="ocks-org do-not-copy" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-948f1715-01e3-4eac-808b-ab1f91b35f3f@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-562696fb-00d0-4926-ac19-faa444f6bae7@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-e0a3aeb3-b8b7-460a-9834-1dfd69c9dd73@mhtml.blink" />
  
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
  <title>Comprehensive Python Cheatsheet</title>
  <meta name="description" content="Exhaustive, simple, beautiful and concise. A truly Pythonic cheat sheet about Python programming language.">
  <link rel="icon" href="https://gto76.github.io/python-cheatsheet/web/favicon.png">

  <link rel="stylesheet" href="https://gto76.github.io/python-cheatsheet/web/default.min.css">
  <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css">
  <link rel="stylesheet" href="https://gto76.github.io/python-cheatsheet/web/style.css">

  <link rel="stylesheet" href="https://gto76.github.io/python-cheatsheet/web/default_dark3.min.css"><link rel="stylesheet" href="https://gto76.github.io/python-cheatsheet/web/style_dark3.css">

  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="Comprehensive Python Cheatsheet">
  <meta name="twitter:description" content="Exhaustive, simple, beautiful and concise. A truly Pythonic cheat sheet about Python programming language.">
  <meta name="twitter:image" content="https://gto76.github.io/python-cheatsheet/web/image_social_4.png">

  <meta property="og:url" content="https://gto76.github.io/python-cheatsheet/">
  <meta property="og:title" content="Comprehensive Python Cheatsheet">
  <meta property="og:description" content="Exhaustive, simple, beautiful and concise. A truly Pythonic cheat sheet about Python programming language.">
  <meta property="og:site_name" content="gto76.github.io">
  <meta property="og:image" content="https://gto76.github.io/python-cheatsheet/web/image_social_4.png">
  <meta property="og:type" content="article">

  <meta itemprop="url" content="https://gto76.github.io/python-cheatsheet/">
  <meta itemprop="name" content="Comprehensive Python Cheatsheet">
  <meta itemprop="description" content="Exhaustive, simple, beautiful and concise. A truly Pythonic cheat sheet about Python programming language.">
  <meta itemprop="image" content="https://gto76.github.io/python-cheatsheet/web/image_social_4.png">

  <meta name="google-site-verification" content="w3rvuG0D1kUm_w20qsJecSEZh59Am8jK4eSPVU83e_M">
  <meta name="viewport" id="viewport-meta">
</head>

<body style="width: 676px;">
  <header>
    <aside>September 16, 2025</aside>
    <a href="https://gto76.github.io/" rel="author">Jure Å orn</a>
  </header>

   <div><h1 id="comprehensivepythoncheatsheet">Comprehensive Python Cheatsheet</h1><p class="banner"><sup><a href="https://raw.githubusercontent.com/gto76/python-cheatsheet/main/README.md">Download text file</a>, <a href="https://github.com/gto76/python-cheatsheet">Fork me on GitHub</a>, <a href="https://github.com/gto76/python-cheatsheet/wiki/Frequently-Asked-Questions">Check out FAQ</a> or <a href="https://gto76.github.io/python-cheatsheet/index.html?theme=light">Switch to light theme</a>.
</sup></p><p class="banner" style="margin-bottom: 20px; padding-bottom: 7px;"><img src="https://gto76.github.io/python-cheatsheet/web/image_orig_blue6.png" alt="Monthy Python" style="width: 910px;"></p><pre style="border-left: none;padding-left: 1.9px;"><code class="hljs bash" style="line-height: 2em;"><strong>ToC</strong> = {
    <strong><span class="hljs-string">'1. Collections'</span></strong>: [<a href="https://gto76.github.io/python-cheatsheet/#list">List</a>, <a href="https://gto76.github.io/python-cheatsheet/#dictionary">Dictionary</a>, <a href="https://gto76.github.io/python-cheatsheet/#set">Set</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#tuple">Tuple</a>, <a href="https://gto76.github.io/python-cheatsheet/#range">Range</a>, <a href="https://gto76.github.io/python-cheatsheet/#enumerate">Enumerate</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#iterator">Iterator</a>, <a href="https://gto76.github.io/python-cheatsheet/#generator">Generator</a>],
    <strong><span class="hljs-string">'2. Types'</span></strong>:       [<a href="https://gto76.github.io/python-cheatsheet/#type">Type</a>, <a href="https://gto76.github.io/python-cheatsheet/#string">String</a>, <a href="https://gto76.github.io/python-cheatsheet/#regex">Regular_Exp</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#format">Format</a>, <a href="https://gto76.github.io/python-cheatsheet/#numbers">Numbers</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#combinatorics">Combinatorics</a>, <a href="https://gto76.github.io/python-cheatsheet/#datetime">Datetime</a>],
    <strong><span class="hljs-string">'3. Syntax'</span></strong>:      [<a href="https://gto76.github.io/python-cheatsheet/#function">Function</a>, <a href="https://gto76.github.io/python-cheatsheet/#inline">Inline</a>, <a href="https://gto76.github.io/python-cheatsheet/#imports">Import</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#decorator">Decorator</a>, <a href="https://gto76.github.io/python-cheatsheet/#class">Class</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#ducktypes">Duck_Types</a>, <a href="https://gto76.github.io/python-cheatsheet/#enum">Enum</a>, <a href="https://gto76.github.io/python-cheatsheet/#exceptions">Except</a>],
    <strong><span class="hljs-string">'4. System'</span></strong>:      [<a href="https://gto76.github.io/python-cheatsheet/#exit">Exit</a>, <a href="https://gto76.github.io/python-cheatsheet/#print">Print</a>, <a href="https://gto76.github.io/python-cheatsheet/#input">Input</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#commandlinearguments">Command_Line_Arguments</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#open">Open</a>, <a href="https://gto76.github.io/python-cheatsheet/#paths">Paths</a>, <a href="https://gto76.github.io/python-cheatsheet/#oscommands">OS_Commands</a>],
    <strong><span class="hljs-string">'5. Data'</span></strong>:        [<a href="https://gto76.github.io/python-cheatsheet/#json">JSON</a>, <a href="https://gto76.github.io/python-cheatsheet/#pickle">Pickle</a>, <a href="https://gto76.github.io/python-cheatsheet/#csv">CSV</a>, <a href="https://gto76.github.io/python-cheatsheet/#sqlite">SQLite</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#bytes">Bytes</a>, <a href="https://gto76.github.io/python-cheatsheet/#struct">Struct</a>, <a href="https://gto76.github.io/python-cheatsheet/#array">Array</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#memoryview">Memory_View</a>, <a href="https://gto76.github.io/python-cheatsheet/#deque">Deque</a>],
    <strong><span class="hljs-string">'6. Advanced'</span></strong>:    [<a href="https://gto76.github.io/python-cheatsheet/#operator">Operator</a>, <a href="https://gto76.github.io/python-cheatsheet/#matchstatement">Match_Statement</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#logging">Logging</a>, <a href="https://gto76.github.io/python-cheatsheet/#introspection">Introspection</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#threading">Threading</a>, <a href="https://gto76.github.io/python-cheatsheet/#coroutines">Coroutines</a>],
    <strong><span class="hljs-string">'7. Libraries'</span></strong>:   [<a href="https://gto76.github.io/python-cheatsheet/#progressbar">Progress_Bar</a>, <a href="https://gto76.github.io/python-cheatsheet/#plot">Plot</a>, <a href="https://gto76.github.io/python-cheatsheet/#table">Table</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#consoleapp">Console_App</a>, <a href="https://gto76.github.io/python-cheatsheet/#guiapp">GUI_App</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#scraping">Scraping</a>, <a href="https://gto76.github.io/python-cheatsheet/#webapp">Web</a>, <a href="https://gto76.github.io/python-cheatsheet/#profiling">Profiling</a>],
    <strong><span class="hljs-string">'8. Multimedia'</span></strong>:  [<a href="https://gto76.github.io/python-cheatsheet/#numpy">NumPy</a>, <a href="https://gto76.github.io/python-cheatsheet/#image">Image</a>, <a href="https://gto76.github.io/python-cheatsheet/#animation">Animation</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#audio">Audio</a>, <a href="https://gto76.github.io/python-cheatsheet/#synthesizer">Synthesizer</a>,
                       <a href="https://gto76.github.io/python-cheatsheet/#pygame">Pygame</a>, <a href="https://gto76.github.io/python-cheatsheet/#pandas">Pandas</a>, <a href="https://gto76.github.io/python-cheatsheet/#plotly">Plotly</a>]
}
</code></pre></div>





<div><h2 id="main"><a href="https://gto76.github.io/python-cheatsheet/#main" name="main">#</a>Main</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:      <span class="hljs-comment"># Skips next line if file was imported.</span>
    main()                      <span class="hljs-comment"># Runs `def main(): ...` function.</span>
</code></pre></div>

<div><h2 id="list"><a href="https://gto76.github.io/python-cheatsheet/#list" name="list">#</a>List</h2><pre><code class="python language-python hljs">&lt;list&gt; = [&lt;el_1&gt;, &lt;el_2&gt;, ...]  <span class="hljs-comment"># Creates a list object. Also list(&lt;collection&gt;).</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;el&gt;   = &lt;list&gt;[index]          <span class="hljs-comment"># First index is 0. Last -1. Allows assignments.</span>
&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]        <span class="hljs-comment"># Also &lt;list&gt;[from_inclusive : to_exclusive : Â±step].</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt;.append(&lt;el&gt;)             <span class="hljs-comment"># Appends element to the end. Also &lt;list&gt; += [&lt;el&gt;].</span>
&lt;list&gt;.extend(&lt;collection&gt;)     <span class="hljs-comment"># Appends elements to the end. Also &lt;list&gt; += &lt;coll&gt;.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt;.sort()                   <span class="hljs-comment"># Sorts the elements in ascending order.</span>
&lt;list&gt;.reverse()                <span class="hljs-comment"># Reverses the order of list's elements.</span>
&lt;list&gt; = sorted(&lt;collection&gt;)   <span class="hljs-comment"># Returns a new list with sorted elements.</span>
&lt;iter&gt; = reversed(&lt;list&gt;)       <span class="hljs-comment"># Returns reversed iterator of elements.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;el&gt;  = max(&lt;collection&gt;)       <span class="hljs-comment"># Returns largest element. Also min(&lt;el_1&gt;, ...).</span>
&lt;num&gt; = sum(&lt;collection&gt;)       <span class="hljs-comment"># Returns sum of elements. Also math.prod(&lt;coll&gt;).</span>
</code></pre>
<pre><code class="python language-python hljs">elementwise_sum  = [sum(pair) <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> zip(list_a, list_b)]
sorted_by_second = sorted(&lt;collection&gt;, key=<span class="hljs-keyword">lambda</span> el: el[<span class="hljs-number">1</span>])
sorted_by_both   = sorted(&lt;collection&gt;, key=<span class="hljs-keyword">lambda</span> el: (el[<span class="hljs-number">1</span>], el[<span class="hljs-number">0</span>]))
flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))
</code></pre>
<ul>
<li><strong>For details about sort(), sorted(), min() and max() see <a href="https://gto76.github.io/python-cheatsheet/#sortable">Sortable</a>.</strong></li>
<li><strong>Module <a href="https://gto76.github.io/python-cheatsheet/#operator">operator</a> has function itemgetter() that can replace listed <a href="https://gto76.github.io/python-cheatsheet/#lambda">lambdas</a>.</strong></li>
<li><strong>This text uses the term collection instead of iterable. For rationale see <a href="https://gto76.github.io/python-cheatsheet/#collection">Collection</a>.</strong></li>
</ul>
<pre><code class="python language-python hljs">&lt;int&gt; = len(&lt;list&gt;)             <span class="hljs-comment"># Returns number of items. Also works on dict, set and string.</span>
&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)      <span class="hljs-comment"># Returns number of occurrences. Also `if &lt;el&gt; in &lt;coll&gt;: ...`.</span>
&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)      <span class="hljs-comment"># Returns index of the first occurrence or raises ValueError.</span>
&lt;el&gt;  = &lt;list&gt;.pop()            <span class="hljs-comment"># Removes and returns item from the end or at index if passed.</span>
&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)      <span class="hljs-comment"># Inserts item at passed index and moves the rest to the right.</span>
&lt;list&gt;.remove(&lt;el&gt;)             <span class="hljs-comment"># Removes first occurrence of the item or raises ValueError.</span>
&lt;list&gt;.clear()                  <span class="hljs-comment"># Removes all list's items. Also works on dictionary and set.</span>
</code></pre>
<div><h2 id="dictionary"><a href="https://gto76.github.io/python-cheatsheet/#dictionary" name="dictionary">#</a>Dictionary</h2><pre><code class="python language-python hljs">&lt;dict&gt; = {key_1: val_1, key_2: val_2, ...}      <span class="hljs-comment"># Use `&lt;dict&gt;[key]` to get or set the value.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;view&gt; = &lt;dict&gt;.keys()                          <span class="hljs-comment"># Collection of keys that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.values()                        <span class="hljs-comment"># Collection of values that reflects changes.</span>
&lt;view&gt; = &lt;dict&gt;.items()                         <span class="hljs-comment"># Coll. of key-value tuples that reflects chgs.</span>
</code></pre>
<pre><code class="python language-python hljs">value  = &lt;dict&gt;.get(key, default=<span class="hljs-keyword">None</span>)          <span class="hljs-comment"># Returns default argument if key is missing.</span>
value  = &lt;dict&gt;.setdefault(key, default=<span class="hljs-keyword">None</span>)   <span class="hljs-comment"># Returns and writes default if key is missing.</span>
&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        <span class="hljs-comment"># Returns a dict with default value `&lt;type&gt;()`.</span>
&lt;dict&gt; = collections.defaultdict(<span class="hljs-keyword">lambda</span>: <span class="hljs-number">1</span>)     <span class="hljs-comment"># Returns a dict with default value 1.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;dict&gt; = dict(&lt;collection&gt;)                     <span class="hljs-comment"># Creates a dict from coll. of key-value pairs.</span>
&lt;dict&gt; = dict(zip(keys, values))                <span class="hljs-comment"># Creates a dict from two collections.</span>
&lt;dict&gt; = dict.fromkeys(keys [, value])          <span class="hljs-comment"># Creates a dict from collection of keys.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;dict&gt;.update(&lt;dict&gt;)                           <span class="hljs-comment"># Adds items. Replaces ones with matching keys.</span>
value = &lt;dict&gt;.pop(key)                         <span class="hljs-comment"># Removes item or raises KeyError if missing.</span>
{k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> &lt;dict&gt;.items() <span class="hljs-keyword">if</span> v == value}    <span class="hljs-comment"># Returns set of keys that point to the value.</span>
{k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> &lt;dict&gt;.items() <span class="hljs-keyword">if</span> k <span class="hljs-keyword">in</span> keys}  <span class="hljs-comment"># Filters the dictionary by specified keys.</span>
</code></pre>
<div><h3 id="counter">Counter</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter
<span class="hljs-meta">&gt;&gt;&gt; </span>counter = Counter([<span class="hljs-string">'blue'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'blue'</span>, <span class="hljs-string">'red'</span>, <span class="hljs-string">'red'</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>counter[<span class="hljs-string">'yellow'</span>] += <span class="hljs-number">1</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>print(counter.most_common())
[(<span class="hljs-string">'blue'</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">'red'</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">'yellow'</span>, <span class="hljs-number">1</span>)]
</code></pre></div>

<div><h2 id="set"><a href="https://gto76.github.io/python-cheatsheet/#set" name="set">#</a>Set</h2><pre><code class="python language-python hljs">&lt;set&gt; = {&lt;el_1&gt;, &lt;el_2&gt;, ...}                   <span class="hljs-comment"># Use `set()` for empty set.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;set&gt;.add(&lt;el&gt;)                                 <span class="hljs-comment"># Or: &lt;set&gt; |= {&lt;el&gt;}</span>
&lt;set&gt;.update(&lt;collection&gt; [, ...])              <span class="hljs-comment"># Or: &lt;set&gt; |= &lt;set&gt;</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   <span class="hljs-comment"># Or: &lt;set&gt; | &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            <span class="hljs-comment"># Or: &lt;set&gt; &amp; &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              <span class="hljs-comment"># Or: &lt;set&gt; - &lt;set&gt;</span>
&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    <span class="hljs-comment"># Or: &lt;set&gt; ^ &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                <span class="hljs-comment"># Or: &lt;set&gt; &lt;= &lt;set&gt;</span>
&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              <span class="hljs-comment"># Or: &lt;set&gt; &gt;= &lt;set&gt;</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;el&gt; = &lt;set&gt;.pop()                              <span class="hljs-comment"># Raises KeyError if empty.</span>
&lt;set&gt;.remove(&lt;el&gt;)                              <span class="hljs-comment"># Raises KeyError if missing.</span>
&lt;set&gt;.discard(&lt;el&gt;)                             <span class="hljs-comment"># Doesn't raise an error.</span>
</code></pre>
<div><h3 id="frozenset">Frozen Set</h3><ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an element in a set.</strong></li>
</ul><pre><code class="python language-python hljs">&lt;frozenset&gt; = frozenset(&lt;collection&gt;)
</code></pre></div>


<div><h2 id="tuple"><a href="https://gto76.github.io/python-cheatsheet/#tuple" name="tuple">#</a>Tuple</h2><p><strong>Tuple is an immutable and hashable list.</strong></p><pre><code class="python language-python hljs">&lt;tuple&gt; = ()                               <span class="hljs-comment"># Empty tuple.</span>
&lt;tuple&gt; = (&lt;el&gt;,)                          <span class="hljs-comment"># Or: &lt;el&gt;,</span>
&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])         <span class="hljs-comment"># Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span>
</code></pre></div>


<div><h3 id="namedtuple">Named Tuple</h3><p><strong>Tuple's subclass with named elements.</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple
<span class="hljs-meta">&gt;&gt;&gt; </span>Point = namedtuple(<span class="hljs-string">'Point'</span>, <span class="hljs-string">'x y'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>p = Point(<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>print(p)
Point(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>p.x, p[<span class="hljs-number">1</span>]
(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)
</code></pre></div>


<div><h2 id="range"><a href="https://gto76.github.io/python-cheatsheet/#range" name="range">#</a>Range</h2><p><strong>Immutable and hashable sequence of integers.</strong></p><pre><code class="python language-python hljs">&lt;range&gt; = range(stop)                      <span class="hljs-comment"># I.e. range(to_exclusive).</span>
&lt;range&gt; = range(start, stop)               <span class="hljs-comment"># I.e. range(from_inclusive, to_exclusive).</span>
&lt;range&gt; = range(start, stop, Â±step)        <span class="hljs-comment"># I.e. range(from_inclusive, to_exclusive, Â±step).</span>
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>[i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>)]
[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]
</code></pre>
<div><h2 id="enumerate"><a href="https://gto76.github.io/python-cheatsheet/#enumerate" name="enumerate">#</a>Enumerate</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">for</span> i, el <span class="hljs-keyword">in</span> enumerate(&lt;coll&gt;, start=<span class="hljs-number">0</span>):   <span class="hljs-comment"># Returns next element and its index on each pass.</span>
    ...
</code></pre></div>

<div><h2 id="iterator"><a href="https://gto76.github.io/python-cheatsheet/#iterator" name="iterator">#</a>Iterator</h2><p><strong>Potentially endless stream of elements.</strong></p><pre><code class="python language-python hljs">&lt;iter&gt; = iter(&lt;collection&gt;)                <span class="hljs-comment"># `iter(&lt;iter&gt;)` returns unmodified iterator.</span>
&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)    <span class="hljs-comment"># A sequence of return values until 'to_exclusive'.</span>
&lt;el&gt;   = next(&lt;iter&gt; [, default])          <span class="hljs-comment"># Raises StopIteration or returns 'default' on end.</span>
&lt;list&gt; = list(&lt;iter&gt;)                      <span class="hljs-comment"># Returns a list of iterator's remaining elements.</span>
</code></pre></div>


<div><h3 id="itertools">Itertools</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> itertools <span class="hljs-keyword">as</span> it
</code></pre></div>

<pre><code class="python language-python hljs">&lt;iter&gt; = it.count(start=<span class="hljs-number">0</span>, step=<span class="hljs-number">1</span>)         <span class="hljs-comment"># Returns updated value endlessly. Accepts floats.</span>
&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])         <span class="hljs-comment"># Returns element endlessly or 'times' times.</span>
&lt;iter&gt; = it.cycle(&lt;collection&gt;)            <span class="hljs-comment"># Repeats the passed sequence of elements endlessly.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])  <span class="hljs-comment"># Empties collections in order (only figuratively).</span>
&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)    <span class="hljs-comment"># Empties collections inside a collection in order.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)   <span class="hljs-comment"># Only returns first 'to_exclusive' elements.</span>
&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, â¦)    <span class="hljs-comment"># `to_exclusive, +step_size`. Indices can be None.</span>
</code></pre>
<div><h2 id="generator"><a href="https://gto76.github.io/python-cheatsheet/#generator" name="generator">#</a>Generator</h2><ul>
<li><strong>Any function that contains a yield statement returns a generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span><span class="hljs-params">(start, step)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        <span class="hljs-keyword">yield</span> start
        start += step
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>counter = count(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>)
</code></pre>
<div><h2 id="type"><a href="https://gto76.github.io/python-cheatsheet/#type" name="type">#</a>Type</h2><ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul><pre><code class="python language-python hljs">&lt;type&gt; = type(&lt;el&gt;)                          <span class="hljs-comment"># Or: &lt;el&gt;.__class__</span>
&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            <span class="hljs-comment"># Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span>
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>type(<span class="hljs-string">'a'</span>), <span class="hljs-string">'a'</span>.__class__, str
(&lt;<span class="hljs-class"><span class="hljs-title">class</span> '<span class="hljs-title">str</span>'&gt;, &lt;<span class="hljs-title">class</span> '<span class="hljs-title">str</span>'&gt;, &lt;<span class="hljs-title">class</span> '<span class="hljs-title">str</span>'&gt;)
</span></code></pre>
<div><h4 id="sometypesdonothavebuiltinnamessotheymustbeimported">Some types do not have built-in names, so they must be imported:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> FunctionType, MethodType, LambdaType, GeneratorType, ModuleType
</code></pre></div>

<div><h3 id="abstractbaseclasses">Abstract Base Classes</h3><p><strong>Each abstract base class specifies a set of virtual subclasses. These classes are then recognized by isinstance() and issubclass() as subclasses of the ABC, although they are really not. ABC can also manually decide whether or not a specific class is its virtual subclass, usually based on which methods the class has implemented. For instance, Iterable ABC looks for method iter(), while Collection ABC looks for iter(), contains() and len().</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> collections.abc <span class="hljs-keyword">import</span> Iterable, Collection, Sequence
<span class="hljs-meta">&gt;&gt;&gt; </span>isinstance([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], Iterable)
<span class="hljs-keyword">True</span>
</code></pre></div>


<pre><code class="text language-text">ââââââââââââââââââââ¯âââââââââââââ¯âââââââââââââ¯âââââââââââââ
â                  â  Iterable  â Collection â  Sequence  â
â âââââââââââââââââââ¼âââââââââââââ¼âââââââââââââ¼âââââââââââââ¨
â list, range, str â     â      â     â      â     â      â
â dict, set        â     â      â     â      â            â
â iter             â     â      â            â            â
ââââââââââââââââââââ·âââââââââââââ·âââââââââââââ·âââââââââââââ
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> numbers <span class="hljs-keyword">import</span> Number, Complex, Real, Rational, Integral
<span class="hljs-meta">&gt;&gt;&gt; </span>isinstance(<span class="hljs-number">123</span>, Number)
<span class="hljs-keyword">True</span>
</code></pre>
<pre><code class="text language-text">ââââââââââââââââââââââ¯âââââââââââ¯âââââââââââ¯âââââââââââ¯âââââââââââ¯âââââââââââ
â                    â  Number  â  Complex â   Real   â Rational â Integral â
â âââââââââââââââââââââ¼âââââââââââ¼âââââââââââ¼âââââââââââ¼âââââââââââ¼âââââââââââ¨
â int                â    â     â    â     â    â     â    â     â    â     â
â fractions.Fraction â    â     â    â     â    â     â    â     â          â
â float              â    â     â    â     â    â     â          â          â
â complex            â    â     â    â     â          â          â          â
â decimal.Decimal    â    â     â          â          â          â          â
ââââââââââââââââââââââ·âââââââââââ·âââââââââââ·âââââââââââ·âââââââââââ·âââââââââââ
</code></pre>
<div><h2 id="string"><a href="https://gto76.github.io/python-cheatsheet/#string" name="string">#</a>String</h2><p><strong>Immutable sequence of characters.</strong></p><pre><code class="python language-python hljs">&lt;str&gt;  = <span class="hljs-string">'abc'</span>                               <span class="hljs-comment"># Also "abc". Interprets \n, \t, \x00-\xff, etc.</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;str&gt;  = &lt;str&gt;.strip()                       <span class="hljs-comment"># Strips all whitespace characters from both ends.</span>
&lt;str&gt;  = &lt;str&gt;.strip(<span class="hljs-string">'&lt;chars&gt;'</span>)              <span class="hljs-comment"># Strips passed characters. Also lstrip/rstrip().</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt; = &lt;str&gt;.split()                       <span class="hljs-comment"># Splits it on one or more whitespace characters.</span>
&lt;list&gt; = &lt;str&gt;.split(sep=<span class="hljs-keyword">None</span>, maxsplit=<span class="hljs-number">-1</span>)  <span class="hljs-comment"># Splits on 'sep' string at most 'maxsplit' times.</span>
&lt;list&gt; = &lt;str&gt;.splitlines(keepends=<span class="hljs-keyword">False</span>)    <span class="hljs-comment"># On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span>
&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       <span class="hljs-comment"># Joins items by using the string as a separator.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;bool&gt; = &lt;sub_str&gt; <span class="hljs-keyword">in</span> &lt;str&gt;                  <span class="hljs-comment"># Returns True if string contains the substring.</span>
&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         <span class="hljs-comment"># Pass tuple of strings to give multiple options.</span>
&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               <span class="hljs-comment"># Returns start index of the first match or -1.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;str&gt;  = &lt;str&gt;.lower()                       <span class="hljs-comment"># Lowers the case. Also upper/capitalize/title().</span>
&lt;str&gt;  = &lt;str&gt;.casefold()                    <span class="hljs-comment"># Lower() that converts áº/Ã to ss, Î£/Ï to Ï, etc.</span>
&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   <span class="hljs-comment"># Replaces 'old' with 'new' at most 'count' times.</span>
&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            <span class="hljs-comment"># Use `str.maketrans(&lt;dict&gt;)` to generate table.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;str&gt;  = chr(&lt;int&gt;)                          <span class="hljs-comment"># Converts passed integer into Unicode character.</span>
&lt;int&gt;  = ord(&lt;str&gt;)                          <span class="hljs-comment"># Converts passed Unicode character into integer.</span>
</code></pre>
<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'unicodedata.normalize("NFC", &lt;str&gt;)'</span></code> on strings like <code class="python hljs"><span class="hljs-string">'MotÃ¶rhead'</span></code> before comparing them to other strings, because <code class="python hljs"><span class="hljs-string">'Ã¶'</span></code> can be stored as one or two characters.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'NFC'</span></code> converts such characters to a single character, while <code class="python hljs"><span class="hljs-string">'NFD'</span></code> converts them to two.</strong></li>
</ul>
<pre><code class="python language-python hljs">&lt;bool&gt; = &lt;str&gt;.isdecimal()                   <span class="hljs-comment"># Checks all chars for [0-9]. Also [à¥¦-à¥¯], [Ù -Ù©].</span>
&lt;bool&gt; = &lt;str&gt;.isdigit()                     <span class="hljs-comment"># Checks for [Â²Â³Â¹â¦] and isdecimal(). Also [á©-á±].</span>
&lt;bool&gt; = &lt;str&gt;.isnumeric()                   <span class="hljs-comment"># Checks for [Â¼Â½Â¾â¦] and isdigit(). Also [é¶ãä¸â¦].</span>
&lt;bool&gt; = &lt;str&gt;.isalnum()                     <span class="hljs-comment"># Checks for [ABCâ¦] and isnumeric(). Also [ÂªÂµÂºâ¦].</span>
&lt;bool&gt; = &lt;str&gt;.isprintable()                 <span class="hljs-comment"># Checks for [ !"#$â¦] and isalnum(). Also emojis.</span>
&lt;bool&gt; = &lt;str&gt;.isspace()                     <span class="hljs-comment"># Checks for [ \t\n\r\f\v\x1c\x1d\x1e\x1f\x85â¦].</span>
</code></pre>
<div><h2 id="regex"><a href="https://gto76.github.io/python-cheatsheet/#regex" name="regex">#</a>Regex</h2><p><strong>Functions for regular expression matching.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> re
&lt;str&gt;   = re.sub(<span class="hljs-string">r'&lt;regex&gt;'</span>, new, text, count=<span class="hljs-number">0</span>)  <span class="hljs-comment"># Substitutes all occurrences with 'new'.</span>
&lt;list&gt;  = re.findall(<span class="hljs-string">r'&lt;regex&gt;'</span>, text)            <span class="hljs-comment"># Returns all occurrences of the pattern.</span>
&lt;list&gt;  = re.split(<span class="hljs-string">r'&lt;regex&gt;'</span>, text, maxsplit=<span class="hljs-number">0</span>)  <span class="hljs-comment"># Add brackets around regex to keep matches.</span>
&lt;Match&gt; = re.search(<span class="hljs-string">r'&lt;regex&gt;'</span>, text)             <span class="hljs-comment"># First occurrence of the pattern or None.</span>
&lt;Match&gt; = re.match(<span class="hljs-string">r'&lt;regex&gt;'</span>, text)              <span class="hljs-comment"># Searches only at the beginning of the text.</span>
&lt;iter&gt;  = re.finditer(<span class="hljs-string">r'&lt;regex&gt;'</span>, text)           <span class="hljs-comment"># Returns all occurrences as Match objects.</span>
</code></pre></div>


<ul>
<li><strong>Raw string literals do not interpret escape sequences, thus enabling us to use regex-specific escape sequences that cause SyntaxWarning in normal string literals (since 3.12).</strong></li>
<li><strong>Argument 'new' of re.sub() can be a function that accepts Match object and returns a str.</strong></li>
<li><strong>Argument <code class="python hljs"><span class="hljs-string">'flags=re.IGNORECASE'</span></code> can be used with all functions that are listed above.</strong></li>
<li><strong>Argument <code class="python hljs"><span class="hljs-string">'flags=re.MULTILINE'</span></code> makes <code class="python hljs"><span class="hljs-string">'^'</span></code> and <code class="python hljs"><span class="hljs-string">'$'</span></code> match the start/end of each line.</strong></li>
<li><strong>Argument <code class="python hljs"><span class="hljs-string">'flags=re.DOTALL'</span></code> makes <code class="python hljs"><span class="hljs-string">'.'</span></code> also accept the <code class="python hljs"><span class="hljs-string">'\n'</span></code> (besides all other chars).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'re.compile(&lt;regex&gt;)'</span></code> returns a Pattern object with methods sub(), findall(), etc.</strong></li>
</ul>
<div><h3 id="matchobject">Match Object</h3><pre><code class="python language-python hljs">&lt;str&gt;   = &lt;Match&gt;.group()                         <span class="hljs-comment"># Returns the whole match. Also group(0).</span>
&lt;str&gt;   = &lt;Match&gt;.group(<span class="hljs-number">1</span>)                        <span class="hljs-comment"># Returns part inside the first brackets.</span>
&lt;tuple&gt; = &lt;Match&gt;.groups()                        <span class="hljs-comment"># Returns all bracketed parts as strings.</span>
&lt;int&gt;   = &lt;Match&gt;.start()                         <span class="hljs-comment"># Returns start index of the whole match.</span>
&lt;int&gt;   = &lt;Match&gt;.end()                           <span class="hljs-comment"># Returns its exclusive end index.</span>
</code></pre></div>

<div><h3 id="specialsequences">Special Sequences</h3><pre><code class="python language-python hljs"><span class="hljs-string">'\d'</span> == <span class="hljs-string">'[0-9]'</span>                                   <span class="hljs-comment"># Also [à¥¦-à¥¯â¦]. Matches a decimal character.</span>
<span class="hljs-string">'\w'</span> == <span class="hljs-string">'[a-zA-Z0-9_]'</span>                            <span class="hljs-comment"># Also [ÂªÂ²Â³â¦]. Matches an alphanumeric or _.</span>
<span class="hljs-string">'\s'</span> == <span class="hljs-string">'[ \t\n\r\f\v]'</span>                           <span class="hljs-comment"># Also [\x1c-\x1fâ¦]. Matches a whitespace.</span>
</code></pre></div>

<ul>
<li><strong>By default, decimal characters and alphanumerics from all alphabets are matched unless <code class="python hljs"><span class="hljs-string">'flags=re.ASCII'</span></code> is used. It restricts special sequence matches to the first 128 Unicode characters and also prevents <code class="python hljs"><span class="hljs-string">'\s'</span></code> from accepting <code class="python hljs"><span class="hljs-string">'\x1c'</span></code>, <code class="python hljs"><span class="hljs-string">'\x1d'</span></code>, <code class="python hljs"><span class="hljs-string">'\x1e'</span></code> and <code class="python hljs"><span class="hljs-string">'\x1f'</span></code> (non-printable characters that divide text into files, tables, rows and fields, respectively).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<div><h2 id="format"><a href="https://gto76.github.io/python-cheatsheet/#format" name="format">#</a>Format</h2><pre><code class="python hljs">&lt;str&gt; = <span class="hljs-string">f'<span class="hljs-subst">{&lt;el_1&gt;}</span>, <span class="hljs-subst">{&lt;el_2&gt;}</span>'</span>            <span class="hljs-comment"># Curly braces can also contain expressions.</span>
&lt;str&gt; = <span class="hljs-string">'{}, {}'</span>.format(&lt;el_1&gt;, &lt;el_2&gt;)  <span class="hljs-comment"># Same as '{0}, {a}'.format(&lt;el_1&gt;, a=&lt;el_2&gt;).</span>
&lt;str&gt; = <span class="hljs-string">'%s, %s'</span> % (&lt;el_1&gt;, &lt;el_2&gt;)      <span class="hljs-comment"># Redundant and inferior C-style formatting.</span>
</code></pre></div>

<div><h3 id="example">Example</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>Person = collections.namedtuple(<span class="hljs-string">'Person'</span>, <span class="hljs-string">'name height'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>person = Person(<span class="hljs-string">'Jean-Luc'</span>, <span class="hljs-number">187</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-string">f'<span class="hljs-subst">{person.name}</span> is <span class="hljs-subst">{person.height / <span class="hljs-number">100</span>}</span> meters tall.'</span>
<span class="hljs-string">'Jean-Luc is 1.87 meters tall.'</span>
</code></pre></div>

<div><h3 id="generaloptions">General Options</h3><pre><code class="python language-python hljs">{&lt;el&gt;:&lt;<span class="hljs-number">10</span>}                               <span class="hljs-comment"># '&lt;el&gt;      '</span>
{&lt;el&gt;:^<span class="hljs-number">10</span>}                               <span class="hljs-comment"># '   &lt;el&gt;   '</span>
{&lt;el&gt;:&gt;<span class="hljs-number">10</span>}                               <span class="hljs-comment"># '      &lt;el&gt;'</span>
{&lt;el&gt;:.&lt;<span class="hljs-number">10</span>}                              <span class="hljs-comment"># '&lt;el&gt;......'</span>
{&lt;el&gt;:<span class="hljs-number">0</span>}                                 <span class="hljs-comment"># '&lt;el&gt;'</span>
</code></pre></div>

<ul>
<li><strong>Objects are rendered by calling the <code class="python hljs"><span class="hljs-string">'format(&lt;el&gt;, "&lt;options&gt;")'</span></code> function.</strong></li>
<li><strong>Options inside curly braces can be generated dynamically: <code class="python hljs"><span class="hljs-string">f'<span class="hljs-subst">{&lt;el&gt;:{&lt;str/int&gt;}</span>[â¦]}'</span></code>.</strong></li>
<li><strong>Adding <code class="python hljs"><span class="hljs-string">'='</span></code> to the expression prepends it to the output: <code class="python hljs"><span class="hljs-string">f'<span class="hljs-subst">{<span class="hljs-number">1</span>+<span class="hljs-number">1</span>=}</span>'</span></code> returns <code class="python hljs"><span class="hljs-string">'1+1=2'</span></code>.</strong></li>
<li><strong>Adding <code class="python hljs"><span class="hljs-string">'!r'</span></code> to the expression converts object to string by calling its <a href="https://gto76.github.io/python-cheatsheet/#class">repr()</a> method.</strong></li>
</ul>
<div><h3 id="strings">Strings</h3><pre><code class="python language-python hljs">{<span class="hljs-string">'abcde'</span>:<span class="hljs-number">10</span>}                             <span class="hljs-comment"># 'abcde     '</span>
{<span class="hljs-string">'abcde'</span>:<span class="hljs-number">10.3</span>}                           <span class="hljs-comment"># 'abc       '</span>
{<span class="hljs-string">'abcde'</span>:<span class="hljs-number">.3</span>}                             <span class="hljs-comment"># 'abc'</span>
{<span class="hljs-string">'abcde'</span>!r:<span class="hljs-number">10</span>}                           <span class="hljs-comment"># "'abcde'   "</span>
</code></pre></div>

<div><h3 id="numbers-1">Numbers</h3><pre><code class="python language-python hljs">{<span class="hljs-number">123456</span>:<span class="hljs-number">10</span>}                              <span class="hljs-comment"># '    123456'</span>
{<span class="hljs-number">123456</span>:<span class="hljs-number">10</span>,}                             <span class="hljs-comment"># '   123,456'</span>
{<span class="hljs-number">123456</span>:<span class="hljs-number">10</span>_}                             <span class="hljs-comment"># '   123_456'</span>
{<span class="hljs-number">123456</span>:+<span class="hljs-number">10</span>}                             <span class="hljs-comment"># '   +123456'</span>
{<span class="hljs-number">123456</span>:=+<span class="hljs-number">10</span>}                            <span class="hljs-comment"># '+   123456'</span>
{<span class="hljs-number">123456</span>: }                               <span class="hljs-comment"># ' 123456'</span>
{<span class="hljs-number">-123456</span>: }                              <span class="hljs-comment"># '-123456'</span>
</code></pre></div>

<div><h3 id="floats">Floats</h3><pre><code class="python language-python hljs">{<span class="hljs-number">1.23456</span>:<span class="hljs-number">10.3</span>}                           <span class="hljs-comment"># '      1.23'</span>
{<span class="hljs-number">1.23456</span>:<span class="hljs-number">10.3</span>f}                          <span class="hljs-comment"># '     1.235'</span>
{<span class="hljs-number">1.23456</span>:<span class="hljs-number">10.3</span>e}                          <span class="hljs-comment"># ' 1.235e+00'</span>
{<span class="hljs-number">1.23456</span>:<span class="hljs-number">10.3</span>%}                          <span class="hljs-comment"># '  123.456%'</span>
</code></pre></div>

<div><h4 id="comparisonofpresentationtypes">Comparison of presentation types:</h4><pre><code class="text language-text">ââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ
â              â    {&lt;float&gt;}   â   {&lt;float&gt;:f}  â   {&lt;float&gt;:e}  â   {&lt;float&gt;:%}  â
â âââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¨
â  0.000056789 â   '5.6789e-05' â    '0.000057'  â '5.678900e-05' â    '0.005679%' â
â  0.00056789  â   '0.00056789' â    '0.000568'  â '5.678900e-04' â    '0.056789%' â
â  0.0056789   â   '0.0056789'  â    '0.005679'  â '5.678900e-03' â    '0.567890%' â
â  0.056789    â   '0.056789'   â    '0.056789'  â '5.678900e-02' â    '5.678900%' â
â  0.56789     â   '0.56789'    â    '0.567890'  â '5.678900e-01' â   '56.789000%' â
â  5.6789      â   '5.6789'     â    '5.678900'  â '5.678900e+00' â  '567.890000%' â
â 56.789       â  '56.789'      â   '56.789000'  â '5.678900e+01' â '5678.900000%' â
ââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ

ââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ¯âââââââââââââââââ
â              â  {&lt;float&gt;:.2}  â  {&lt;float&gt;:.2f} â  {&lt;float&gt;:.2e} â  {&lt;float&gt;:.2%} â
â âââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¼âââââââââââââââââ¨
â  0.000056789 â    '5.7e-05'   â      '0.00'    â   '5.68e-05'   â      '0.01%'   â
â  0.00056789  â    '0.00057'   â      '0.00'    â   '5.68e-04'   â      '0.06%'   â
â  0.0056789   â    '0.0057'    â      '0.01'    â   '5.68e-03'   â      '0.57%'   â
â  0.056789    â    '0.057'     â      '0.06'    â   '5.68e-02'   â      '5.68%'   â
â  0.56789     â    '0.57'      â      '0.57'    â   '5.68e-01'   â     '56.79%'   â
â  5.6789      â    '5.7'       â      '5.68'    â   '5.68e+00'   â    '567.89%'   â
â 56.789       â    '5.7e+01'   â     '56.79'    â   '5.68e+01'   â   '5678.90%'   â
ââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ·âââââââââââââââââ
</code></pre></div>


<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'{&lt;float&gt;:g}'</span></code> is <code class="python hljs"><span class="hljs-string">'{&lt;float&gt;:.6}'</span></code> with stripped zeros, exponent starting at <code class="python hljs"><span class="hljs-string">'1e+06'</span></code>.</strong></li>
<li><strong>When both rounding up and rounding down are possible, the one that returns result with even last digit is chosen. That makes <code class="python hljs"><span class="hljs-string">'{6.5:.0f}'</span></code> a <code class="python hljs"><span class="hljs-string">'6'</span></code> and <code class="python hljs"><span class="hljs-string">'{7.5:.0f}'</span></code> an <code class="python hljs"><span class="hljs-string">'8'</span></code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented exactly by a float (<code class="python hljs"><span class="hljs-number">.5</span></code>, <code class="python hljs"><span class="hljs-number">.25</span></code>, â¦).</strong></li>
</ul>
<div><h3 id="ints">Ints</h3><pre><code class="python language-python hljs">{<span class="hljs-number">90</span>:c}                                   <span class="hljs-comment"># 'Z'. Unicode character with value 90.</span>
{<span class="hljs-number">90</span>:b}                                   <span class="hljs-comment"># '1011010'. Binary representation of the int.</span>
{<span class="hljs-number">90</span>:X}                                   <span class="hljs-comment"># '5A'. Hexadecimal with upper-case letters.</span>
</code></pre></div>

<div><h2 id="numbers"><a href="https://gto76.github.io/python-cheatsheet/#numbers" name="numbers">#</a>Numbers</h2><pre><code class="python language-python hljs">&lt;int&gt;      = int(&lt;float/str/bool&gt;)             <span class="hljs-comment"># Whole number of any size. Truncates floats.</span>
&lt;float&gt;    = float(&lt;int/str/bool&gt;)             <span class="hljs-comment"># 64-bit decimal number. Also &lt;float&gt;eÂ±&lt;int&gt;.</span>
&lt;complex&gt;  = complex(real=<span class="hljs-number">0</span>, imag=<span class="hljs-number">0</span>)           <span class="hljs-comment"># A complex number. Also `&lt;float&gt; Â± &lt;float&gt;j`.</span>
&lt;Fraction&gt; = fractions.Fraction(&lt;int&gt;, &lt;int&gt;)  <span class="hljs-comment"># E.g. `Fraction(1, 2) / 3 == Fraction(1, 6)`.</span>
&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int/tuple&gt;)  <span class="hljs-comment"># E.g. `Decimal((1, (2, 3), 4)) == -230_000`.</span>
</code></pre></div>

<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'int(&lt;str&gt;)'</span></code> and <code class="python hljs"><span class="hljs-string">'float(&lt;str&gt;)'</span></code> raise ValueError if passed string is malformed.</strong></li>
<li><strong>Decimal objects store numbers exactly, unlike most floats where <code class="python hljs"><span class="hljs-string">'1.1 + 2.2 != 3.3'</span></code>.</strong></li>
<li><strong>Floats can be compared with: <code class="python hljs"><span class="hljs-string">'math.isclose(&lt;float&gt;, &lt;float&gt;, rel_tol=1e-09)'</span></code>.</strong></li>
<li><strong>Precision of decimal operations is set with: <code class="python hljs"><span class="hljs-string">'decimal.getcontext().prec = &lt;int&gt;'</span></code>.</strong></li>
<li><strong>Bools can be used anywhere ints can, because bool is a subclass of int: <code class="python hljs"><span class="hljs-string">'True + 1 == 2'</span></code>.</strong></li>
</ul>
<div><h3 id="builtinfunctions">Built-in Functions</h3><pre><code class="python language-python hljs">&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                      <span class="hljs-comment"># E.g. `pow(2, 3) == 2 ** 3 == 8`.</span>
&lt;num&gt; = abs(&lt;num&gt;)                             <span class="hljs-comment"># E.g. `abs(complex(3, 4)) == 5`.</span>
&lt;num&gt; = round(&lt;num&gt; [, Â±ndigits])              <span class="hljs-comment"># E.g. `round(123, -1) == 120`.</span>
&lt;num&gt; = min(&lt;collection&gt;)                      <span class="hljs-comment"># Also max(&lt;num&gt;, &lt;num&gt; [, ...]).</span>
&lt;num&gt; = sum(&lt;collection&gt;)                      <span class="hljs-comment"># Also math.prod(&lt;collection&gt;).</span>
</code></pre></div>

<div><h3 id="math">Math</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> floor, ceil, trunc            <span class="hljs-comment"># They convert floats into integers.</span>
<span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi, inf, nan, isnan           <span class="hljs-comment"># `inf * 0` and `nan + 1` return nan.</span>
<span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sqrt, factorial               <span class="hljs-comment"># `sqrt(-1)` will raise ValueError.</span>
<span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> sin, cos, tan                 <span class="hljs-comment"># Also: asin, acos, degrees, radians.</span>
<span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log, log10, log2              <span class="hljs-comment"># Log accepts base as second argument.</span>
</code></pre></div>

<div><h3 id="statistics">Statistics</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> statistics <span class="hljs-keyword">import</span> mean, median, mode      <span class="hljs-comment"># Mode returns the most common item.</span>
<span class="hljs-keyword">from</span> statistics <span class="hljs-keyword">import</span> variance, stdev         <span class="hljs-comment"># Also: pvariance, pstdev, quantiles.</span>
</code></pre></div>

<div><h3 id="random">Random</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> random, randint, uniform    <span class="hljs-comment"># Also: gauss, choice, shuffle, seed.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;float&gt; = random()                             <span class="hljs-comment"># Returns a float inside [0, 1).</span>
&lt;num&gt;   = randint/uniform(a, b)                <span class="hljs-comment"># Returns an int/float inside [a, b].</span>
&lt;float&gt; = gauss(mean, stdev)                   <span class="hljs-comment"># Also triangular(low, high, mode).</span>
&lt;el&gt;    = choice(&lt;sequence&gt;)                   <span class="hljs-comment"># Keeps it intact. Also sample(p, n).</span>
shuffle(&lt;list&gt;)                                <span class="hljs-comment"># Works on all mutable sequences.</span>
</code></pre>
<div><h3 id="hexadecimalnumbers">Hexadecimal Numbers</h3><pre><code class="python language-python hljs">&lt;int&gt; = <span class="hljs-number">0x</span>&lt;hex&gt;                                <span class="hljs-comment"># E.g. `0xFF == 255`. Also 0b&lt;bin&gt;.</span>
&lt;int&gt; = int(<span class="hljs-string">'Â±&lt;hex&gt;'</span>, <span class="hljs-number">16</span>)                      <span class="hljs-comment"># Also int('Â±0x&lt;hex&gt;/Â±0b&lt;bin&gt;', 0).</span>
&lt;str&gt; = hex(&lt;int&gt;)                             <span class="hljs-comment"># Returns '[-]0x&lt;hex&gt;'. Also bin().</span>
</code></pre></div>

<div><h3 id="bitwiseoperators">Bitwise Operators</h3><pre><code class="python language-python hljs">&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                          <span class="hljs-comment"># E.g. `0b1100 &amp; 0b1010 == 0b1000`.</span>
&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                          <span class="hljs-comment"># E.g. `0b1100 | 0b1010 == 0b1110`.</span>
&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                          <span class="hljs-comment"># E.g. `0b1100 ^ 0b1010 == 0b0110`.</span>
&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                        <span class="hljs-comment"># E.g. `0b1111 &lt;&lt; 4 == 0b11110000`.</span>
&lt;int&gt; = ~&lt;int&gt;                                 <span class="hljs-comment"># E.g. `~0b1 == -0b10 == -(0b1+1)`.</span>
</code></pre></div>

<div><h2 id="combinatorics"><a href="https://gto76.github.io/python-cheatsheet/#combinatorics" name="combinatorics">#</a>Combinatorics</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> itertools <span class="hljs-keyword">as</span> it
</code></pre></div>

<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>list(it.product(<span class="hljs-string">'abc'</span>, repeat=<span class="hljs-number">2</span>))        <span class="hljs-comment">#   a  b  c</span>
[(<span class="hljs-string">'a'</span>, <span class="hljs-string">'a'</span>), (<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>), (<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>),         <span class="hljs-comment"># a x  x  x</span>
 (<span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>), (<span class="hljs-string">'b'</span>, <span class="hljs-string">'b'</span>), (<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>),         <span class="hljs-comment"># b x  x  x</span>
 (<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'c'</span>)]         <span class="hljs-comment"># c x  x  x</span>
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>list(it.permutations(<span class="hljs-string">'abc'</span>, <span class="hljs-number">2</span>))          <span class="hljs-comment">#   a  b  c</span>
[(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>), (<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>),                     <span class="hljs-comment"># a .  x  x</span>
 (<span class="hljs-string">'b'</span>, <span class="hljs-string">'a'</span>), (<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>),                     <span class="hljs-comment"># b x  .  x</span>
 (<span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>), (<span class="hljs-string">'c'</span>, <span class="hljs-string">'b'</span>)]                     <span class="hljs-comment"># c x  x  .</span>
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>list(it.combinations(<span class="hljs-string">'abc'</span>, <span class="hljs-number">2</span>))          <span class="hljs-comment">#   a  b  c</span>
[(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>), (<span class="hljs-string">'a'</span>, <span class="hljs-string">'c'</span>),                     <span class="hljs-comment"># a .  x  x</span>
 (<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>)                                  <span class="hljs-comment"># b .  .  x</span>
]                                            <span class="hljs-comment"># c .  .  .</span>
</code></pre>
<div><h2 id="datetime"><a href="https://gto76.github.io/python-cheatsheet/#datetime" name="datetime">#</a>Datetime</h2><p><strong>Provides 'date', 'time', 'datetime' and 'timedelta' classes. All are immutable and hashable.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install python-dateutil</span>
<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date, time, datetime, timedelta, timezone
<span class="hljs-keyword">import</span> zoneinfo, dateutil.tz
</code></pre></div>


<pre><code class="python language-python apache hljs">&lt;D&gt;  = date(year, month, day)               <span class="hljs-comment"># Only accepts valid dates from 1 to 9999 AD.</span>
&lt;T&gt;  = time(hour=<span class="hljs-number">0</span>, minute=<span class="hljs-number">0</span>, second=<span class="hljs-number">0</span>)     <span class="hljs-comment"># Also: `microsecond=0, tzinfo=None, fold=0`.</span>
&lt;DT&gt; = datetime(year, month, day, hour=<span class="hljs-number">0</span>)   <span class="hljs-comment"># Also: `minute=0, second=0, microsecond=0, â¦`.</span>
&lt;TD&gt; = timedelta(weeks=<span class="hljs-number">0</span>, days=<span class="hljs-number">0</span>, hours=<span class="hljs-number">0</span>)  <span class="hljs-comment"># Also: `minutes=0, seconds=0, microseconds=0`.</span>
</code></pre>
<ul>
<li><strong>Times and datetimes that have defined timezone are called aware and ones that don't, naive. If time or datetime object is naive, it is presumed to be in the system's timezone!</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'fold=1'</span></code> means the second pass in case of time jumping back (usually for one hour).</strong></li>
<li><strong>Timedelta normalizes arguments to Â±days, seconds (&lt; 86â¯400) and microseconds (&lt; 1M). Its str() method returns <code class="python hljs"><span class="hljs-string">'[Â±D, ]H:MM:SS[.â¦]'</span></code> and total_seconds() a float of all seconds.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'&lt;D/DT&gt;.weekday()'</span></code> to get the day of the week as an integer, with Monday being 0.</strong></li>
</ul>
<div><h3 id="now">Now</h3><pre><code class="python language-python hljs">&lt;D/DTn&gt; = D/DT.today()                      <span class="hljs-comment"># Current local date or naive DT. Also DT.now().</span>
&lt;DTa&gt;   = DT.now(&lt;tzinfo&gt;)                  <span class="hljs-comment"># Aware DT from current time in passed timezone.</span>
</code></pre></div>

<ul>
<li><strong>To extract time use <code class="python hljs"><span class="hljs-string">'&lt;DTn&gt;.time()'</span></code>, <code class="python hljs"><span class="hljs-string">'&lt;DTa&gt;.time()'</span></code> or <code class="python hljs"><span class="hljs-string">'&lt;DTa&gt;.timetz()'</span></code>.</strong></li>
</ul>
<div><h3 id="timezones">Timezones</h3><pre><code class="python language-python apache hljs">&lt;tzinfo&gt; = timezone.utc                     <span class="hljs-comment"># Coordinated universal time (UK without DST).</span>
&lt;tzinfo&gt; = timezone(&lt;timedelta&gt;)            <span class="hljs-comment"># Timezone with fixed offset from universal time.</span>
&lt;tzinfo&gt; = dateutil.tz.tzlocal()            <span class="hljs-comment"># Local timezone with dynamic offset from UTC.</span>
&lt;tzinfo&gt; = zoneinfo.ZoneInfo(<span class="hljs-string">'&lt;iana_key&gt;'</span>)  <span class="hljs-comment"># 'Continent/City_Name' zone with dynamic offset.</span>
&lt;DTa&gt;    = &lt;DT&gt;.astimezone([&lt;tzinfo&gt;])      <span class="hljs-comment"># Converts DT to the passed or local fixed zone.</span>
&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  <span class="hljs-comment"># Changes object's timezone without conversion.</span>
</code></pre></div>

<ul>
<li><strong>Timezones returned by tzlocal(), ZoneInfo() and implicit local timezone of naive objects have offsets that vary through time due to DST and historical changes of the base offset.</strong></li>
<li><strong>To get ZoneInfo() to work on Windows run <code class="python hljs"><span class="hljs-string">'&gt; pip3 install tzdata'</span></code>.</strong></li>
</ul>
<div><h3 id="encode">Encode</h3><pre><code class="python language-python apache hljs">&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&lt;str&gt;)      <span class="hljs-comment"># Object from ISO string. Raises ValueError.</span>
&lt;DT&gt;     = DT.strptime(&lt;str&gt;, <span class="hljs-string">'&lt;format&gt;'</span>)   <span class="hljs-comment"># Datetime from custom string. See Format.</span>
&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          <span class="hljs-comment"># D/DT from days since the Gregorian NYE 1.</span>
&lt;DTn&gt;    = DT.fromtimestamp(&lt;float&gt;)        <span class="hljs-comment"># Local naive DT from seconds since the Epoch.</span>
&lt;DTa&gt;    = DT.fromtimestamp(&lt;float&gt;, &lt;tz&gt;)  <span class="hljs-comment"># Aware datetime from seconds since the Epoch.</span>
</code></pre></div>

<ul>
<li><strong>ISO strings come in following forms: <code class="python hljs"><span class="hljs-string">'YYYY-MM-DD'</span></code>, <code class="python hljs"><span class="hljs-string">'HH:MM:SS.mmmuuu[Â±HH:MM]'</span></code>, or both separated by an arbitrary character. All parts following the hours are optional.</strong></li>
<li><strong>Python uses the Unix Epoch: <code class="python hljs"><span class="hljs-string">'1970-01-01 00:00 UTC'</span></code>, <code class="python hljs"><span class="hljs-string">'1970-01-01 01:00 CET'</span></code>, â¦</strong></li>
</ul>
<div><h3 id="decode">Decode</h3><pre><code class="python language-python hljs">&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=<span class="hljs-string">'T'</span>)      <span class="hljs-comment"># Also `timespec='auto/hours/minutes/secondsâ¦'`.</span>
&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(<span class="hljs-string">'&lt;format&gt;'</span>)    <span class="hljs-comment"># Custom string representation of the object.</span>
&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               <span class="hljs-comment"># Days since NYE 1. Ignores DT's time and zone.</span>
&lt;float&gt;  = &lt;DTn&gt;.timestamp()                <span class="hljs-comment"># Seconds since the Epoch, from local naive DT.</span>
&lt;float&gt;  = &lt;DTa&gt;.timestamp()                <span class="hljs-comment"># Seconds since the Epoch, from aware datetime.</span>
</code></pre></div>

<div><h3 id="format-1">Format</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>dt = datetime.strptime(<span class="hljs-string">'2025-08-14 23:39:00.00 +0200'</span>, <span class="hljs-string">'%Y-%m-%d %H:%M:%S.%f %z'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dt.strftime(<span class="hljs-string">"%dth of %B '%y (%a), %I:%M %p %Z"</span>)
<span class="hljs-string">"14th of August '25 (Thu), 11:39 PM UTC+02:00"</span>
</code></pre></div>

<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'%z'</span></code> accepts <code class="python hljs"><span class="hljs-string">'Â±HH[:]MM'</span></code> and returns <code class="python hljs"><span class="hljs-string">'Â±HHMM'</span></code> or empty string if object is naive.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'%Z'</span></code> accepts <code class="python hljs"><span class="hljs-string">'UTC/GMT'</span></code> and local timezone's code and returns timezone's name, <code class="python hljs"><span class="hljs-string">'UTC[Â±HH:MM]'</span></code> if timezone is nameless, or an empty string if object is naive.</strong></li>
</ul>
<div><h3 id="arithmetics">Arithmetics</h3><pre><code class="python language-python apache hljs">&lt;bool&gt;   = &lt;D/T/DTn&gt; &gt; &lt;D/T/DTn&gt;            <span class="hljs-comment"># Ignores time jumps (fold attribute). Also ==.</span>
&lt;bool&gt;   = &lt;DTa&gt;     &gt; &lt;DTa&gt;                <span class="hljs-comment"># Ignores time jumps if they share tzinfo object.</span>
&lt;TD&gt;     = &lt;D/DTn&gt;   - &lt;D/DTn&gt;              <span class="hljs-comment"># Ignores jumps. Convert to UTC for actual delta.</span>
&lt;TD&gt;     = &lt;DTa&gt;     - &lt;DTa&gt;                <span class="hljs-comment"># Ignores jumps if they share the tzinfo object.</span>
&lt;D/DT&gt;   = &lt;D/DT&gt;    Â± &lt;TD&gt;                 <span class="hljs-comment"># Returned datetime can fall into missing hour.</span>
&lt;TD&gt;     = &lt;TD&gt;      * &lt;float&gt;              <span class="hljs-comment"># Also `&lt;TD&gt; = abs(&lt;TD&gt;)`, `&lt;TD&gt; = &lt;TD&gt; Â± &lt;TD&gt;`.</span>
&lt;float&gt;  = &lt;TD&gt;      / &lt;TD&gt;                 <span class="hljs-comment"># Also `(&lt;int&gt;, &lt;TD&gt;) = divmod(&lt;TD&gt;, &lt;TD&gt;)`.</span>
</code></pre></div>

<div><h2 id="function"><a href="https://gto76.github.io/python-cheatsheet/#function" name="function">#</a>Function</h2><p><strong>Independent block of code that returns a value when called.</strong></p><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> &lt;<span class="hljs-title">func_name</span>&gt;<span class="hljs-params">(&lt;nondefault_args&gt;)</span>:</span> ...                  <span class="hljs-comment"># E.g. `def func(x, y): ...`.</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> &lt;<span class="hljs-title">func_name</span>&gt;<span class="hljs-params">(&lt;default_args&gt;)</span>:</span> ...                     <span class="hljs-comment"># E.g. `def func(x=0, y=0): ...`.</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> &lt;<span class="hljs-title">func_name</span>&gt;<span class="hljs-params">(&lt;nondefault_args&gt;, &lt;default_args&gt;)</span>:</span> ...  <span class="hljs-comment"># E.g. `def func(x, y=0): ...`.</span>
</code></pre></div>


<ul>
<li><strong>Function returns None if it doesn't encounter <code class="python hljs"><span class="hljs-string">'return &lt;obj/exp&gt;'</span></code> statement.</strong></li>
<li><strong>Run <code class="python hljs"><span class="hljs-string">'global &lt;var_name&gt;'</span></code> inside the function before assigning to global variable.</strong></li>
<li><strong>Default values are evaluated when function is first encountered in the scope. Any mutation of a mutable default value will persist between invocations!</strong></li>
</ul>
<div><h3 id="functioncall">Function Call</h3><pre><code class="python language-python hljs">&lt;obj&gt; = &lt;function&gt;(&lt;positional_args&gt;)                    <span class="hljs-comment"># E.g. `func(0, 0)`.</span>
&lt;obj&gt; = &lt;function&gt;(&lt;keyword_args&gt;)                       <span class="hljs-comment"># E.g. `func(x=0, y=0)`.</span>
&lt;obj&gt; = &lt;function&gt;(&lt;positional_args&gt;, &lt;keyword_args&gt;)    <span class="hljs-comment"># E.g. `func(0, y=0)`.</span>
</code></pre></div>

<div><h2 id="splatoperator"><a href="https://gto76.github.io/python-cheatsheet/#splatoperator" name="splatoperator">#</a>Splat Operator</h2><p><strong>Splat expands a collection into positional arguments, while splatty-splat expands a dictionary into keyword arguments.</strong></p><pre><code class="python language-python hljs">args, kwargs = (<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), {<span class="hljs-string">'z'</span>: <span class="hljs-number">3</span>}
func(*args, **kwargs)
</code></pre></div>


<div><h4 id="isthesameas">Is the same as:</h4><pre><code class="python language-python hljs">func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, z=<span class="hljs-number">3</span>)
</code></pre></div>

<div><h3 id="insidefunctiondefinition">Inside Function Definition</h3><p><strong>Splat combines zero or more positional arguments into a tuple, while splatty-splat combines zero or more keyword arguments into a dictionary.</strong></p><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(*a)</span>:</span>
    <span class="hljs-keyword">return</span> sum(a)
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
<span class="hljs-number">6</span>
</code></pre>
<div><h4 id="allowedcompositionsofargumentsandthewaystheycanbecalled">Allowed compositions of arguments and the ways they can be called:</h4><pre><code class="text language-text">âââââââââââââââââââââââââââââ¯âââââââââââââââ¯âââââââââââââââ¯âââââââââââââââââ
â                           â  func(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)  â func(<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>) â func(x=<span class="hljs-number">1</span>, y=<span class="hljs-number">2</span>) â
â ââââââââââââââââââââââââââââ¼âââââââââââââââ¼âââââââââââââââ¼âââââââââââââââââ¨
â <span class="hljs-title">func</span>(x, *args, **kwargs): â      â       â      â       â       â        â
â <span class="hljs-title">func</span>(*args, y, **kwargs): â              â      â       â       â        â
â <span class="hljs-title">func</span>(*, x, **kwargs):     â              â              â       â        â
âââââââââââââââââââââââââââââ·âââââââââââââââ·âââââââââââââââ·âââââââââââââââââ
</code></pre></div>

<div><h3 id="otheruses">Other Uses</h3><pre><code class="python language-python hljs">&lt;list&gt;  = [*&lt;collection&gt; [, ...]]  <span class="hljs-comment"># Or: list(&lt;coll&gt;) [+ ...]</span>
&lt;tuple&gt; = (*&lt;collection&gt;, [...])   <span class="hljs-comment"># Or: tuple(&lt;coll&gt;) [+ ...]</span>
&lt;set&gt;   = {*&lt;collection&gt; [, ...]}  <span class="hljs-comment"># Or: set(&lt;coll&gt;) [| ...]</span>
&lt;dict&gt;  = {**&lt;dict&gt; [, ...]}       <span class="hljs-comment"># Or: &lt;dict&gt; | ...</span>
</code></pre></div>

<pre><code class="python language-python hljs">head, *body, tail = &lt;collection&gt;   <span class="hljs-comment"># Head or tail can be omitted.</span>
</code></pre>
<div><h2 id="inline"><a href="https://gto76.github.io/python-cheatsheet/#inline" name="inline">#</a>Inline</h2><div><h3 id="lambda">Lambda</h3><pre><code class="python language-python hljs">&lt;func&gt; = <span class="hljs-keyword">lambda</span>: &lt;return_value&gt;                     <span class="hljs-comment"># A single statement function.</span>
&lt;func&gt; = <span class="hljs-keyword">lambda</span> &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    <span class="hljs-comment"># Also allows default arguments.</span>
</code></pre></div></div>


<div><h3 id="comprehensions">Comprehensions</h3><pre><code class="python language-python hljs">&lt;list&gt; = [i+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)]                   <span class="hljs-comment"># Returns [1, 2, ..., 10].</span>
&lt;iter&gt; = (i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">5</span>)            <span class="hljs-comment"># Returns iter([6, 7, 8, 9]).</span>
&lt;set&gt;  = {i+<span class="hljs-number">5</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)}                   <span class="hljs-comment"># Returns {5, 6, ..., 14}.</span>
&lt;dict&gt; = {i: i*<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)}                <span class="hljs-comment"># Returns {0: 0, 1: 2, ..., 9: 18}.</span>
</code></pre></div>

<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>[l+r <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> <span class="hljs-string">'abc'</span> <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-string">'abc'</span>]             <span class="hljs-comment"># Inner loop is on the right side.</span>
[<span class="hljs-string">'aa'</span>, <span class="hljs-string">'ab'</span>, <span class="hljs-string">'ac'</span>, ..., <span class="hljs-string">'cc'</span>]
</code></pre>
<div><h3 id="mapfilterreduce">Map, Filter, Reduce</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce
</code></pre></div>

<pre><code class="python language-python hljs">&lt;iter&gt; = map(<span class="hljs-keyword">lambda</span> x: x + <span class="hljs-number">1</span>, range(<span class="hljs-number">10</span>))            <span class="hljs-comment"># Returns iter([1, 2, ..., 10]).</span>
&lt;iter&gt; = filter(<span class="hljs-keyword">lambda</span> x: x &gt; <span class="hljs-number">5</span>, range(<span class="hljs-number">10</span>))         <span class="hljs-comment"># Returns iter([6, 7, 8, 9]).</span>
&lt;obj&gt;  = reduce(<span class="hljs-keyword">lambda</span> out, x: out + x, range(<span class="hljs-number">10</span>))  <span class="hljs-comment"># Returns 45.</span>
</code></pre>
<div><h3 id="anyall">Any, All</h3><pre><code class="python language-python hljs">&lt;bool&gt; = any(&lt;collection&gt;)                          <span class="hljs-comment"># Is `bool(&lt;el&gt;)` True for any el?</span>
&lt;bool&gt; = all(&lt;collection&gt;)                          <span class="hljs-comment"># True for all? Also True if empty.</span>
</code></pre></div>

<div><h3 id="conditionalexpression">Conditional Expression</h3><pre><code class="python language-python hljs">&lt;obj&gt; = &lt;exp&gt; <span class="hljs-keyword">if</span> &lt;condition&gt; <span class="hljs-keyword">else</span> &lt;exp&gt;             <span class="hljs-comment"># Only one expression is evaluated.</span>
</code></pre></div>

<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>[i <span class="hljs-keyword">if</span> i <span class="hljs-keyword">else</span> <span class="hljs-string">'zero'</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)]      <span class="hljs-comment"># `any([0, '', [], None]) == False`</span>
[<span class="hljs-string">'zero'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
</code></pre>
<div><h3 id="andor">And, Or</h3><pre><code class="python language-python hljs">&lt;obj&gt; = &lt;exp&gt; <span class="hljs-keyword">and</span> &lt;exp&gt; [<span class="hljs-keyword">and</span> ...]                   <span class="hljs-comment"># Returns first false or last object.</span>
&lt;obj&gt; = &lt;exp&gt; <span class="hljs-keyword">or</span> &lt;exp&gt; [<span class="hljs-keyword">or</span> ...]                     <span class="hljs-comment"># Returns first true or last object.</span>
</code></pre></div>

<div><h3 id="walrusoperator">Walrus Operator</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>[i <span class="hljs-keyword">for</span> ch <span class="hljs-keyword">in</span> <span class="hljs-string">'0123'</span> <span class="hljs-keyword">if</span> (i := int(ch)) &gt; <span class="hljs-number">0</span>]      <span class="hljs-comment"># Assigns to variable mid-sentence.</span>
[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
</code></pre></div>

<div><h3 id="namedtupleenumdataclass">Named Tuple, Enum, Dataclass</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> namedtuple
Point = namedtuple(<span class="hljs-string">'Point'</span>, <span class="hljs-string">'x y'</span>)                  <span class="hljs-comment"># Creates tuple's subclass.</span>
point = Point(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)                                 <span class="hljs-comment"># Returns its instance.</span>

<span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum
Direction = Enum(<span class="hljs-string">'Direction'</span>, <span class="hljs-string">'N E S W'</span>)            <span class="hljs-comment"># Creates Enum's subclass.</span>
direction = Direction.N                             <span class="hljs-comment"># Returns its member.</span>

<span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> make_dataclass
Player = make_dataclass(<span class="hljs-string">'Player'</span>, [<span class="hljs-string">'loc'</span>, <span class="hljs-string">'dir'</span>])   <span class="hljs-comment"># Creates a class.</span>
player = Player(point, direction)                   <span class="hljs-comment"># Returns its instance.</span>
</code></pre></div>

<div><h2 id="imports"><a href="https://gto76.github.io/python-cheatsheet/#imports" name="imports">#</a>Imports</h2><p><strong>Mechanism that makes code in one file available to another file.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> &lt;module&gt;            <span class="hljs-comment"># Imports a built-in or '&lt;module&gt;.py'.</span>
<span class="hljs-keyword">import</span> &lt;package&gt;           <span class="hljs-comment"># Imports a built-in or '&lt;package&gt;/__init__.py'.</span>
<span class="hljs-keyword">import</span> &lt;package&gt;.&lt;module&gt;  <span class="hljs-comment"># Imports a built-in or '&lt;package&gt;/&lt;module&gt;.py'.</span>
</code></pre></div>


<ul>
<li><strong>Package is a collection of modules, but it can also define its own functions, classes, etc.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python files with an optional init script.</strong></li>
<li><strong>Running <code class="python hljs"><span class="hljs-string">'import &lt;package&gt;'</span></code> does not automatically provide access to the package's modules unless they are explicitly imported in the <code class="python hljs"><span class="hljs-string">'&lt;package&gt;/__init__.py'</span></code> script.</strong></li>
<li><strong>Directory of the file that is passed to python command serves as a root of local imports.</strong></li>
<li><strong>For relative imports use <code class="python hljs"><span class="hljs-string">'from .[â¦][&lt;pkg/module&gt;[.â¦]] import &lt;obj&gt;'</span></code>.</strong></li>
</ul>
<div><h2 id="closure"><a href="https://gto76.github.io/python-cheatsheet/#closure" name="closure">#</a>Closure</h2><p><strong>We have/get a closure in Python when a nested function references a value of its enclosing function and then the enclosing function returns its nested function.</strong></p><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_multiplier</span><span class="hljs-params">(a)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">out</span><span class="hljs-params">(b)</span>:</span>
        <span class="hljs-keyword">return</span> a * b
    <span class="hljs-keyword">return</span> out
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>multiply_by_3 = get_multiplier(<span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>multiply_by_3(<span class="hljs-number">10</span>)
<span class="hljs-number">30</span>
</code></pre>
<ul>
<li><strong>Any value that is referenced from within multiple nested functions gets shared.</strong></li>
</ul>
<div><h3 id="partial">Partial</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial
&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt; [, ...]])
</code></pre></div>

<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply</span><span class="hljs-params">(a, b)</span>:</span>
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> a * b
<span class="hljs-meta">&gt;&gt;&gt; </span>multiply_by_3 = partial(multiply, <span class="hljs-number">3</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>multiply_by_3(<span class="hljs-number">10</span>)
<span class="hljs-number">30</span>
</code></pre>
<ul>
<li><strong>Partial is also useful in cases when a function needs to be passed as an argument because it enables us to set its arguments beforehand (<code class="python hljs"><span class="hljs-string">'collections.defaultdict(&lt;func&gt;)'</span></code>, <code class="python hljs"><span class="hljs-string">'iter(&lt;func&gt;, to_exc)'</span></code> and <code class="python hljs"><span class="hljs-string">'dataclasses.field(default_factory=&lt;func&gt;)'</span></code>).</strong></li>
</ul>
<div><h3 id="nonlocal">Non-Local</h3><p><strong>If variable is being assigned to anywhere in the scope, it is regarded as a local variable, unless it is declared as a 'global' or a 'nonlocal'.</strong></p><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_counter</span><span class="hljs-params">()</span>:</span>
    i = <span class="hljs-number">0</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">out</span><span class="hljs-params">()</span>:</span>
        <span class="hljs-keyword">nonlocal</span> i
        i += <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> i
    <span class="hljs-keyword">return</span> out
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>counter = get_counter()
<span class="hljs-meta">&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
</code></pre>
<div class="pagebreak"></div><div><h2 id="decorator"><a href="https://gto76.github.io/python-cheatsheet/#decorator" name="decorator">#</a>Decorator</h2><p><strong>A decorator takes a function, adds some functionality and returns it. It can be any <a href="https://gto76.github.io/python-cheatsheet/#callable">callable</a>, but is usually implemented as a function that returns a <a href="https://gto76.github.io/python-cheatsheet/#closure">closure</a>.</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">@decorator_name</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">function_that_gets_passed_to_decorator</span><span class="hljs-params">()</span>:</span>
    ...
</code></pre></div>


<div><h3 id="debuggerexample">Debugger Example</h3><p><strong>Decorator that prints function's name every time the function is called.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">(func)</span>:</span>
<span class="hljs-meta">    @wraps(func)</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">out</span><span class="hljs-params">(*args, **kwargs)</span>:</span>
        print(func.__name__)
        <span class="hljs-keyword">return</span> func(*args, **kwargs)
    <span class="hljs-keyword">return</span> out

<span class="hljs-meta">@debug</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span>
    <span class="hljs-keyword">return</span> x + y
</code></pre></div>


<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the passed function (func) to the function it is wrapping (out). Without it, <code class="python hljs"><span class="hljs-string">'add.__name__'</span></code> would return <code class="python hljs"><span class="hljs-string">'out'</span></code>.</strong></li>
</ul>
<div><h3 id="cache">Cache</h3><p><strong>Decorator that caches function's return values. All function's arguments must be hashable.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cache

<span class="hljs-meta">@cache</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fib</span><span class="hljs-params">(n)</span>:</span>
    <span class="hljs-keyword">return</span> n <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> fib(n-<span class="hljs-number">2</span>) + fib(n-<span class="hljs-number">1</span>)</code></pre></div>


<ul>
<li><strong>Potential problem with cache is that it can grow indefinitely. To clear stored values run <code class="python hljs"><span class="hljs-string">'&lt;func&gt;.cache_clear()'</span></code>, or use <code class="python hljs"><span class="hljs-string">'@lru_cache(maxsize=&lt;int&gt;)'</span></code> decorator instead.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 3000 by default. To increase it run <code class="python hljs"><span class="hljs-string">'sys.setrecursionlimit(&lt;int&gt;)'</span></code>.</strong></li>
</ul>
<div><h3 id="parametrizeddecorator">Parametrized Decorator</h3><p><strong>A decorator that accepts arguments and returns a normal decorator that accepts a function.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug</span><span class="hljs-params">(print_result=<span class="hljs-keyword">False</span>)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span><span class="hljs-params">(func)</span>:</span>
<span class="hljs-meta">        @wraps(func)</span>
        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">out</span><span class="hljs-params">(*args, **kwargs)</span>:</span>
            result = func(*args, **kwargs)
            print(func.__name__, result <span class="hljs-keyword">if</span> print_result <span class="hljs-keyword">else</span> <span class="hljs-string">''</span>)
            <span class="hljs-keyword">return</span> result
        <span class="hljs-keyword">return</span> out
    <span class="hljs-keyword">return</span> decorator

<span class="hljs-meta">@debug(print_result=True)</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span>
    <span class="hljs-keyword">return</span> x + y
</code></pre></div>


<ul>
<li><strong>Using only <code class="python hljs"><span class="hljs-string">'@debug'</span></code> to decorate the add() function would not work here, because debug would then receive the add() function as a 'print_result' argument. Decorators can however manually check if the argument they received is a function and act accordingly.</strong></li>
</ul>
<div><h2 id="class"><a href="https://gto76.github.io/python-cheatsheet/#class" name="class">#</a>Class</h2><p><strong>A template for creating user-defined objects.</strong></p><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> str(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span>
        class_name = self.__class__.__name__
        <span class="hljs-keyword">return</span> <span class="hljs-string">f'<span class="hljs-subst">{class_name}</span>(<span class="hljs-subst">{self.a!r}</span>)'</span>

<span class="hljs-meta">    @classmethod</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_class_name</span><span class="hljs-params">(cls)</span>:</span>
        <span class="hljs-keyword">return</span> cls.__name__
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>obj = MyClass(<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>obj.a, str(obj), repr(obj)
(<span class="hljs-number">1</span>, <span class="hljs-string">'1'</span>, <span class="hljs-string">'MyClass(1)'</span>)
</code></pre>
<ul>
<li><strong>Methods whose names start and end with two underscores are called special methods. They are executed when object is passed to a built-in function or used as an operand, for&nbsp;example, <code class="python hljs"><span class="hljs-string">'print(a)'</span></code> calls <code class="python hljs"><span class="hljs-string">'a.__str__()'</span></code> and <code class="python hljs"><span class="hljs-string">'a + b'</span></code> calls <code class="python hljs"><span class="hljs-string">'a.__add__(b)'</span></code>.</strong></li>
<li><strong>Methods decorated with <code class="python hljs"><span class="hljs-string">'@staticmethod'</span></code> receive neither 'self' nor 'cls' argument.</strong></li>
<li><strong>Return value of str() special method should be readable and of repr() unambiguous. If only repr() is defined, it will also be used for str().</strong></li>
</ul>
<div><h4 id="expressionsthatcallthestrmethod">Expressions that call the str() method:</h4><pre><code class="python language-python hljs">print(&lt;obj&gt;)
<span class="hljs-string">f'<span class="hljs-subst">{&lt;obj&gt;}</span>'</span>
logging.warning(&lt;obj&gt;)
csv.writer(&lt;file&gt;).writerow([&lt;obj&gt;])
</code></pre></div>

<div><h4 id="expressionsthatcallthereprmethod">Expressions that call the repr() method:</h4><pre><code class="python language-python hljs">print/str/repr([&lt;obj&gt;])
print/str/repr({&lt;obj&gt;: &lt;obj&gt;})
<span class="hljs-string">f'<span class="hljs-subst">{&lt;obj&gt;!r}</span>'</span>
Z = make_dataclass(<span class="hljs-string">'Z'</span>, [<span class="hljs-string">'a'</span>]); print/str/repr(Z(&lt;obj&gt;))
</code></pre></div>

<div><h3 id="subclass">Subclass</h3><ul>
<li><strong>Inheritance is a mechanism that enables a class to extend some other class (that is, subclass to extend its parent), and by doing so inherit all of its methods and attributes.</strong></li>
<li><strong>Subclass can then add its own methods and attributes or override inherited ones by reusing their names.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name)</span>:</span>
        self.name = name
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">f'Person(<span class="hljs-subst">{self.name!r}</span>)'</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__lt__</span><span class="hljs-params">(self, other)</span>:</span>
        <span class="hljs-keyword">return</span> self.name &lt; other.name

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Employee</span><span class="hljs-params">(Person)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name, staff_num)</span>:</span>
        super().__init__(name)
        self.staff_num = staff_num
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">f'Employee(<span class="hljs-subst">{self.name!r}</span>, <span class="hljs-subst">{self.staff_num}</span>)'</span>
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>people = {Person(<span class="hljs-string">'Ann'</span>), Employee(<span class="hljs-string">'Bob'</span>, <span class="hljs-number">0</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span>sorted(people)
[Person(<span class="hljs-string">'Ann'</span>), Employee(<span class="hljs-string">'Bob'</span>, <span class="hljs-number">0</span>)]
</code></pre>
<div><h3 id="typeannotations">Type Annotations</h3><ul>
<li><strong>They add type hints to variables, arguments and functions (<code class="python hljs"><span class="hljs-string">'def f() -&gt; &lt;type&gt;:'</span></code>).</strong></li>
<li><strong>Hints are used by type checkers like <a href="https://pypi.org/project/mypy/">mypy</a>, data validation libraries such as <a href="https://pypi.org/project/pydantic/">Pydantic</a> and lately also by <a href="https://pypi.org/project/Cython/">Cython</a> compiler. However, they are not enforced by CPython interpreter.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> abc

&lt;name&gt;: &lt;type&gt; [| ...] [= &lt;obj&gt;]
&lt;name&gt;: list/set/abc.Iterable/abc.Sequence[&lt;type&gt;] [= &lt;obj&gt;]
&lt;name&gt;: tuple/dict[&lt;type&gt;, ...] [= &lt;obj&gt;]
</code></pre></div>


<div><h3 id="dataclass">Dataclass</h3><p><strong>Decorator that uses class variables to generate init(), repr() and eq() special methods.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> dataclass, field, make_dataclass

<span class="hljs-meta">@dataclass(order=False, frozen=False)</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> &lt;<span class="hljs-title">class_name</span>&gt;:</span>
    &lt;attr_name&gt;: &lt;type&gt;
    &lt;attr_name&gt;: &lt;type&gt; = &lt;default_value&gt;
    &lt;attr_name&gt;: list/dict/set = field(default_factory=list/dict/set)
</code></pre></div>


<ul>
<li><strong>Objects can be made <a href="https://gto76.github.io/python-cheatsheet/#sortable">sortable</a> with <code class="python hljs"><span class="hljs-string">'order=True'</span></code> and immutable with <code class="python hljs"><span class="hljs-string">'frozen=True'</span></code>.</strong></li>
<li><strong>For object to be <a href="https://gto76.github.io/python-cheatsheet/#hashable">hashable</a>, all attributes must be hashable and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because <code class="python hljs"><span class="hljs-string">'&lt;attr_name&gt;: list = []'</span></code> would make a list that is shared among all instances. Its 'default_factory' argument accepts any <a href="https://gto76.github.io/python-cheatsheet/#callable">callable</a> object.</strong></li>
<li><strong>For attributes of arbitrary type use <code class="python hljs"><span class="hljs-string">'typing.Any'</span></code>.</strong></li>
</ul>
<pre><code class="python language-python hljs">P = make_dataclass(<span class="hljs-string">'P'</span>, [<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>])
P = make_dataclass(<span class="hljs-string">'P'</span>, [(<span class="hljs-string">'x'</span>, float), (<span class="hljs-string">'y'</span>, float)])
P = make_dataclass(<span class="hljs-string">'P'</span>, [(<span class="hljs-string">'x'</span>, float, <span class="hljs-number">0</span>), (<span class="hljs-string">'y'</span>, float, <span class="hljs-number">0</span>)])
</code></pre>
<div><h3 id="property">Property</h3><p><strong>Pythonic way of implementing getters and setters.</strong></p><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span>
<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> <span class="hljs-string">' '</span>.join(self._name)

<span class="hljs-meta">    @name.setter</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span><span class="hljs-params">(self, value)</span>:</span>
        self._name = value.split()
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>person = Person()
<span class="hljs-meta">&gt;&gt;&gt; </span>person.name = <span class="hljs-string">'\t Guido  van Rossum \n'</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>person.name
<span class="hljs-string">'Guido van Rossum'</span>
</code></pre>
<div><h3 id="slots">Slots</h3><p><strong>Mechanism that restricts objects to attributes listed in 'slots'.</strong></p><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClassWithSlots</span>:</span>
    __slots__ = [<span class="hljs-string">'a'</span>]
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>
        self.a = <span class="hljs-number">1</span>
</code></pre></div>


<div><h3 id="copy">Copy</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> copy <span class="hljs-keyword">import</span> copy, deepcopy
&lt;object&gt; = copy/deepcopy(&lt;object&gt;)
</code></pre></div>

<div><h2 id="ducktypes"><a href="https://gto76.github.io/python-cheatsheet/#ducktypes" name="ducktypes">#</a>Duck Types</h2><p><strong>A duck type is an implicit type that prescribes a set of special methods. Any object that has those methods defined is considered a member of that duck type.</strong></p><div><h3 id="comparable">Comparable</h3><ul>
<li><strong>If eq() method is not overridden, it returns <code class="python hljs"><span class="hljs-string">'id(self) == id(other)'</span></code>, which is the same as <code class="python hljs"><span class="hljs-string">'self is other'</span></code>. That means all user-defined objects compare not equal by default (because id() returns object's memory address that is guaranteed to be unique).</strong></li>
<li><strong>Only the left side object has eq() method called, unless it returns NotImplemented, in which case the right object is consulted. Result is False if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq() defined.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyComparable</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span><span class="hljs-params">(self, other)</span>:</span>
        <span class="hljs-keyword">if</span> isinstance(other, type(self)):
            <span class="hljs-keyword">return</span> self.a == other.a
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">NotImplemented</span>
</code></pre></div></div>




<div><h3 id="hashable">Hashable</h3><ul>
<li><strong>Hashable object needs both hash() and eq() methods and its hash value must not change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash value, meaning default hash() that returns <code class="python hljs"><span class="hljs-string">'id(self)'</span></code> will not do. That is why Python automatically makes classes unhashable if you only implement eq().</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHashable</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self._a = a
<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">a</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span><span class="hljs-params">(self, other)</span>:</span>
        <span class="hljs-keyword">if</span> isinstance(other, type(self)):
            <span class="hljs-keyword">return</span> self.a == other.a
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">NotImplemented</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__hash__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> hash(self.a)
</code></pre></div>


<div><h3 id="sortable">Sortable</h3><ul>
<li><strong>With 'total_ordering' decorator, you only need to provide eq() and one of lt(), gt(), le() or ge() special methods (used by &lt;, &gt;, &lt;=, &gt;=) and the rest will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while max() only requires gt(). However, it is best to define them all so that confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their values get compared in order until a pair of unequal values is found. The comparison of this two values is then returned. The shorter sequence is considered smaller in case of all values being equal.</strong></li>
<li><strong>To sort collection of strings in proper alphabetical order pass <code class="python hljs"><span class="hljs-string">'key=locale.strxfrm'</span></code> to sorted() after running <code class="python hljs"><span class="hljs-string">'locale.setlocale(locale.LC_COLLATE, "en_US.UTF-8")'</span></code>.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> total_ordering

<span class="hljs-meta">@total_ordering</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySortable</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__eq__</span><span class="hljs-params">(self, other)</span>:</span>
        <span class="hljs-keyword">if</span> isinstance(other, type(self)):
            <span class="hljs-keyword">return</span> self.a == other.a
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">NotImplemented</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__lt__</span><span class="hljs-params">(self, other)</span>:</span>
        <span class="hljs-keyword">if</span> isinstance(other, type(self)):
            <span class="hljs-keyword">return</span> self.a &lt; other.a
        <span class="hljs-keyword">return</span> <span class="hljs-built_in">NotImplemented</span>
</code></pre></div>


<div><h3 id="iterator-1">Iterator</h3><ul>
<li><strong>Any object that has methods next() and iter() is an iterator.</strong></li>
<li><strong>Next() should return next item or raise StopIteration exception.</strong></li>
<li><strong>Iter() should return an iterator of remaining items, i.e. 'self'.</strong></li>
<li><strong>Any object that has iter() method can be used in a for loop.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>
        self.i = <span class="hljs-number">0</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__next__</span><span class="hljs-params">(self)</span>:</span>
        self.i += <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> self.i
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>counter = Counter()
<span class="hljs-meta">&gt;&gt;&gt; </span>next(counter), next(counter), next(counter)
(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
</code></pre>
<div><h4 id="pythonhasmanydifferentiteratorobjects">Python has many different iterator objects:</h4><ul>
<li><strong>Sequence iterators returned by the <a href="https://gto76.github.io/python-cheatsheet/#iterator">iter()</a> function, such as list_iterator, etc.</strong></li>
<li><strong>Objects returned by the <a href="https://gto76.github.io/python-cheatsheet/#itertools">itertools</a> module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="https://gto76.github.io/python-cheatsheet/#generator">generator functions</a> and <a href="https://gto76.github.io/python-cheatsheet/#comprehensions">generator expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="https://gto76.github.io/python-cheatsheet/#open">open()</a> function, etc.</strong></li>
</ul><div><h3 id="callable">Callable</h3><ul>
<li><strong>All functions and classes have a call() method that is executed when they are called.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'callable(&lt;obj&gt;)'</span></code> or <code class="python hljs"><span class="hljs-string">'isinstance(&lt;obj&gt;, collections.abc.Callable)'</span></code> to check if object is callable. You can also call the object and check if it raised TypeError.</strong></li>
<li><strong>When this cheatsheet uses <code class="python hljs"><span class="hljs-string">'&lt;function&gt;'</span></code> as an argument, it means <code class="python hljs"><span class="hljs-string">'&lt;callable&gt;'</span></code>.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>
        self.i = <span class="hljs-number">0</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self)</span>:</span>
        self.i += <span class="hljs-number">1</span>
        <span class="hljs-keyword">return</span> self.i
</code></pre></div></div>




<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>counter = Counter()
<span class="hljs-meta">&gt;&gt;&gt; </span>counter(), counter(), counter()
(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
</code></pre>
<div><h3 id="contextmanager">Context Manager</h3><ul>
<li><strong>With statements only work on objects that have enter() and exit() special methods.</strong></li>
<li><strong>Enter() should lock the resources and optionally return an object (file, lock, etc.).</strong></li>
<li><strong>Exit() should release the resources (for example close a file, release a lock, etc.).</strong></li>
<li><strong>Any exception that happens inside the with block is passed to the exit() method.</strong></li>
<li><strong>The exit() method can suppress the exception by returning a true value.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyOpen</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, filename)</span>:</span>
        self.filename = filename
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>:</span>
        self.file = open(self.filename)
        <span class="hljs-keyword">return</span> self.file
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exception, traceback)</span>:</span>
        self.file.close()
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> open(<span class="hljs-string">'test.txt'</span>, <span class="hljs-string">'w'</span>) <span class="hljs-keyword">as</span> file:
<span class="hljs-meta">... </span>    file.write(<span class="hljs-string">'Hello World!'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> MyOpen(<span class="hljs-string">'test.txt'</span>) <span class="hljs-keyword">as</span> file:
<span class="hljs-meta">... </span>    print(file.read())
Hello World!
</code></pre>
<div><h2 id="iterableducktypes"><a href="https://gto76.github.io/python-cheatsheet/#iterableducktypes" name="iterableducktypes">#</a>Iterable Duck Types</h2><div><h3 id="iterable">Iterable</h3><ul>
<li><strong>Only required method is iter(). It should return an iterator of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter() defined.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIterable</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> iter(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__contains__</span><span class="hljs-params">(self, el)</span>:</span>
        <span class="hljs-keyword">return</span> el <span class="hljs-keyword">in</span> self.a
</code></pre></div></div>



<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>obj = MyIterable([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span>[el <span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> obj]
[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-number">1</span> <span class="hljs-keyword">in</span> obj
<span class="hljs-keyword">True</span>
</code></pre>
<div><h3 id="collection">Collection</h3><ul>
<li><strong>Only required methods are iter() and len(). Len() should return the number of items.</strong></li>
<li><strong>This cheatsheet actually means <code class="python hljs"><span class="hljs-string">'&lt;iterable&gt;'</span></code> when it uses the <code class="python hljs"><span class="hljs-string">'&lt;collection&gt;'</span></code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds scarier and more vague than 'collection'. The main drawback of this decision is that the reader could think a certain function doesn't accept iterators when it does, since iterators are the only built-in objects that are iterable but are not collections.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCollection</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> iter(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__contains__</span><span class="hljs-params">(self, el)</span>:</span>
        <span class="hljs-keyword">return</span> el <span class="hljs-keyword">in</span> self.a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> len(self.a)
</code></pre></div>


<div><h3 id="sequence">Sequence</h3><ul>
<li><strong>Only required methods are getitem() and len(). Getitem() should return the item at the passed index or raise IndexError (it may also support negative indices and/or slices).</strong></li>
<li><strong>Iter() and contains() automatically work on any object that has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has getitem() and len() defined. It returns reversed iterator of object's items.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySequence</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__iter__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> iter(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__contains__</span><span class="hljs-params">(self, el)</span>:</span>
        <span class="hljs-keyword">return</span> el <span class="hljs-keyword">in</span> self.a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> len(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span><span class="hljs-params">(self, i)</span>:</span>
        <span class="hljs-keyword">return</span> self.a[i]
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__reversed__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> reversed(self.a)
</code></pre></div>


<div><h4 id="discrepanciesbetweenglossarydefinitionsandabstractbaseclasses">Discrepancies between glossary definitions and abstract base classes:</h4><ul>
<li><strong>Python's glossary defines iterable as any object with special methods iter() and/or getitem() and sequence as any object with getitem() and len(). It doesn't define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() only checks whether object/class has special method iter(), while ABC Collection checks for iter(), contains() and len().</strong></li>
</ul></div>




<div><h3 id="abcsequence">ABC Sequence</h3><ul>
<li><strong>It's a richer interface than the basic sequence that also requires just getitem() and len().</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(), index() and count() special methods.</strong></li>
<li><strong>Unlike <code class="python hljs"><span class="hljs-string">'abc.Iterable'</span></code> and <code class="python hljs"><span class="hljs-string">'abc.Collection'</span></code>, it is not a duck type. That is why <code class="python hljs"><span class="hljs-string">'issubclass(MySequence, abc.Sequence)'</span></code> would return False even if MySequence had all the methods defined. It however recognizes list, tuple, range, str, bytes, bytearray, array, memoryview and deque, since they are registered as Sequence's virtual subclasses.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> abc

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAbcSequence</span><span class="hljs-params">(abc.Sequence)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, a)</span>:</span>
        self.a = a
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> len(self.a)
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span><span class="hljs-params">(self, i)</span>:</span>
        <span class="hljs-keyword">return</span> self.a[i]
</code></pre></div><div><h4 id="tableofrequiredandautomaticallyavailablespecialmethods">Table of required and automatically available special methods:</h4><pre><code class="text language-text">ââââââââââââââ¯âââââââââââââ¯âââââââââââââ¯âââââââââââââ¯âââââââââââââââ
â            â  Iterable  â Collection â  Sequence  â abc.Sequence â
â âââââââââââââ¼âââââââââââââ¼âââââââââââââ¼âââââââââââââ¼âââââââââââââââ¨
â iter()     â     !      â     !      â     â      â      â       â
â contains() â     â      â     â      â     â      â      â       â
â len()      â            â     !      â     !      â      !       â
â getitem()  â            â            â     !      â      !       â
â reversed() â            â            â     â      â      â       â
â index()    â            â            â            â      â       â
â count()    â            â            â            â      â       â
ââââââââââââââ·âââââââââââââ·âââââââââââââ·âââââââââââââ·âââââââââââââââ
</code></pre></div>

<ul>
<li><strong>Method iter() is required for <code class="python hljs"><span class="hljs-string">'isinstance(&lt;obj&gt;, abc.Iterable)'</span></code> to return True, however any object with getitem() will work with any code expecting an iterable.</strong></li>
<li><strong>MutableSequence, Set, MutableSet, Mapping and MutableMapping ABCs are also extendable. Use <code class="python hljs"><span class="hljs-string">'&lt;abc&gt;.__abstractmethods__'</span></code> to get names of required methods.</strong></li>
</ul>
<div><h2 id="enum"><a href="https://gto76.github.io/python-cheatsheet/#enum" name="enum">#</a>Enum</h2><p><strong>Class of named constants called members.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum, auto
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> &lt;<span class="hljs-title">enum_name</span>&gt;<span class="hljs-params">(Enum)</span>:</span>
    &lt;member_name&gt; = auto()              <span class="hljs-comment"># Increment of the last numeric value or 1.</span>
    &lt;member_name&gt; = &lt;value&gt;             <span class="hljs-comment"># Values don't have to be hashable or unique.</span>
    &lt;member_name&gt; = &lt;el_1&gt;, &lt;el_2&gt;      <span class="hljs-comment"># Values can be collections. This is a tuple.</span>
</code></pre>
<ul>
<li><strong>Methods receive the member they were called on as the 'self' argument.</strong></li>
<li><strong>Accessing a member named after a reserved keyword causes SyntaxError.</strong></li>
</ul>
<pre><code class="python language-python hljs">&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;         <span class="hljs-comment"># Returns a member. Raises AttributeError.</span>
&lt;member&gt; = &lt;enum&gt;[<span class="hljs-string">'&lt;member_name&gt;'</span>]      <span class="hljs-comment"># Returns a member. Raises KeyError.</span>
&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)              <span class="hljs-comment"># Returns a member. Raises ValueError.</span>
&lt;str&gt;    = &lt;member&gt;.name                <span class="hljs-comment"># Returns the member's name.</span>
&lt;obj&gt;    = &lt;member&gt;.value               <span class="hljs-comment"># Returns the member's value.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt;   = list(&lt;enum&gt;)                 <span class="hljs-comment"># Returns a list of enum's members.</span>
&lt;list&gt;   = &lt;enum&gt;._member_names_        <span class="hljs-comment"># Returns a list of member names.</span>
&lt;list&gt;   = [m.value <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> &lt;enum&gt;]    <span class="hljs-comment"># Returns a list of member values.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;enum&gt;   = type(&lt;member&gt;)               <span class="hljs-comment"># Returns an enum. Also &lt;memb&gt;.__class__.</span>
&lt;iter&gt;   = itertools.cycle(&lt;enum&gt;)      <span class="hljs-comment"># Returns an endless iterator of members.</span>
&lt;member&gt; = random.choice(list(&lt;enum&gt;))  <span class="hljs-comment"># Randomly selects one of the members.</span>
</code></pre>
<div><h3 id="inline-1">Inline</h3><pre><code class="python language-python hljs">Cutlery = Enum(<span class="hljs-string">'Cutlery'</span>, <span class="hljs-string">'FORK KNIFE SPOON'</span>)
Cutlery = Enum(<span class="hljs-string">'Cutlery'</span>, [<span class="hljs-string">'FORK'</span>, <span class="hljs-string">'KNIFE'</span>, <span class="hljs-string">'SPOON'</span>])
Cutlery = Enum(<span class="hljs-string">'Cutlery'</span>, {<span class="hljs-string">'FORK'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'KNIFE'</span>: <span class="hljs-number">2</span>, <span class="hljs-string">'SPOON'</span>: <span class="hljs-number">3</span>})
</code></pre></div>

<div><h4 id="userdefinedfunctionscannotbevaluessotheymustbewrapped">User-defined functions cannot be values, so they must be wrapped:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial
LogicOp = Enum(<span class="hljs-string">'LogicOp'</span>, {<span class="hljs-string">'AND'</span>: partial(<span class="hljs-keyword">lambda</span> l, r: l <span class="hljs-keyword">and</span> r),
                           <span class="hljs-string">'OR'</span>:  partial(<span class="hljs-keyword">lambda</span> l, r: l <span class="hljs-keyword">or</span> r)})
</code></pre></div>

<div><h2 id="exceptions"><a href="https://gto76.github.io/python-cheatsheet/#exceptions" name="exceptions">#</a>Exceptions</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">try</span>:
    &lt;code&gt;
<span class="hljs-keyword">except</span> &lt;exception&gt;:
    &lt;code&gt;
</code></pre></div>

<div><h3 id="complexexample">Complex Example</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">try</span>:
    &lt;code_1&gt;
<span class="hljs-keyword">except</span> &lt;exception_a&gt;:
    &lt;code_2_a&gt;
<span class="hljs-keyword">except</span> &lt;exception_b&gt;:
    &lt;code_2_b&gt;
<span class="hljs-keyword">else</span>:
    &lt;code_2_c&gt;
<span class="hljs-keyword">finally</span>:
    &lt;code_3&gt;
</code></pre></div>

<ul>
<li><strong>Code inside the <code class="python hljs"><span class="hljs-string">'else'</span></code> block will only be executed if <code class="python hljs"><span class="hljs-string">'try'</span></code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code class="python hljs"><span class="hljs-string">'finally'</span></code> block will always be executed (unless a signal is received).</strong></li>
<li><strong>All variables that are initialized in executed blocks are also visible in all subsequent blocks, as well as outside the try statement (only the function block delimits scope).</strong></li>
<li><strong>To catch signals use <code class="python hljs"><span class="hljs-string">'signal.signal(signal_number, handler_function)'</span></code>.</strong></li>
</ul>
<div><h3 id="catchingexceptions">Catching Exceptions</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">except</span> &lt;exception&gt;: ...
<span class="hljs-keyword">except</span> &lt;exception&gt; <span class="hljs-keyword">as</span> &lt;name&gt;: ...
<span class="hljs-keyword">except</span> (&lt;exception&gt;, [...]): ...
<span class="hljs-keyword">except</span> (&lt;exception&gt;, [...]) <span class="hljs-keyword">as</span> &lt;name&gt;: ...
</code></pre></div>

<ul>
<li><strong>Also catches subclasses, e.g. <code class="python hljs"><span class="hljs-string">'IndexError'</span></code> is caught by <code class="python hljs"><span class="hljs-string">'except LookupError:'</span></code>.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'traceback.print_exc()'</span></code> to print the full error message to standard error stream.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'print(&lt;name&gt;)'</span></code> to print just the cause of the exception (that is, its arguments).</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'logging.exception(&lt;str&gt;)'</span></code> to log the passed message, followed by the full error message of the caught exception. For details about setting up the logger see <a href="https://gto76.github.io/python-cheatsheet/#logging">Logging</a>.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'sys.exc_info()'</span></code> to get exception type, object, and traceback of caught exception.</strong></li>
</ul>
<div><h3 id="raisingexceptions">Raising Exceptions</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">raise</span> &lt;exception&gt;
<span class="hljs-keyword">raise</span> &lt;exception&gt;()
<span class="hljs-keyword">raise</span> &lt;exception&gt;(&lt;obj&gt; [, ...])
</code></pre></div>

<div><h4 id="reraisingcaughtexception">Re-raising caught exception:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">except</span> &lt;exception&gt; [<span class="hljs-keyword">as</span> &lt;name&gt;]:
    ...
    <span class="hljs-keyword">raise</span>
</code></pre></div>

<div><h3 id="exceptionobject">Exception Object</h3><pre><code class="python language-python hljs">arguments = &lt;name&gt;.args
exc_type  = &lt;name&gt;.__class__
filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename
func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name
line_str  = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)
trace_str = <span class="hljs-string">''</span>.join(traceback.format_tb(&lt;name&gt;.__traceback__))
error_msg = <span class="hljs-string">''</span>.join(traceback.format_exception(type(&lt;name&gt;), &lt;name&gt;, &lt;name&gt;.__traceback__))
</code></pre></div>

<div><h3 id="builtinexceptions">Built-in Exceptions</h3><pre><code class="text language-text">BaseException
 âââ SystemExit                   <span class="hljs-comment"># Raised by the sys.exit() function (see #Exit for details).</span>
 âââ KeyboardInterrupt            <span class="hljs-comment"># Raised when the user hits the interrupt key (control-c).</span>
 âââ Exception                    <span class="hljs-comment"># User-defined exceptions should be derived from this class.</span>
      âââ ArithmeticError         <span class="hljs-comment"># Base class for arithmetic errors such as ZeroDivisionError.</span>
      âââ AssertionError          <span class="hljs-comment"># Raised by `assert &lt;exp&gt;` if expression returns false value.</span>
      âââ AttributeError          <span class="hljs-comment"># Raised when object doesn't have requested attribute/method.</span>
      âââ EOFError                <span class="hljs-comment"># Raised by input() when it hits an end-of-file condition.</span>
      âââ LookupError             <span class="hljs-comment"># Base class for errors when a collection can't find an item.</span>
      â    âââ IndexError         <span class="hljs-comment"># Raised when index of a sequence (list/str) is out of range.</span>
      â    âââ KeyError           <span class="hljs-comment"># Raised when a dictionary key or set element is missing.</span>
      âââ MemoryError             <span class="hljs-comment"># Out of memory. May be too late to start deleting variables.</span>
      âââ NameError               <span class="hljs-comment"># Raised when nonexistent name (variable/func/class) is used.</span>
      â    âââ UnboundLocalError  <span class="hljs-comment"># Raised when local name is used before it's being defined.</span>
      âââ OSError                 <span class="hljs-comment"># Errors such as FileExistsError, TimeoutError (see #Open).</span>
      â    âââ ConnectionError    <span class="hljs-comment"># Errors such as BrokenPipeError and ConnectionAbortedError.</span>
      âââ RuntimeError            <span class="hljs-comment"># Raised by errors that don't fall into other categories.</span>
      â    âââ NotImplementedErâ¦  <span class="hljs-comment"># Can be raised by abstract methods or by unfinished code.</span>
      â    âââ RecursionError     <span class="hljs-comment"># Raised if max recursion depth is exceeded (3k by default).</span>
      âââ StopIteration           <span class="hljs-comment"># Raised when exhausted (empty) iterator is passed to next().</span>
      âââ TypeError               <span class="hljs-comment"># When an argument of the wrong type is passed to function.</span>
      âââ ValueError              <span class="hljs-comment"># When argument has the right type but inappropriate value.</span>
</code></pre></div>

<div><h4 id="collectionsandtheirexceptions">Collections and their exceptions:</h4><pre><code class="text language-text">âââââââââââââ¯âââââââââââââ¯âââââââââââââ¯âââââââââââââ
â           â    List    â    Set     â    Dict    â
â ââââââââââââ¼âââââââââââââ¼âââââââââââââ¼âââââââââââââ¨
â getitem() â IndexError â            â  KeyError  â
â pop()     â IndexError â  KeyError  â  KeyError  â
â remove()  â ValueError â  KeyError  â            â
â index()   â ValueError â            â            â
âââââââââââââ·âââââââââââââ·âââââââââââââ·âââââââââââââ
</code></pre></div>

<div><h4 id="usefulbuiltinexceptions">Useful built-in exceptions:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">'Argument is of the wrong type!'</span>)
<span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">'Argument has the right type but an inappropriate value!'</span>)
<span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">'I am too lazy to define my own exception!'</span>)
</code></pre></div>

<div><h3 id="userdefinedexceptions">User-defined Exceptions</h3><pre><code class="python language-python hljs"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyError</span><span class="hljs-params">(Exception)</span>:</span> <span class="hljs-keyword">pass</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyInputError</span><span class="hljs-params">(MyError)</span>:</span> <span class="hljs-keyword">pass</span>
</code></pre></div>

<div><h2 id="exit"><a href="https://gto76.github.io/python-cheatsheet/#exit" name="exit">#</a>Exit</h2><p><strong>Exits the interpreter by raising SystemExit exception.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> sys
sys.exit()                        <span class="hljs-comment"># Exits with exit code 0 (success).</span>
sys.exit(&lt;int&gt;)                   <span class="hljs-comment"># Exits with the passed exit code.</span>
sys.exit(&lt;obj&gt;)                   <span class="hljs-comment"># Prints to stderr and exits with 1.</span>
</code></pre></div>


<div><h2 id="print"><a href="https://gto76.github.io/python-cheatsheet/#print" name="print">#</a>Print</h2><pre><code class="python language-python hljs">print(&lt;el_1&gt;, ..., sep=<span class="hljs-string">' '</span>, end=<span class="hljs-string">'\n'</span>, file=sys.stdout, flush=<span class="hljs-keyword">False</span>)
</code></pre></div>

<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'file=sys.stderr'</span></code> for messages about errors so they can be processed separately.</strong></li>
<li><strong>Stdout and stderr streams hold output in a buffer until they receive a string containing '\n' or '\r', buffer reaches 4096 characters, <code class="python hljs"><span class="hljs-string">'flush=True'</span></code> is used, or program exits.</strong></li>
</ul>
<div><h3 id="prettyprint">Pretty Print</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint
pprint(&lt;collection&gt;, width=<span class="hljs-number">80</span>, depth=<span class="hljs-keyword">None</span>, compact=<span class="hljs-keyword">False</span>, sort_dicts=<span class="hljs-keyword">True</span>)
</code></pre></div>

<ul>
<li><strong>Each item is printed on its own line if collection exceeds 'width' characters.</strong></li>
<li><strong>Nested collections that are 'depth' levels deep get printed as 'â¦'.</strong></li>
</ul>
<div><h2 id="input"><a href="https://gto76.github.io/python-cheatsheet/#input" name="input">#</a>Input</h2><pre><code class="python language-python hljs">&lt;str&gt; = input()
</code></pre></div>

<ul>
<li><strong>Reads a line from the user input or pipe if present (trailing newline gets stripped).</strong></li>
<li><strong>If argument is passed, it gets printed to the standard output before input is read.</strong></li>
<li><strong>EOFError is raised if user hits EOF (ctrl-d/ctrl-zâ) or if stream is already exhausted.</strong></li>
</ul>
<div><h2 id="commandlinearguments"><a href="https://gto76.github.io/python-cheatsheet/#commandlinearguments" name="commandlinearguments">#</a>Command Line Arguments</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> sys
scripts_path = sys.argv[<span class="hljs-number">0</span>]
arguments    = sys.argv[<span class="hljs-number">1</span>:]
</code></pre></div>

<div><h3 id="argumentparser">Argument Parser</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser, FileType
p = ArgumentParser(description=&lt;str&gt;)                             <span class="hljs-comment"># Returns a parser object.</span>
p.add_argument(<span class="hljs-string">'-&lt;short_name&gt;'</span>, <span class="hljs-string">'--&lt;name&gt;'</span>, action=<span class="hljs-string">'store_true'</span>)  <span class="hljs-comment"># Flag (defaults to False).</span>
p.add_argument(<span class="hljs-string">'-&lt;short_name&gt;'</span>, <span class="hljs-string">'--&lt;name&gt;'</span>, type=&lt;type&gt;)          <span class="hljs-comment"># Option (defaults to None).</span>
p.add_argument(<span class="hljs-string">'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span class="hljs-number">1</span>)                    <span class="hljs-comment"># Mandatory first argument.</span>
p.add_argument(<span class="hljs-string">'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span class="hljs-string">'+'</span>)                  <span class="hljs-comment"># Mandatory remaining args.</span>
p.add_argument(<span class="hljs-string">'&lt;name&gt;'</span>, type=&lt;type&gt;, nargs=<span class="hljs-string">'?/*'</span>)                <span class="hljs-comment"># Optional argument/s.</span>
args  = p.parse_args()                                            <span class="hljs-comment"># Exits on parsing error.</span>
&lt;obj&gt; = args.&lt;name&gt;                                               <span class="hljs-comment"># Returns `&lt;type&gt;(&lt;arg&gt;)`.</span>
</code></pre></div>

<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'help=&lt;str&gt;'</span></code> to set argument description that will be displayed in help message.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'default=&lt;obj&gt;'</span></code> to override None as option's or optional argument's default value.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'type=FileType(&lt;mode&gt;)'</span></code> for files. It accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<div><h2 id="open"><a href="https://gto76.github.io/python-cheatsheet/#open" name="open">#</a>Open</h2><p><strong>Opens a file and returns the corresponding file object.</strong></p><pre><code class="python language-python hljs">&lt;file&gt; = open(&lt;path&gt;, mode=<span class="hljs-string">'r'</span>, encoding=<span class="hljs-keyword">None</span>, newline=<span class="hljs-keyword">None</span>)
</code></pre></div>


<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'encoding=None'</span></code> means that the default encoding is used, which is platform dependent. Best practice is to use <code class="python hljs"><span class="hljs-string">'encoding="utf-8"'</span></code> until it becomes the default (Python 3.15).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'newline=None'</span></code> means all different end of line combinations are converted to '\n' on read, while on write all '\n' characters are converted to system's default line separator.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'newline=""'</span></code> means no conversions take place, but input is still broken into chunks by readline() and readlines() on every '\n', '\r' and '\r\n'.</strong></li>
</ul>
<div><h3 id="modes">Modes</h3><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'r'</span></code>  - Read. Used by default.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'w'</span></code>  - Write. Deletes existing contents.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'x'</span></code>  - Write or fail if the file already exists.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'a'</span></code>  - Append. Creates new file if it doesn't exist.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'w+'</span></code> - Read and write. Deletes existing contents.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'r+'</span></code> - Read and write from the start.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'a+'</span></code> - Read and write from the end.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'b'</span></code>  - Binary mode (<code class="python hljs"><span class="hljs-string">'rb'</span></code>, <code class="python hljs"><span class="hljs-string">'wb'</span></code>, <code class="python hljs"><span class="hljs-string">'xb'</span></code>, â¦).</strong></li>
</ul><div><h3 id="exceptions-1">Exceptions</h3><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'FileNotFoundError'</span></code> can be raised when reading with <code class="python hljs"><span class="hljs-string">'r'</span></code> or <code class="python hljs"><span class="hljs-string">'r+'</span></code>.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'FileExistsError'</span></code> can be raised when writing with <code class="python hljs"><span class="hljs-string">'x'</span></code>.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'IsADirectoryError'</span></code> and <code class="python hljs"><span class="hljs-string">'PermissionError'</span></code> can be raised by any.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'OSError'</span></code> is the parent class of all listed exceptions.</strong></li>
</ul><div><h3 id="fileobject">File Object</h3><pre><code class="python language-python hljs">&lt;file&gt;.seek(<span class="hljs-number">0</span>)                      <span class="hljs-comment"># Moves current position to the start of file.</span>
&lt;file&gt;.seek(offset)                 <span class="hljs-comment"># Moves 'offset' chars/bytes from the start.</span>
&lt;file&gt;.seek(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)                   <span class="hljs-comment"># Moves current position to the end of file.</span>
&lt;bin_file&gt;.seek(Â±offset, origin)    <span class="hljs-comment"># Origin: 0 start, 1 current position, 2 end.</span>
</code></pre></div></div></div>





<pre><code class="python language-python hljs">&lt;str/bytes&gt; = &lt;file&gt;.read(size=<span class="hljs-number">-1</span>)  <span class="hljs-comment"># Reads 'size' chars/bytes or until the EOF.</span>
&lt;str/bytes&gt; = &lt;file&gt;.readline()     <span class="hljs-comment"># Returns a line or empty string/bytes on EOF.</span>
&lt;list&gt;      = &lt;file&gt;.readlines()    <span class="hljs-comment"># Returns remaining lines. Also list(&lt;file&gt;).</span>
&lt;str/bytes&gt; = next(&lt;file&gt;)          <span class="hljs-comment"># Returns a line using a read-ahead buffer.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;file&gt;.write(&lt;str/bytes&gt;)           <span class="hljs-comment"># Writes a str or bytes object to write buffer.</span>
&lt;file&gt;.writelines(&lt;collection&gt;)     <span class="hljs-comment"># Writes a coll. of strings or bytes objects.</span>
&lt;file&gt;.flush()                      <span class="hljs-comment"># Flushes write buffer. Runs every 4096/8192 B.</span>
&lt;file&gt;.close()                      <span class="hljs-comment"># Closes the file after flushing write buffer.</span>
</code></pre>
<ul>
<li><strong>Methods do not add or strip trailing newlines, not even writelines().</strong></li>
</ul>
<div><h3 id="readtextfromfile">Read Text from File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> file.readlines()
</code></pre></div>

<div><h3 id="writetexttofile">Write Text to File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_to_file</span><span class="hljs-params">(filename, text)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:
        file.write(text)
</code></pre></div>

<div><h2 id="paths"><a href="https://gto76.github.io/python-cheatsheet/#paths" name="paths">#</a>Paths</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> os, glob
<span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
</code></pre></div>

<pre><code class="python language-python hljs">&lt;str&gt;  = os.getcwd()                <span class="hljs-comment"># Returns working dir. Starts as shell's $PWD.</span>
&lt;str&gt;  = os.path.join(&lt;path&gt;, ...)  <span class="hljs-comment"># Uses os.sep to join strings or Path objects.</span>
&lt;str&gt;  = os.path.realpath(&lt;path&gt;)   <span class="hljs-comment"># Resolves symlinks and calls path.abspath().</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;str&gt;  = os.path.basename(&lt;path&gt;)   <span class="hljs-comment"># Returns final component of the path.</span>
&lt;str&gt;  = os.path.dirname(&lt;path&gt;)    <span class="hljs-comment"># Returns path without the final component.</span>
&lt;tup.&gt; = os.path.splitext(&lt;path&gt;)   <span class="hljs-comment"># Splits on last period of the final component.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt; = os.listdir(path=<span class="hljs-string">'.'</span>)       <span class="hljs-comment"># Returns all filenames located at the path.</span>
&lt;list&gt; = glob.glob(<span class="hljs-string">'&lt;pattern&gt;'</span>)     <span class="hljs-comment"># Returns paths matching the wildcard pattern.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;bool&gt; = os.path.exists(&lt;path&gt;)     <span class="hljs-comment"># Checks if path exists. Also &lt;Path&gt;.exists().</span>
&lt;bool&gt; = os.path.isfile(&lt;path&gt;)     <span class="hljs-comment"># Also &lt;Path&gt;.is_file() and &lt;DirEntry&gt;.is_file().</span>
&lt;bool&gt; = os.path.isdir(&lt;path&gt;)      <span class="hljs-comment"># Also &lt;Path&gt;.is_dir() and &lt;DirEntry&gt;.is_dir().</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;stat&gt; = os.stat(&lt;path&gt;)            <span class="hljs-comment"># File's status. Also &lt;Path/DirEntry&gt;.stat().</span>
&lt;num&gt;  = &lt;stat&gt;.st_mtime/st_size/â¦  <span class="hljs-comment"># Returns modification time, size in bytes, etc.</span>
</code></pre>
<div><h3 id="direntry">DirEntry</h3><p><strong>Unlike listdir(), scandir() returns DirEntry objects that cache isfile, isdir, and on Windows also stat information, thus significantly increasing the performance of code that requires it.</strong></p><pre><code class="python language-python hljs">&lt;iter&gt; = os.scandir(path=<span class="hljs-string">'.'</span>)       <span class="hljs-comment"># Returns DirEntry objects located at the path.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.path            <span class="hljs-comment"># Is absolute if 'path' argument was absolute.</span>
&lt;str&gt;  = &lt;DirEntry&gt;.name            <span class="hljs-comment"># Returns path's final component as a string.</span>
&lt;file&gt; = open(&lt;DirEntry&gt;)           <span class="hljs-comment"># Opens the file and returns its file object.</span>
</code></pre></div>


<div><h3 id="pathobject">Path Object</h3><pre><code class="python language-python hljs">&lt;Path&gt; = Path(&lt;path&gt; [, ...])       <span class="hljs-comment"># Accepts strings, Paths, and DirEntry objects.</span>
&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    <span class="hljs-comment"># First or second path must be a Path object.</span>
&lt;Path&gt; = &lt;Path&gt;.resolve()           <span class="hljs-comment"># Returns absolute path with resolved symlinks.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;Path&gt; = Path()                     <span class="hljs-comment"># Returns current working dir. Also Path('.').</span>
&lt;Path&gt; = Path.cwd()                 <span class="hljs-comment"># Returns absolute CWD. Also Path().resolve().</span>
&lt;Path&gt; = Path.home()                <span class="hljs-comment"># Returns user's home directory (absolute).</span>
&lt;Path&gt; = Path(__file__).resolve()   <span class="hljs-comment"># Returns module's path if CWD wasn't changed.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Path&gt; = &lt;Path&gt;.parent              <span class="hljs-comment"># Returns Path without the final component.</span>
&lt;str&gt;  = &lt;Path&gt;.name                <span class="hljs-comment"># Returns path's final component as a string.</span>
&lt;str&gt;  = &lt;Path&gt;.suffix              <span class="hljs-comment"># Returns name's last extension, e.g. '.gz'.</span>
&lt;str&gt;  = &lt;Path&gt;.stem                <span class="hljs-comment"># Returns name without the last extension.</span>
&lt;tup.&gt; = &lt;Path&gt;.parts               <span class="hljs-comment"># Returns all path's components as strings.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;iter&gt; = &lt;Path&gt;.iterdir()           <span class="hljs-comment"># Returns directory contents as Path objects.</span>
&lt;iter&gt; = &lt;Path&gt;.glob(<span class="hljs-string">'&lt;pattern&gt;'</span>)   <span class="hljs-comment"># Returns Paths matching the wildcard pattern.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;str&gt;  = str(&lt;Path&gt;)                <span class="hljs-comment"># Returns path as string. Also &lt;Path&gt;.as_uri().</span>
&lt;file&gt; = open(&lt;Path&gt;)               <span class="hljs-comment"># Also &lt;Path&gt;.read_text/write_bytes(&lt;args&gt;).</span>
</code></pre>
<div><h2 id="oscommands"><a href="https://gto76.github.io/python-cheatsheet/#oscommands" name="oscommands">#</a>OS Commands</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> os, shutil, subprocess
</code></pre></div>

<pre><code class="python language-python hljs">os.chdir(&lt;path&gt;)                    <span class="hljs-comment"># Changes the current working directory (CWD).</span>
os.mkdir(&lt;path&gt;, mode=<span class="hljs-number">0o777</span>)        <span class="hljs-comment"># Creates a directory. Permissions are in octal.</span>
os.makedirs(&lt;path&gt;, mode=<span class="hljs-number">0o777</span>)     <span class="hljs-comment"># Creates all path's dirs. Also `exist_ok=False`.</span>
</code></pre>
<pre><code class="python language-python hljs">shutil.copy(from, to)               <span class="hljs-comment"># Copies the file. 'to' can exist or be a dir.</span>
shutil.copy2(from, to)              <span class="hljs-comment"># Also copies creation and modification time.</span>
shutil.copytree(from, to)           <span class="hljs-comment"># Copies the directory. 'to' must not exist.</span>
</code></pre>
<pre><code class="python language-python hljs">os.rename(from, to)                 <span class="hljs-comment"># Renames or moves the file or directory 'from'.</span>
os.replace(from, to)                <span class="hljs-comment"># Same, but overwrites file 'to' even on Windows.</span>
shutil.move(from, to)               <span class="hljs-comment"># Rename() that moves into 'to' if it's a dir.</span>
</code></pre>
<pre><code class="python language-python hljs">os.remove(&lt;path&gt;)                   <span class="hljs-comment"># Deletes the file. Or `pip3 install send2trash`.</span>
os.rmdir(&lt;path&gt;)                    <span class="hljs-comment"># Deletes the empty directory or raises OSError.</span>
shutil.rmtree(&lt;path&gt;)               <span class="hljs-comment"># Deletes the directory and all of its contents.</span>
</code></pre>
<ul>
<li><strong>Paths can be either strings, Path objects, or DirEntry objects.</strong></li>
<li><strong>Functions report OS related errors by raising OSError or one of its <a href="https://gto76.github.io/python-cheatsheet/#exceptions-1">subclasses</a>.</strong></li>
</ul>
<div><h3 id="shellcommands">Shell Commands</h3><pre><code class="python language-python hljs">&lt;pipe&gt; = os.popen(<span class="hljs-string">'&lt;commands&gt;'</span>)     <span class="hljs-comment"># Executes commands in sh/cmd. Returns combined stdout.</span>
&lt;str&gt;  = &lt;pipe&gt;.read(size=<span class="hljs-number">-1</span>)       <span class="hljs-comment"># Reads 'size' chars or until EOF. Also readline/s().</span>
&lt;int&gt;  = &lt;pipe&gt;.close()             <span class="hljs-comment"># Returns None if last command exited with returncode 0.</span>
</code></pre></div>

<div><h4 id="sends11tothebasiccalculatorandcapturesitsoutput">Sends "1 + 1" to the basic calculator and captures its output:</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>subprocess.run(<span class="hljs-string">'bc'</span>, input=<span class="hljs-string">'1 + 1\n'</span>, capture_output=<span class="hljs-keyword">True</span>, text=<span class="hljs-keyword">True</span>)
CompletedProcess(args=<span class="hljs-string">'bc'</span>, returncode=<span class="hljs-number">0</span>, stdout=<span class="hljs-string">'2\n'</span>, stderr=<span class="hljs-string">''</span>)
</code></pre></div>

<div><h4 id="sendstestintothebasiccalculatorrunninginstandardmodeandsavesitsoutputtotestout">Sends test.in to the basic calculator running in standard mode and saves its output to test.out:</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> shlex <span class="hljs-keyword">import</span> split
<span class="hljs-meta">&gt;&gt;&gt; </span>os.popen(<span class="hljs-string">'echo 1 + 1 &gt; test.in'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>subprocess.run(split(<span class="hljs-string">'bc -s'</span>), stdin=open(<span class="hljs-string">'test.in'</span>), stdout=open(<span class="hljs-string">'test.out'</span>, <span class="hljs-string">'w'</span>))
CompletedProcess(args=[<span class="hljs-string">'bc'</span>, <span class="hljs-string">'-s'</span>], returncode=<span class="hljs-number">0</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>open(<span class="hljs-string">'test.out'</span>).read()
<span class="hljs-string">'2\n'</span>
</code></pre></div>

<div><h2 id="json"><a href="https://gto76.github.io/python-cheatsheet/#json" name="json">#</a>JSON</h2><p><strong>Text file format for storing collections of strings and numbers.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> json
&lt;str&gt;  = json.dumps(&lt;list/dict&gt;)    <span class="hljs-comment"># Converts collection to JSON string.</span>
&lt;coll&gt; = json.loads(&lt;str&gt;)          <span class="hljs-comment"># Converts JSON string to collection.</span>
</code></pre></div>


<div><h3 id="readcollectionfromjsonfile">Read Collection from JSON File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_json_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> json.load(file)
</code></pre></div>

<div><h3 id="writecollectiontojsonfile">Write Collection to JSON File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_to_json_file</span><span class="hljs-params">(filename, collection)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:
        json.dump(collection, file, ensure_ascii=<span class="hljs-keyword">False</span>, indent=<span class="hljs-number">2</span>)
</code></pre></div>

<div><h2 id="pickle"><a href="https://gto76.github.io/python-cheatsheet/#pickle" name="pickle">#</a>Pickle</h2><p><strong>Binary file format for storing Python objects.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> pickle
&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   <span class="hljs-comment"># Converts object to bytes object.</span>
&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    <span class="hljs-comment"># Converts bytes object to object.</span>
</code></pre></div>


<div><h3 id="readobjectfrompicklefile">Read Object from Pickle File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_pickle_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> pickle.load(file)
</code></pre></div>

<div><h3 id="writeobjecttopicklefile">Write Object to Pickle File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_to_pickle_file</span><span class="hljs-params">(filename, an_object)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:
        pickle.dump(an_object, file)
</code></pre></div>

<div><h2 id="csv"><a href="https://gto76.github.io/python-cheatsheet/#csv" name="csv">#</a>CSV</h2><p><strong>Text file format for storing spreadsheets.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> csv
</code></pre></div>


<pre><code class="python language-python hljs">&lt;file&gt;   = open(&lt;path&gt;, newline=<span class="hljs-string">''</span>)       <span class="hljs-comment"># Opens the CSV (text) file for reading.</span>
&lt;reader&gt; = csv.reader(&lt;file&gt;)             <span class="hljs-comment"># Also: `dialect='excel', delimiter=','`.</span>
&lt;list&gt;   = next(&lt;reader&gt;)                 <span class="hljs-comment"># Returns next row as a list of strings.</span>
&lt;list&gt;   = list(&lt;reader&gt;)                 <span class="hljs-comment"># Returns a list of all remaining rows.</span>
</code></pre>
<ul>
<li><strong>Without the <code class="python hljs"><span class="hljs-string">'newline=""'</span></code> argument, every '\r\n' sequence that is embedded inside a quoted field will get converted to '\n'! For details about newline argument see <a href="https://gto76.github.io/python-cheatsheet/#open">Open</a>.</strong></li>
<li><strong>To print the spreadsheet to the console use <a href="https://gto76.github.io/python-cheatsheet/#table">Tabulate</a> or PrettyTable library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a href="https://gto76.github.io/python-cheatsheet/#fileformats">Pandas</a> library.</strong></li>
<li><strong>Reader accepts any iterator (or collection) of strings, not just files.</strong></li>
</ul>
<div><h3 id="write">Write</h3><pre><code class="python language-python hljs">&lt;file&gt;   = open(&lt;path&gt;, <span class="hljs-string">'w'</span>, newline=<span class="hljs-string">''</span>)  <span class="hljs-comment"># Opens the CSV (text) file for writing.</span>
&lt;writer&gt; = csv.writer(&lt;file&gt;)             <span class="hljs-comment"># Also: `dialect='excel', delimiter=','`.</span>
&lt;writer&gt;.writerow(&lt;collection&gt;)           <span class="hljs-comment"># Encodes each object using `str(&lt;el&gt;)`.</span>
&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)        <span class="hljs-comment"># Appends multiple rows to the file.</span>
</code></pre></div>

<ul>
<li><strong>If file is opened without the <code class="python hljs"><span class="hljs-string">'newline=""'</span></code> argument, '\r' will be added in front of every '\n' on platforms that use '\r\n' line endings (i.e., newlines may get doubled on Windows)!</strong></li>
<li><strong>Open existing file with <code class="python hljs"><span class="hljs-string">'mode="a"'</span></code> to append to it or <code class="python hljs"><span class="hljs-string">'mode="w"'</span></code> to overwrite it.</strong></li>
</ul>
<div><h3 id="parameters">Parameters</h3><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'dialect'</span></code> - Master parameter that sets the default values. String or a 'csv.Dialect' object.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'delimiter'</span></code> - A one-character string that separates fields (comma, tab, semicolon, etc.).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'lineterminator'</span></code> - How writer terminates rows. Reader looks for '\n', '\r' and '\r\n'.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'quotechar'</span></code> - Character for quoting fields containing delimiters, quotechars, '\n' or '\r'.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'escapechar'</span></code> - Character for escaping quotechars (not needed if doublequote is True).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'doublequote'</span></code> - Whether quotechars inside fields are/get doubled instead of escaped.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'quoting'</span></code> - 0: As necessary, 1: All, 2: All but numbers which are read as floats, 3: None.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'skipinitialspace'</span></code> - Is space character at the start of the field stripped by the reader.</strong></li>
</ul><div><h3 id="dialects">Dialects</h3><pre><code class="text language-text">ââââââââââââââââââââ¯âââââââââââââââ¯âââââââââââââââ¯âââââââââââââââ
â                  â     excel    â   excel-tab  â     unix     â
â âââââââââââââââââââ¼âââââââââââââââ¼âââââââââââââââ¼âââââââââââââââ¨
â delimiter        â       ','    â      '\t'    â       ','    â
â lineterminator   â    '\r\n'    â    '\r\n'    â      '\n'    â
â quotechar        â       '"'    â       '"'    â       '"'    â
â escapechar       â      None    â      None    â      None    â
â doublequote      â      True    â      True    â      True    â
â quoting          â         0    â         0    â         1    â
â skipinitialspace â     False    â     False    â     False    â
ââââââââââââââââââââ·âââââââââââââââ·âââââââââââââââ·âââââââââââââââ
</code></pre></div></div>



<div><h3 id="readrowsfromcsvfile">Read Rows from CSV File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_csv_file</span><span class="hljs-params">(filename, **csv_params)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, encoding=<span class="hljs-string">'utf-8'</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> list(csv.reader(file, **csv_params))
</code></pre></div>

<div><h3 id="writerowstocsvfile">Write Rows to CSV File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_to_csv_file</span><span class="hljs-params">(filename, rows, mode=<span class="hljs-string">'w'</span>, **csv_params)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, mode, encoding=<span class="hljs-string">'utf-8'</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> file:
        writer = csv.writer(file, **csv_params)
        writer.writerows(rows)
</code></pre></div>

<div><h2 id="sqlite"><a href="https://gto76.github.io/python-cheatsheet/#sqlite" name="sqlite">#</a>SQLite</h2><p><strong>A server-less database engine that stores each database into its own file.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> sqlite3
&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)               <span class="hljs-comment"># Opens existing or new file. Also ':memory:'.</span>
&lt;conn&gt;.close()                                 <span class="hljs-comment"># Closes connection. Discards uncommitted data.</span>
</code></pre></div>


<div><h3 id="read">Read</h3><pre><code class="python language-python hljs">&lt;cursor&gt; = &lt;conn&gt;.execute(<span class="hljs-string">'&lt;query&gt;'</span>)           <span class="hljs-comment"># Can raise a subclass of sqlite3.Error.</span>
&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                 <span class="hljs-comment"># Returns the next row. Also next(&lt;cursor&gt;).</span>
&lt;list&gt;   = &lt;cursor&gt;.fetchall()                 <span class="hljs-comment"># Returns remaining rows. Also list(&lt;cursor&gt;).</span>
</code></pre></div>

<div><h3 id="write-1">Write</h3><pre><code class="python language-python hljs">&lt;conn&gt;.execute(<span class="hljs-string">'&lt;query&gt;'</span>)                      <span class="hljs-comment"># Can raise a subclass of sqlite3.Error.</span>
&lt;conn&gt;.commit()                                <span class="hljs-comment"># Saves all changes since the last commit.</span>
&lt;conn&gt;.rollback()                              <span class="hljs-comment"># Discards all changes since the last commit.</span>
</code></pre></div>

<div><h4 id="or">Or:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">with</span> &lt;conn&gt;:                                   <span class="hljs-comment"># Exits the block with commit() or rollback(),</span>
    &lt;conn&gt;.execute(<span class="hljs-string">'&lt;query&gt;'</span>)                  <span class="hljs-comment"># depending on whether any exception occurred.</span>
</code></pre></div>

<div><h3 id="placeholders">Placeholders</h3><pre><code class="python language-python hljs">&lt;conn&gt;.execute(<span class="hljs-string">'&lt;query&gt;'</span>, &lt;list/tuple&gt;)        <span class="hljs-comment"># Replaces every question mark with an item.</span>
&lt;conn&gt;.execute(<span class="hljs-string">'&lt;query&gt;'</span>, &lt;dict/namedtuple&gt;)   <span class="hljs-comment"># Replaces every :&lt;key&gt; with a matching value.</span>
&lt;conn&gt;.executemany(<span class="hljs-string">'&lt;query&gt;'</span>, &lt;coll_of_coll&gt;)  <span class="hljs-comment"># Runs execute() once for each collection.</span>
</code></pre></div>

<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None, or bool (stored as 1 or 0).</strong></li>
<li><strong>SQLite does not restrict columns to any type unless table is declared as strict.</strong></li>
</ul>
<div><h3 id="example-1">Example</h3><p><strong>Values are not actually saved in this example because <code class="python hljs"><span class="hljs-string">'conn.commit()'</span></code> is omitted!</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>conn = sqlite3.connect(<span class="hljs-string">'test.db'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>conn.execute(<span class="hljs-string">'CREATE TABLE person (name TEXT, height INTEGER) STRICT'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>conn.execute(<span class="hljs-string">'INSERT INTO person VALUES (?, ?)'</span>, (<span class="hljs-string">'Jean-Luc'</span>, <span class="hljs-number">187</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>conn.execute(<span class="hljs-string">'SELECT rowid, * FROM person'</span>).fetchall()
[(<span class="hljs-number">1</span>, <span class="hljs-string">'Jean-Luc'</span>, <span class="hljs-number">187</span>)]
</code></pre></div>


<div><h3 id="sqlalchemy">SQLAlchemy</h3><p><strong>Library for interacting with various DB systems via SQL, method chaining, or ORM.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install sqlalchemy</span>
<span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine, text
&lt;engine&gt; = create_engine(<span class="hljs-string">'&lt;url&gt;'</span>)              <span class="hljs-comment"># Url: 'dialect://user:password@host/dbname'.</span>
&lt;conn&gt;   = &lt;engine&gt;.connect()                  <span class="hljs-comment"># Creates a connection. Also &lt;conn&gt;.close().</span>
&lt;cursor&gt; = &lt;conn&gt;.execute(text(<span class="hljs-string">'&lt;query&gt;'</span>), â¦)  <span class="hljs-comment"># `&lt;dict&gt;`. Replaces every :&lt;key&gt; with value.</span>
<span class="hljs-keyword">with</span> &lt;conn&gt;.begin(): ...                       <span class="hljs-comment"># Exits the block with commit or rollback.</span>
</code></pre></div>


<pre><code class="text language-text">âââââââââââââââââââ¯âââââââââââââââ¯âââââââââââââââââââââââââââââââââââ
â Dialect         â pip3 install â           Dependencies           â
â ââââââââââââââââââ¼âââââââââââââââ¼âââââââââââââââââââââââââââââââââââ¨
â mysql           â mysqlclient  â www.pypi.org/project/mysqlclient â
â postgresql      â psycopg2     â www.pypi.org/project/psycopg2    â
â mssql           â pyodbc       â www.pypi.org/project/pyodbc      â
â oracle+oracledb â oracledb     â www.pypi.org/project/oracledb    â
âââââââââââââââââââ·âââââââââââââââ·âââââââââââââââââââââââââââââââââââ
</code></pre>
<div><h2 id="bytes"><a href="https://gto76.github.io/python-cheatsheet/#bytes" name="bytes">#</a>Bytes</h2><p><strong>A bytes object is an immutable sequence of single bytes. Mutable version is called bytearray.</strong></p><pre><code class="python language-python hljs">&lt;bytes&gt; = <span class="hljs-string">b'&lt;str&gt;'</span>                       <span class="hljs-comment"># Only accepts ASCII characters and \x00-\xff.</span>
&lt;int&gt;   = &lt;bytes&gt;[index]                 <span class="hljs-comment"># Returns an integer in range from 0 to 255.</span>
&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]               <span class="hljs-comment"># Returns bytes even if it has only one element.</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)  <span class="hljs-comment"># Joins elements by using bytes as a separator.</span>
</code></pre></div>


<div><h3 id="encode-1">Encode</h3><pre><code class="python language-python hljs">&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)          <span class="hljs-comment"># Integers must be in range from 0 to 255.</span>
&lt;bytes&gt; = bytes(&lt;str&gt;, <span class="hljs-string">'utf-8'</span>)          <span class="hljs-comment"># Encodes the string. Also &lt;str&gt;.encode().</span>
&lt;bytes&gt; = bytes.fromhex(<span class="hljs-string">'&lt;hex&gt;'</span>)         <span class="hljs-comment"># Hex pairs can be separated by whitespaces.</span>
&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, â¦)     <span class="hljs-comment"># `byteorder='big/little', signed=False`.</span>
</code></pre></div>

<div><h3 id="decode-1">Decode</h3><pre><code class="python language-python hljs">&lt;list&gt;  = list(&lt;bytes&gt;)                  <span class="hljs-comment"># Returns integers in range from 0 to 255.</span>
&lt;str&gt;   = str(&lt;bytes&gt;, <span class="hljs-string">'utf-8'</span>)          <span class="hljs-comment"># Returns a string. Also &lt;bytes&gt;.decode().</span>
&lt;str&gt;   = &lt;bytes&gt;.hex()                  <span class="hljs-comment"># Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span>
&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, â¦)     <span class="hljs-comment"># `byteorder='big/little', signed=False`.</span>
</code></pre></div>

<div><h3 id="readbytesfromfile">Read Bytes from File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_bytes</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'rb'</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> file.read()
</code></pre></div>

<div><h3 id="writebytestofile">Write Bytes to File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_bytes</span><span class="hljs-params">(filename, bytes_obj)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:
        file.write(bytes_obj)
</code></pre></div>

<div><h2 id="struct"><a href="https://gto76.github.io/python-cheatsheet/#struct" name="struct">#</a>Struct</h2><ul>
<li><strong>Module that performs conversions between a sequence of numbers and a bytes object.</strong></li>
<li><strong>Systemâs type sizes, byte order, and alignment rules are used by default.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack, unpack

&lt;bytes&gt; = pack(<span class="hljs-string">'&lt;format&gt;'</span>, &lt;el_1&gt; [, ...])  <span class="hljs-comment"># Packs numbers according to format string.</span>
&lt;tuple&gt; = unpack(<span class="hljs-string">'&lt;format&gt;'</span>, &lt;bytes&gt;)       <span class="hljs-comment"># Use iter_unpack() to get iterator of tuples.</span>
</code></pre></div>


<pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>pack(<span class="hljs-string">'&gt;hhl'</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
<span class="hljs-string">b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>unpack(<span class="hljs-string">'&gt;hhl'</span>, <span class="hljs-string">b'\x00\x01\x00\x02\x00\x00\x00\x03'</span>)
(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)
</code></pre>
<h3 id="format-2">Format</h3><div><h4 id="forstandardtypesizesandmanualalignmentpaddingstartformatstringwith">For standard type sizes and manual alignment (padding) start format string with:</h4><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'='</span></code> - System's byte order (usually little-endian).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'&lt;'</span></code> - Little-endian (i.e. least significant byte first).</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'&gt;'</span></code> - Big-endian (also <code class="python hljs"><span class="hljs-string">'!'</span></code>).</strong></li>
</ul><div><h4 id="besidesnumberspackandunpackalsosupportbytesobjectsasapartofthesequence">Besides numbers, pack() and unpack() also support bytes objects as a part of the sequence:</h4><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'c'</span></code> - A bytes object with a single element. For pad byte use <code class="python hljs"><span class="hljs-string">'x'</span></code>.</strong></li>
<li><strong><code class="apache hljs"><span class="hljs-section">'&lt;n&gt;s'</span><span class="hljs-attribute"></span></code> - A bytes object with n elements (not effected by byte order).</strong></li>
</ul></div></div><div><div><h4 id="integertypesuseacapitalletterforunsignedtypeminimumandstandardsizesareinbrackets">Integer types. Use a capital letter for unsigned type. Minimum and standard sizes are in brackets:</h4><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'b'</span></code> - char (1/1)</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'h'</span></code> - short (2/2)</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'i'</span></code> - int (2/4)</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'l'</span></code> - long (4/4)</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'q'</span></code> - long long (8/8)</strong></li>
</ul></div><div><h4 id="floatingpointtypesstructalwaysusesstandardsizes">Floating point types (struct always uses standard sizes):</h4><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'f'</span></code> - float (4/4)</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'d'</span></code> - double (8/8)</strong></li>
</ul></div></div>








<div><h2 id="array"><a href="https://gto76.github.io/python-cheatsheet/#array" name="array">#</a>Array</h2><p><strong>List that can only hold numbers of a predefined type. Available types and their minimum sizes in bytes are listed above. Type sizes and byte order are always determined by the system, however bytes of each element can be reversed (by calling the byteswap() method).</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> array <span class="hljs-keyword">import</span> array
</code></pre></div>


<pre><code class="python language-python hljs">&lt;array&gt; = array(<span class="hljs-string">'&lt;typecode&gt;'</span>, &lt;coll_of_nums&gt;)  <span class="hljs-comment"># Creates an array from collection of numbers.</span>
&lt;array&gt; = array(<span class="hljs-string">'&lt;typecode&gt;'</span>, &lt;bytes&gt;)         <span class="hljs-comment"># Writes passed bytes to the array's memory.</span>
&lt;array&gt; = array(<span class="hljs-string">'&lt;typecode&gt;'</span>, &lt;array&gt;)         <span class="hljs-comment"># Treats passed array as a sequence of numbers.</span>
&lt;array&gt;.fromfile(&lt;file&gt;, n_items)              <span class="hljs-comment"># Appends file contents to the array's memory.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;bytes&gt; = bytes(&lt;array&gt;)                       <span class="hljs-comment"># Returns a copy of array's memory as bytes.</span>
&lt;file&gt;.write(&lt;array&gt;)                          <span class="hljs-comment"># Writes array's memory to the binary file.</span>
</code></pre>
<div><h2 id="memoryview"><a href="https://gto76.github.io/python-cheatsheet/#memoryview" name="memoryview">#</a>Memory View</h2><p><strong>A sequence object that points to the memory of another bytes-like object. Each element can reference a single or multiple consecutive bytes, depending on format. Order and number of elements can be changed with slicing.</strong></p><pre><code class="python language-python hljs">&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  <span class="hljs-comment"># Immutable if bytes is passed, else mutable.</span>
&lt;obj&gt;   = &lt;mview&gt;[index]                       <span class="hljs-comment"># Returns ints/floats. Bytes if format is 'c'.</span>
&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     <span class="hljs-comment"># Returns memoryview with rearranged elements.</span>
&lt;mview&gt; = &lt;mview&gt;.cast(<span class="hljs-string">'&lt;typecode&gt;'</span>)           <span class="hljs-comment"># Only works between B/b/c and other types.</span>
&lt;mview&gt;.release()                              <span class="hljs-comment"># Releases memory buffer of the base object.</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;bytes&gt; = bytes(&lt;mview&gt;)                       <span class="hljs-comment"># Returns a new bytes object. Also bytearray().</span>
&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       <span class="hljs-comment"># Joins memoryviews using bytes as a separator.</span>
&lt;array&gt; = array(<span class="hljs-string">'&lt;typecode&gt;'</span>, &lt;mview&gt;)         <span class="hljs-comment"># Treats memoryview as a sequence of numbers.</span>
&lt;file&gt;.write(&lt;mview&gt;)                          <span class="hljs-comment"># Writes `bytes(&lt;mview&gt;)` to the binary file.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;list&gt;  = list(&lt;mview&gt;)                        <span class="hljs-comment"># Returns a list of ints, floats or bytes.</span>
&lt;str&gt;   = str(&lt;mview&gt;, <span class="hljs-string">'utf-8'</span>)                <span class="hljs-comment"># Treats passed memoryview as a bytes object.</span>
&lt;str&gt;   = &lt;mview&gt;.hex()                        <span class="hljs-comment"># Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span>
</code></pre>
<div><h2 id="deque"><a href="https://gto76.github.io/python-cheatsheet/#deque" name="deque">#</a>Deque</h2><p><strong>List with efficient appends and pops from either side.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque
</code></pre></div>


<pre><code class="python language-python hljs">&lt;deque&gt; = deque(&lt;collection&gt;)                  <span class="hljs-comment"># Use `maxlen=&lt;int&gt;` to set size limit.</span>
&lt;deque&gt;.appendleft(&lt;el&gt;)                       <span class="hljs-comment"># Opposite element is dropped if full.</span>
&lt;deque&gt;.extendleft(&lt;collection&gt;)               <span class="hljs-comment"># Prepends reversed coll. to the deque.</span>
&lt;deque&gt;.rotate(n=<span class="hljs-number">1</span>)                            <span class="hljs-comment"># Last element becomes the first one.</span>
&lt;el&gt; = &lt;deque&gt;.popleft()                       <span class="hljs-comment"># Raises IndexError if deque is empty.</span>
</code></pre>
<div><h2 id="operator"><a href="https://gto76.github.io/python-cheatsheet/#operator" name="operator">#</a>Operator</h2><p><strong>Module of functions that provide the functionality of operators. Functions are grouped by operator precedence, from least to most binding. Functions and operators in first, third and fifth line are also ordered by precedence within a group.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> operator <span class="hljs-keyword">as</span> op
</code></pre></div>


<pre><code class="python language-python hljs">&lt;bool&gt; = op.not_(&lt;obj&gt;)                                        <span class="hljs-comment"># or, and, not (or/and missing)</span>
&lt;bool&gt; = op.eq/ne/lt/ge/is_/is_not/contains(&lt;obj&gt;, &lt;obj&gt;)      <span class="hljs-comment"># ==, !=, &lt;, &gt;=, is, is not, in</span>
&lt;obj&gt;  = op.or_/xor/and_(&lt;int/set&gt;, &lt;int/set&gt;)                 <span class="hljs-comment"># |, ^, &amp; (sorted by precedence)</span>
&lt;int&gt;  = op.lshift/rshift(&lt;int&gt;, &lt;int&gt;)                        <span class="hljs-comment"># &lt;&lt;, &gt;&gt; (i.e. &lt;int&gt; &lt;&lt; n_bits)</span>
&lt;obj&gt;  = op.add/sub/mul/truediv/floordiv/mod(&lt;obj&gt;, &lt;obj&gt;)     <span class="hljs-comment"># +, -, *, /, //, % (two groups)</span>
&lt;num&gt;  = op.neg/invert(&lt;num&gt;)                                  <span class="hljs-comment"># -, ~ (negate and bitwise not)</span>
&lt;num&gt;  = op.pow(&lt;num&gt;, &lt;num&gt;)                                  <span class="hljs-comment"># ** (pow() accepts 3 arguments)</span>
&lt;func&gt; = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt; [, ...])  <span class="hljs-comment"># [index/key], .name, .name([â¦])</span>
</code></pre>
<pre><code class="python language-python hljs">elementwise_sum  = map(op.add, list_a, list_b)
sorted_by_second = sorted(&lt;coll&gt;, key=op.itemgetter(<span class="hljs-number">1</span>))
sorted_by_both   = sorted(&lt;coll&gt;, key=op.itemgetter(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>))
first_element    = op.methodcaller(<span class="hljs-string">'pop'</span>, <span class="hljs-number">0</span>)(&lt;list&gt;)
</code></pre>
<ul>
<li><strong>Most operators call the object's special method that is named after them (second object is passed as an argument), while logical operators call their own code that relies on bool().</strong></li>
<li><strong>Comparisons can be chained: <code class="python hljs"><span class="hljs-string">'x &lt; y &lt; z'</span></code> gets converted to <code class="python hljs"><span class="hljs-string">'(x &lt; y) and (y &lt; z)</span></code>'.</strong></li>
</ul>
<div><h2 id="matchstatement"><a href="https://gto76.github.io/python-cheatsheet/#matchstatement" name="matchstatement">#</a>Match Statement</h2><p><strong>Executes the first block with matching pattern.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">match</span> &lt;object/expression&gt;:
    <span class="hljs-keyword">case</span> &lt;pattern&gt; [<span class="hljs-keyword">if</span> &lt;condition&gt;]:
        &lt;code&gt;
    ...
</code></pre></div>


<div><h3 id="patterns">Patterns</h3><pre><code class="python language-python hljs">&lt;value_pattern&gt; = <span class="hljs-number">1</span>/<span class="hljs-string">'abc'</span>/<span class="hljs-keyword">True</span>/<span class="hljs-keyword">None</span>/math.pi        <span class="hljs-comment"># Matches the literal or a dotted name.</span>
&lt;class_pattern&gt; = &lt;type&gt;()                         <span class="hljs-comment"># Matches any object of that type (or ABC).</span>
&lt;wildcard_patt&gt; = _                                <span class="hljs-comment"># Matches any object. Useful in last case.</span>
&lt;capture_patt&gt;  = &lt;name&gt;                           <span class="hljs-comment"># Matches any object and binds it to name.</span>
&lt;as_pattern&gt;    = &lt;pattern&gt; <span class="hljs-keyword">as</span> &lt;name&gt;              <span class="hljs-comment"># Binds match to name. Also &lt;type&gt;(&lt;name&gt;).</span>
&lt;or_pattern&gt;    = &lt;pattern&gt; | &lt;pattern&gt; [| ...]    <span class="hljs-comment"># Matches if any of listed patterns match.</span>
&lt;sequence_patt&gt; = [&lt;pattern&gt;, ...]                 <span class="hljs-comment"># Matches a sequence. All items must match.</span>
&lt;mapping_patt&gt;  = {&lt;value_pattern&gt;: &lt;patt&gt;, ...}   <span class="hljs-comment"># Matches a dict that has matching items.</span>
&lt;class_pattern&gt; = &lt;type&gt;(&lt;attr_name&gt;=&lt;patt&gt;, ...)  <span class="hljs-comment"># Matches an object if attributes match.</span>
</code></pre></div>

<ul>
<li><strong>Sequence pattern can also be written as a tuple, either with or without the brackets.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'*&lt;name&gt;'</span></code> and <code class="python hljs"><span class="hljs-string">'**&lt;name&gt;'</span></code> in sequence/mapping patterns to bind remaining items.</strong></li>
<li><strong>Sequence pattern must match all items of the collection, while mapping pattern does not.</strong></li>
<li><strong>Patterns can be surrounded with brackets to override their precedence: <code class="python hljs"><span class="hljs-string">'|'</span></code> &gt; <code class="python hljs"><span class="hljs-string">'as'</span></code> &gt; <code class="python hljs"><span class="hljs-string">','</span></code>. For example, <code class="python hljs"><span class="hljs-string">'[1, 2]'</span></code> is matched by the <code class="python hljs"><span class="hljs-string">'case 1|2, 2|3 as x if x == 2:'</span></code> block.</strong></li>
<li><strong>All names that are bound in the matching case, as well as variables initialized in its body, are visible after the match statement (only function block delimits scope).</strong></li>
</ul>
<div><h3 id="example-2">Example</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> pathlib <span class="hljs-keyword">import</span> Path
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">match</span> Path(<span class="hljs-string">'/home/gto/python-cheatsheet/README.md'</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">case</span> Path(
<span class="hljs-meta">... </span>        parts=[<span class="hljs-string">'/'</span>, <span class="hljs-string">'home'</span>, user, *_]
<span class="hljs-meta">... </span>    ) <span class="hljs-keyword">as</span> p <span class="hljs-keyword">if</span> p.name.lower().startswith(<span class="hljs-string">'readme'</span>) <span class="hljs-keyword">and</span> p.is_file():
<span class="hljs-meta">... </span>        print(<span class="hljs-string">f'<span class="hljs-subst">{p.name}</span> is a readme file that belongs to user <span class="hljs-subst">{user}</span>.'</span>)
README.md is a readme file that belongs to user gto.
</code></pre></div>

<div><h2 id="logging"><a href="https://gto76.github.io/python-cheatsheet/#logging" name="logging">#</a>Logging</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> logging <span class="hljs-keyword">as</span> log
</code></pre></div>

<pre><code class="python language-python hljs">log.basicConfig(filename=&lt;path&gt;, level=<span class="hljs-string">'DEBUG'</span>)   <span class="hljs-comment"># Configures the root logger (see Setup).</span>
log.debug/info/warning/error/critical(&lt;str&gt;)      <span class="hljs-comment"># Sends passed message to the root logger.</span>
&lt;Logger&gt; = log.getLogger(__name__)                <span class="hljs-comment"># Returns a logger named after the module.</span>
&lt;Logger&gt;.&lt;level&gt;(&lt;str&gt;)                           <span class="hljs-comment"># Sends the message. Same levels as above.</span>
&lt;Logger&gt;.exception(&lt;str&gt;)                         <span class="hljs-comment"># Error() that appends caught exception.</span>
</code></pre>
<div><h3 id="setup">Setup</h3><pre><code class="python language-python hljs">log.basicConfig(
    filename=<span class="hljs-keyword">None</span>,                                <span class="hljs-comment"># Logs to stderr or appends to file.</span>
    format=<span class="hljs-string">'%(levelname)s:%(name)s:%(message)s'</span>,  <span class="hljs-comment"># Add '%(asctime)s' for local datetime.</span>
    level=log.WARNING,                            <span class="hljs-comment"># Drops messages with lower priority.</span>
    handlers=[log.StreamHandler(sys.stderr)]      <span class="hljs-comment"># Uses FileHandler if filename is set.</span>
)
</code></pre></div>

<pre><code class="python language-python hljs">&lt;Formatter&gt; = log.Formatter(<span class="hljs-string">'&lt;format&gt;'</span>)           <span class="hljs-comment"># Formats messages according to format str.</span>
&lt;Handler&gt; = log.FileHandler(&lt;path&gt;, mode=<span class="hljs-string">'a'</span>)     <span class="hljs-comment"># Appends to file. Also `encoding=None`.</span>
&lt;Handler&gt;.setFormatter(&lt;Formatter&gt;)               <span class="hljs-comment"># Only outputs bare messages by default.</span>
&lt;Handler&gt;.setLevel(&lt;int/str&gt;)                     <span class="hljs-comment"># Prints or saves every message by default.</span>
&lt;Logger&gt;.addHandler(&lt;Handler&gt;)                    <span class="hljs-comment"># Logger can have more than one handler.</span>
&lt;Logger&gt;.setLevel(&lt;int/str&gt;)                      <span class="hljs-comment"># What is sent to its/ancestors' handlers.</span>
&lt;Logger&gt;.propagate = &lt;bool&gt;                       <span class="hljs-comment"># Cuts off ancestors' handlers if False.</span>
</code></pre>
<ul>
<li><strong>Parent logger can be specified by naming the child logger <code class="python hljs"><span class="hljs-string">'&lt;parent&gt;.&lt;name&gt;'</span></code>.</strong></li>
<li><strong>If logger doesn't have a set level, it inherits it from the first ancestor that does.</strong></li>
<li><strong>Formatter also accepts: pathname, filename, funcName, lineno, thread and process.</strong></li>
<li><strong>RotatingFileHandler creates and deletes files based on 'maxBytes', 'backupCount' args.</strong></li>
<li><strong>An object with <code class="python hljs"><span class="hljs-string">'filter(&lt;LogRecord&gt;)'</span></code> method (or the method itself) can be added to loggers and handlers via addFilter(). Message is dropped if filter() returns a false value.</strong></li>
</ul>
<div><h4 id="createsaloggerthatwritesallmessagestoafileandsendsthemtotherootshandlerthatprintswarningsorhigher">Creates a logger that writes all messages to a file and sends them to the root's handler that prints warnings or higher:</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>logger = log.getLogger(<span class="hljs-string">'my_module'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>handler = log.FileHandler(<span class="hljs-string">'test.log'</span>, encoding=<span class="hljs-string">'utf-8'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>handler.setFormatter(log.Formatter(<span class="hljs-string">'%(asctime)s %(levelname)s:%(name)s:%(message)s'</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>logger.addHandler(handler)
<span class="hljs-meta">&gt;&gt;&gt; </span>logger.setLevel(<span class="hljs-string">'DEBUG'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>log.basicConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span>log.root.handlers[<span class="hljs-number">0</span>].setLevel(<span class="hljs-string">'WARNING'</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>logger.critical(<span class="hljs-string">'Running out of disk space.'</span>)
CRITICAL:my_module:Running out of disk space.
<span class="hljs-meta">&gt;&gt;&gt; </span>print(open(<span class="hljs-string">'test.log'</span>).read())
2023-02-07 23:21:01,430 CRITICAL:my_module:Running out of disk space.
</code></pre></div>

<div><h2 id="introspection"><a href="https://gto76.github.io/python-cheatsheet/#introspection" name="introspection">#</a>Introspection</h2><pre><code class="python language-python hljs">&lt;list&gt; = dir()                      <span class="hljs-comment"># Local names of variables, functions, classes and modules.</span>
&lt;dict&gt; = vars()                     <span class="hljs-comment"># Dict of local names and their objects. Same as locals().</span>
&lt;dict&gt; = globals()                  <span class="hljs-comment"># Dict of global names and their objects, e.g. __builtin__.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;list&gt; = dir(&lt;obj&gt;)                 <span class="hljs-comment"># Returns names of object's attributes (including methods).</span>
&lt;dict&gt; = vars(&lt;obj&gt;)                <span class="hljs-comment"># Returns dict of writable attributes. Also &lt;obj&gt;.__dict__.</span>
&lt;bool&gt; = hasattr(&lt;obj&gt;, <span class="hljs-string">'&lt;name&gt;'</span>)   <span class="hljs-comment"># Checks if object possesses attribute with passed name.</span>
value  = getattr(&lt;obj&gt;, <span class="hljs-string">'&lt;name&gt;'</span>)   <span class="hljs-comment"># Returns the object's attribute or raises AttributeError.</span>
setattr(&lt;obj&gt;, <span class="hljs-string">'&lt;name&gt;'</span>, value)     <span class="hljs-comment"># Sets attribute. Only works on objects with __dict__ attr.</span>
delattr(&lt;obj&gt;, <span class="hljs-string">'&lt;name&gt;'</span>)            <span class="hljs-comment"># Deletes attribute from __dict__. Also `del &lt;obj&gt;.&lt;name&gt;`.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Sig&gt;  = inspect.signature(&lt;func&gt;)  <span class="hljs-comment"># Returns Signature object of the passed function or class.</span>
&lt;dict&gt; = &lt;Sig&gt;.parameters           <span class="hljs-comment"># Returns dict of Parameters. Also &lt;Sig&gt;.return_annotation.</span>
&lt;memb&gt; = &lt;Param&gt;.kind               <span class="hljs-comment"># Returns ParameterKind member (Parameter.KEYWORD_ONLY, â¦).</span>
&lt;type&gt; = &lt;Param&gt;.annotation         <span class="hljs-comment"># Returns Parameter.empty if missing. Also &lt;Param&gt;.default.</span>
</code></pre>
<div><h2 id="threading"><a href="https://gto76.github.io/python-cheatsheet/#threading" name="threading">#</a>Threading</h2><p><strong>CPython interpreter can only run a single thread at a time. Using multiple threads won't result in a faster execution, unless at least one of the threads contains an I/O operation.</strong></p><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread, Lock, RLock, Semaphore, Event, Barrier
<span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, as_completed
</code></pre></div>


<div><h3 id="thread">Thread</h3><pre><code class="python language-python hljs">&lt;Thread&gt; = Thread(target=&lt;function&gt;)           <span class="hljs-comment"># Use `args=&lt;collection&gt;` to set the arguments.</span>
&lt;Thread&gt;.start()                               <span class="hljs-comment"># Starts the thread. Also &lt;Thread&gt;.is_alive().</span>
&lt;Thread&gt;.join()                                <span class="hljs-comment"># Waits for the thread to finish executing.</span>
</code></pre></div>

<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'kwargs=&lt;dict&gt;'</span></code> to pass keyword arguments to the function.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'daemon=True'</span></code>, or the program won't be able to exit while the thread is alive.</strong></li>
</ul>
<div><h3 id="lock">Lock</h3><pre><code class="python language-python hljs">&lt;lock&gt; = Lock/RLock()                          <span class="hljs-comment"># RLock can only be released by acquirer thread.</span>
&lt;lock&gt;.acquire()                               <span class="hljs-comment"># Blocks (waits) until lock becomes available.</span>
&lt;lock&gt;.release()                               <span class="hljs-comment"># Releases the lock so it can be acquired again.</span>
</code></pre></div>

<div><h4 id="or-1">Or:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">with</span> &lt;lock&gt;:                                   <span class="hljs-comment"># Enters the block by calling method acquire().</span>
    ...                                        <span class="hljs-comment"># Exits it by calling release(), even on error.</span>
</code></pre></div>

<div><h3 id="semaphoreeventbarrier">Semaphore, Event, Barrier</h3><pre><code class="python language-python hljs">&lt;Semaphore&gt; = Semaphore(value=<span class="hljs-number">1</span>)               <span class="hljs-comment"># Lock that can be acquired by 'value' threads.</span>
&lt;Event&gt;     = Event()                          <span class="hljs-comment"># Method wait() blocks until set() is called.</span>
&lt;Barrier&gt;   = Barrier(&lt;int&gt;)                   <span class="hljs-comment"># Wait() blocks until it's called int times.</span>
</code></pre></div>

<div><h3 id="queue">Queue</h3><pre><code class="python language-python hljs">&lt;Queue&gt; = queue.Queue(maxsize=<span class="hljs-number">0</span>)               <span class="hljs-comment"># A first-in-first-out queue. It's thread safe.</span>
&lt;Queue&gt;.put(&lt;obj&gt;)                             <span class="hljs-comment"># Call blocks until queue stops being full.</span>
&lt;Queue&gt;.put_nowait(&lt;obj&gt;)                      <span class="hljs-comment"># Raises queue.Full exception if queue is full.</span>
&lt;obj&gt; = &lt;Queue&gt;.get()                          <span class="hljs-comment"># Call blocks until queue stops being empty.</span>
&lt;obj&gt; = &lt;Queue&gt;.get_nowait()                   <span class="hljs-comment"># Raises queue.Empty exception if it's empty.</span>
</code></pre></div>

<div><h3 id="threadpoolexecutor">Thread Pool Executor</h3><pre><code class="python language-python hljs">&lt;Exec&gt; = ThreadPoolExecutor(max_workers=<span class="hljs-keyword">None</span>)  <span class="hljs-comment"># Also `with ThreadPoolExecutor() as &lt;name&gt;: â¦`.</span>
&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     <span class="hljs-comment"># Multithreaded and non-lazy map(). Keeps order.</span>
&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   <span class="hljs-comment"># Creates a thread and returns its Future obj.</span>
&lt;Exec&gt;.shutdown()                              <span class="hljs-comment"># Waits for all threads to finish executing.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;bool&gt; = &lt;Future&gt;.done()                       <span class="hljs-comment"># Checks if the thread has finished executing.</span>
&lt;obj&gt;  = &lt;Future&gt;.result(timeout=<span class="hljs-keyword">None</span>)         <span class="hljs-comment"># Raises TimeoutError after 'timeout' seconds.</span>
&lt;bool&gt; = &lt;Future&gt;.cancel()                     <span class="hljs-comment"># Cancels or returns False if running/finished.</span>
&lt;iter&gt; = as_completed(&lt;coll_of_Futures&gt;)       <span class="hljs-comment"># `next(&lt;iter&gt;)` returns next completed Future.</span>
</code></pre>
<ul>
<li><strong>Map() and as_completed() also accept 'timeout'. It causes futures.TimeoutError when next() is called/blocking. Map() times from original call and as_completed() from first call to next(). As_completed() fails if next() is called too late, even if all threads are done.</strong></li>
<li><strong>Exceptions that happen inside threads are raised when map iterator's next() or Future's result() are called. Future's exception() method returns an exception object or None.</strong></li>
<li><strong>ProcessPoolExecutor provides true parallelism but: everything sent to/from workers must be <a href="https://gto76.github.io/python-cheatsheet/#pickle">pickable</a>, queues must be sent using executor's 'initargs' and 'initializer' parameters, and executor should only be reachable via <code class="python hljs"><span class="hljs-string">'if __name__ == "__main__": ...'</span></code>.</strong></li>
</ul>
<div><h2 id="coroutines"><a href="https://gto76.github.io/python-cheatsheet/#coroutines" name="coroutines">#</a>Coroutines</h2><ul>
<li><strong>Coroutines have a lot in common with threads, but unlike threads, they only give up control when they call another coroutine and they donât consume as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code class="python hljs"><span class="hljs-string">'async'</span></code> keyword and its call with <code class="python hljs"><span class="hljs-string">'await'</span></code>.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'asyncio.run(&lt;coroutine&gt;)'</span></code> to start the first/main coroutine.</strong></li>
</ul><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> asyncio <span class="hljs-keyword">as</span> aio
</code></pre></div>


<pre><code class="python language-python hljs">&lt;coro&gt; = &lt;async_function&gt;(&lt;args&gt;)          <span class="hljs-comment"># Creates a coroutine by calling async def function.</span>
&lt;obj&gt;  = <span class="hljs-keyword">await</span> &lt;coroutine&gt;                 <span class="hljs-comment"># Starts the coroutine. Returns its result or None.</span>
&lt;task&gt; = aio.create_task(&lt;coroutine&gt;)      <span class="hljs-comment"># Schedules it for execution. Always keep the task.</span>
&lt;obj&gt;  = <span class="hljs-keyword">await</span> &lt;task&gt;                      <span class="hljs-comment"># Returns coroutine's result. Also &lt;task&gt;.cancel().</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;coro&gt; = aio.gather(&lt;coro/task&gt;, ...)      <span class="hljs-comment"># Schedules coros. Returns list of results on await.</span>
&lt;coro&gt; = aio.wait(&lt;tasks&gt;, return_when=â¦)  <span class="hljs-comment"># `'ALL/FIRST_COMPLETED'`. Returns (done, pending).</span>
&lt;iter&gt; = aio.as_completed(&lt;coros/tasks&gt;)   <span class="hljs-comment"># Iter of coros that return next result on await.</span>
</code></pre>
<div><h4 id="runsaterminalgamewhereyoucontrolanasteriskthatmustavoidnumbers">Runs a terminal game where you control an asterisk that must avoid numbers:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> asyncio, collections, curses, curses.textpad, enum, random

P = collections.namedtuple(<span class="hljs-string">'P'</span>, <span class="hljs-string">'x y'</span>)     <span class="hljs-comment"># Position (x and y coordinates).</span>
D = enum.Enum(<span class="hljs-string">'D'</span>, <span class="hljs-string">'n e s w'</span>)              <span class="hljs-comment"># Direction (north, east, etc.).</span>
W, H = <span class="hljs-number">15</span>, <span class="hljs-number">7</span>                               <span class="hljs-comment"># Width and height of the field.</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(screen)</span>:</span>
    curses.curs_set(<span class="hljs-number">0</span>)                     <span class="hljs-comment"># Makes the cursor invisible.</span>
    screen.nodelay(<span class="hljs-keyword">True</span>)                   <span class="hljs-comment"># Makes getch() non-blocking.</span>
    asyncio.run(main_coroutine(screen))    <span class="hljs-comment"># Starts running asyncio code.</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main_coroutine</span><span class="hljs-params">(screen)</span>:</span>
    moves = asyncio.Queue()
    state = {<span class="hljs-string">'*'</span>: P(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)} | {id_: P(W//<span class="hljs-number">2</span>, H//<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> id_ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)}
    ai    = [random_controller(id_, moves) <span class="hljs-keyword">for</span> id_ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)]
    mvc   = [controller(screen, moves), model(moves, state), view(state, screen)]
    tasks = [asyncio.create_task(coro) <span class="hljs-keyword">for</span> coro <span class="hljs-keyword">in</span> ai + mvc]
    <span class="hljs-keyword">await</span> asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">random_controller</span><span class="hljs-params">(id_, moves)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        d = random.choice(list(D))
        moves.put_nowait((id_, d))
        <span class="hljs-keyword">await</span> asyncio.sleep(random.triangular(<span class="hljs-number">0.01</span>, <span class="hljs-number">0.65</span>))

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">controller</span><span class="hljs-params">(screen, moves)</span>:</span>
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        key_mappings = {<span class="hljs-number">258</span>: D.s, <span class="hljs-number">259</span>: D.n, <span class="hljs-number">260</span>: D.w, <span class="hljs-number">261</span>: D.e}
        <span class="hljs-keyword">if</span> d := key_mappings.get(screen.getch()):
            moves.put_nowait((<span class="hljs-string">'*'</span>, d))
        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.005</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">model</span><span class="hljs-params">(moves, state)</span>:</span>
    <span class="hljs-keyword">while</span> state[<span class="hljs-string">'*'</span>] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (state[id_] <span class="hljs-keyword">for</span> id_ <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>)):
        id_, d = <span class="hljs-keyword">await</span> moves.get()
        deltas = {D.n: P(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>), D.e: P(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), D.s: P(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), D.w: P(<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>)}
        state[id_] = P((state[id_].x + deltas[d].x) % W, (state[id_].y + deltas[d].y) % H)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view</span><span class="hljs-params">(state, screen)</span>:</span>
    offset = P(curses.COLS//<span class="hljs-number">2</span> - W//<span class="hljs-number">2</span>, curses.LINES//<span class="hljs-number">2</span> - H//<span class="hljs-number">2</span>)
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
        screen.erase()
        curses.textpad.rectangle(screen, offset.y-<span class="hljs-number">1</span>, offset.x-<span class="hljs-number">1</span>, offset.y+H, offset.x+W)
        <span class="hljs-keyword">for</span> id_, p <span class="hljs-keyword">in</span> state.items():
            screen.addstr(offset.y + (p.y - state[<span class="hljs-string">'*'</span>].y + H//<span class="hljs-number">2</span>) % H,
                          offset.x + (p.x - state[<span class="hljs-string">'*'</span>].x + W//<span class="hljs-number">2</span>) % W, str(id_))
        screen.refresh()
        <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">0.005</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    curses.wrapper(main)
</code></pre></div>

<p><br></p>
<div><h1 id="libraries">Libraries</h1><div><h2 id="progressbar"><a href="https://gto76.github.io/python-cheatsheet/#progressbar" name="progressbar">#</a>Progress Bar</h2><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install tqdm</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tqdm, time
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> el <span class="hljs-keyword">in</span> tqdm.tqdm([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], desc=<span class="hljs-string">'Processing'</span>):
<span class="hljs-meta">... </span>    time.sleep(<span class="hljs-number">1</span>)
Processing: 100%|ââââââââââââââââââââ| 3/3 [00:03&lt;00:00,  1.00s/it]
</code></pre></div></div>


<div><h2 id="plot"><a href="https://gto76.github.io/python-cheatsheet/#plot" name="plot">#</a>Plot</h2><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install matplotlib</span>
<span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

plt.plot/bar/scatter(x_data, y_data [, label=&lt;str&gt;])  <span class="hljs-comment"># Also plt.plot(y_data).</span>
plt.legend()                                          <span class="hljs-comment"># Adds a legend of labels.</span>
plt.title/xlabel/ylabel(&lt;str&gt;)                        <span class="hljs-comment"># Adds title or axis label.</span>
plt.show()                                            <span class="hljs-comment"># Also plt.savefig(&lt;path&gt;).</span>
plt.clf()                                             <span class="hljs-comment"># Clears the plot (figure).</span>
</code></pre></div>

<div><h2 id="table"><a href="https://gto76.github.io/python-cheatsheet/#table" name="table">#</a>Table</h2><div><h4 id="printsacsvspreadsheettotheconsole">Prints a CSV spreadsheet to the console:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install tabulate</span>
<span class="hljs-keyword">import</span> csv, tabulate
<span class="hljs-keyword">with</span> open(<span class="hljs-string">'test.csv'</span>, encoding=<span class="hljs-string">'utf-8'</span>, newline=<span class="hljs-string">''</span>) <span class="hljs-keyword">as</span> file:
    rows = list(csv.reader(file))
print(tabulate.tabulate(rows, headers=<span class="hljs-string">'firstrow'</span>))
</code></pre></div></div>


<div><h2 id="consoleapp"><a href="https://gto76.github.io/python-cheatsheet/#consoleapp" name="consoleapp">#</a>Console App</h2><div><h4 id="runsabasicfileexplorerintheconsole">Runs a basic file explorer in the console:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install windows-curses</span>
<span class="hljs-keyword">import</span> curses, os
<span class="hljs-keyword">from</span> curses <span class="hljs-keyword">import</span> A_REVERSE, KEY_UP, KEY_DOWN, KEY_LEFT, KEY_RIGHT

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">(screen)</span>:</span>
    ch, first, selected, paths = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, os.listdir()
    <span class="hljs-keyword">while</span> ch != ord(<span class="hljs-string">'q'</span>):
        height, width = screen.getmaxyx()
        screen.erase()
        <span class="hljs-keyword">for</span> y, filename <span class="hljs-keyword">in</span> enumerate(paths[first : first+height]):
            color = A_REVERSE <span class="hljs-keyword">if</span> filename == paths[selected] <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>
            screen.addnstr(y, <span class="hljs-number">0</span>, filename, width-<span class="hljs-number">1</span>, color)
        ch = screen.getch()
        selected -= (ch == KEY_UP) <span class="hljs-keyword">and</span> (selected &gt; <span class="hljs-number">0</span>)
        selected += (ch == KEY_DOWN) <span class="hljs-keyword">and</span> (selected &lt; len(paths)-<span class="hljs-number">1</span>)
        first -= (first &gt; selected)
        first += (first &lt; selected-(height-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">if</span> ch <span class="hljs-keyword">in</span> [KEY_LEFT, KEY_RIGHT, ord(<span class="hljs-string">'\n'</span>)]:
            new_dir = <span class="hljs-string">'..'</span> <span class="hljs-keyword">if</span> ch == KEY_LEFT <span class="hljs-keyword">else</span> paths[selected]
            <span class="hljs-keyword">if</span> os.path.isdir(new_dir):
                os.chdir(new_dir)
                first, selected, paths = <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, os.listdir()

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    curses.wrapper(main)
</code></pre></div></div>


<div><h2 id="guiapp"><a href="https://gto76.github.io/python-cheatsheet/#guiapp" name="guiapp">#</a>GUI App</h2><div><h4 id="runsadesktopappforconvertingweightsfrommetricunitsintopounds">Runs a desktop app for converting weights from metric units into pounds:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install PySimpleGUI</span>
<span class="hljs-keyword">import</span> PySimpleGUI <span class="hljs-keyword">as</span> sg

text_box = sg.Input(default_text=<span class="hljs-string">'100'</span>, enable_events=<span class="hljs-keyword">True</span>, key=<span class="hljs-string">'QUANTITY'</span>)
dropdown = sg.InputCombo([<span class="hljs-string">'g'</span>, <span class="hljs-string">'kg'</span>, <span class="hljs-string">'t'</span>], <span class="hljs-string">'kg'</span>, readonly=<span class="hljs-keyword">True</span>, enable_events=<span class="hljs-keyword">True</span>, k=<span class="hljs-string">'UNIT'</span>)
label    = sg.Text(<span class="hljs-string">'100 kg is 220.462 lbs.'</span>, key=<span class="hljs-string">'OUTPUT'</span>)
window   = sg.Window(<span class="hljs-string">'Weight Converter'</span>, [[text_box, dropdown], [label], [sg.Button(<span class="hljs-string">'Close'</span>)]])

<span class="hljs-keyword">while</span> <span class="hljs-keyword">True</span>:
    event, values = window.read()
    <span class="hljs-keyword">if</span> event <span class="hljs-keyword">in</span> [sg.WIN_CLOSED, <span class="hljs-string">'Close'</span>]:
        <span class="hljs-keyword">break</span>
    <span class="hljs-keyword">try</span>:
        quantity = float(values[<span class="hljs-string">'QUANTITY'</span>])
    <span class="hljs-keyword">except</span> ValueError:
        <span class="hljs-keyword">continue</span>
    unit = values[<span class="hljs-string">'UNIT'</span>]
    lbs = quantity * {<span class="hljs-string">'g'</span>: <span class="hljs-number">0.001</span>, <span class="hljs-string">'kg'</span>: <span class="hljs-number">1</span>, <span class="hljs-string">'t'</span>: <span class="hljs-number">1000</span>}[unit] / <span class="hljs-number">0.45359237</span>
    window[<span class="hljs-string">'OUTPUT'</span>].update(value=<span class="hljs-string">f'<span class="hljs-subst">{quantity}</span> <span class="hljs-subst">{unit}</span> is <span class="hljs-subst">{lbs:g}</span> lbs.'</span>)
window.close()
</code></pre></div></div>


<div><h2 id="scraping"><a href="https://gto76.github.io/python-cheatsheet/#scraping" name="scraping">#</a>Scraping</h2><div><h4 id="scrapespythonsurlandlogofromitswikipediapage">Scrapes Python's URL and logo from its Wikipedia page:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install requests beautifulsoup4</span>
<span class="hljs-keyword">import</span> requests, bs4, os

get = <span class="hljs-keyword">lambda</span> url: requests.get(url, headers={<span class="hljs-string">'User-Agent'</span>: <span class="hljs-string">'cpc-bot'</span>})
response = get(<span class="hljs-string">'https://en.wikipedia.org/wiki/Python_(programming_language)'</span>)
document = bs4.BeautifulSoup(response.text, <span class="hljs-string">'html.parser'</span>)
table = document.find(<span class="hljs-string">'table'</span>, class_=<span class="hljs-string">'infobox vevent'</span>)
python_url = table.find(<span class="hljs-string">'th'</span>, text=<span class="hljs-string">'Website'</span>).next_sibling.a[<span class="hljs-string">'href'</span>]
logo_url = table.find(<span class="hljs-string">'img'</span>)[<span class="hljs-string">'src'</span>]
filename = os.path.basename(logo_url)
<span class="hljs-keyword">with</span> open(filename, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:
    file.write(get(<span class="hljs-string">f'https:<span class="hljs-subst">{logo_url}</span>'</span>).content)
print(<span class="hljs-string">f'URL: <span class="hljs-subst">{python_url}</span>, logo: file://<span class="hljs-subst">{os.path.abspath(filename)}</span>'</span>)
</code></pre></div></div>


<div><h3 id="selenium">Selenium</h3><p><strong>Library for scraping websites with dynamic content.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install selenium</span>
<span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver
</code></pre></div>


<pre><code class="python language-python hljs">&lt;Drv&gt; = webdriver.Chrome/Firefox/Safari/Edge()  <span class="hljs-comment"># Opens the browser. Also &lt;Driver&gt;.quit().</span>
&lt;Drv&gt;.implicitly_wait(seconds)                  <span class="hljs-comment"># Sets timeout for find_element/s() methods.</span>
&lt;Drv&gt;.get(<span class="hljs-string">'&lt;url&gt;'</span>)                              <span class="hljs-comment"># Blocks until browser fires the load event.</span>
&lt;str&gt; = &lt;Drv&gt;.page_source                       <span class="hljs-comment"># Returns HTML of the page's current state.</span>
&lt;El&gt;  = &lt;Drv/El&gt;.find_element(<span class="hljs-string">'xpath'</span>, &lt;str&gt;)   <span class="hljs-comment"># Accepts '//&lt;tag&gt;[@&lt;attr_name&gt;="&lt;val&gt;"]â¦'.</span>
&lt;str&gt; = &lt;El&gt;.get_attribute(<span class="hljs-string">'&lt;name&gt;'</span>)            <span class="hljs-comment"># Returns attribute or property if exists.</span>
&lt;El&gt;.click/clear()                              <span class="hljs-comment"># Also &lt;El&gt;.text and &lt;El&gt;.send_keys(&lt;str&gt;).</span>
</code></pre>
<div><h4 id="xpathalsoavailableinlxmlscrapyandbrowsersconsoleviadxxpath">XPath â also available in lxml, Scrapy, and browser's console via <code class="python hljs"><span class="hljs-string">'$x("&lt;xpath&gt;")'</span></code>:</h4><pre><code class="python language-python hljs">&lt;xpath&gt;     = //&lt;element&gt;[/ <span class="hljs-keyword">or</span> // &lt;element&gt;]    <span class="hljs-comment"># E.g. â¦/child, â¦//descendant, â¦/../sibling.</span>
&lt;xpath&gt;     = //&lt;element&gt;/following::&lt;element&gt;  <span class="hljs-comment"># Next element. Also preceding::, parent::.</span>
&lt;element&gt;   = &lt;tag&gt;&lt;conditions&gt;&lt;index&gt;          <span class="hljs-comment"># Tag accepts */a/â¦. Use [1/2/â¦] for index.</span>
&lt;condition&gt; = [&lt;sub_cond&gt; [<span class="hljs-keyword">and</span>/<span class="hljs-keyword">or</span> &lt;sub_cond&gt;]]  <span class="hljs-comment"># Use not(&lt;sub_cond&gt;) to negate condition.</span>
&lt;sub_cond&gt;  = @&lt;attr&gt;[=<span class="hljs-string">"&lt;val&gt;"</span>]                 <span class="hljs-comment"># `text()=` and `.=` match (complete) text.</span>
&lt;sub_cond&gt;  = contains(@&lt;attr&gt;, <span class="hljs-string">"&lt;val&gt;"</span>)        <span class="hljs-comment"># Is &lt;val&gt; a substring of attribute's value?</span>
&lt;sub_cond&gt;  = [//]&lt;element&gt;                     <span class="hljs-comment"># Has matching child? Descendant if //&lt;el&gt;.</span>
</code></pre></div>

<div><h2 id="webapp"><a href="https://gto76.github.io/python-cheatsheet/#webapp" name="webapp">#</a>Web App</h2><p><strong>Flask is a micro web framework/server. If you just want to open a html file in a web browser use <code class="python hljs"><span class="hljs-string">'webbrowser.open(&lt;path&gt;)'</span></code> instead.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install flask</span>
<span class="hljs-keyword">import</span> flask <span class="hljs-keyword">as</span> fl
</code></pre></div>


<pre><code class="python language-python hljs">app = fl.Flask(__name__)                   <span class="hljs-comment"># Returns the app object. Put at the top.</span>
app.run(host=<span class="hljs-keyword">None</span>, port=<span class="hljs-keyword">None</span>, debug=<span class="hljs-keyword">None</span>)  <span class="hljs-comment"># Or: $ flask --app FILE run [--ARG[=VAL]]â¦</span>
</code></pre>
<ul>
<li><strong>Starts the app at <code class="python hljs"><span class="hljs-string">'http://localhost:5000'</span></code>. Use <code class="python hljs"><span class="hljs-string">'host="0.0.0.0"'</span></code> to run externally.</strong></li>
<li><strong>Install a WSGI server like <a href="https://flask.palletsprojects.com/en/latest/deploying/waitress/">Waitress</a> and a HTTP server such as <a href="https://flask.palletsprojects.com/en/latest/deploying/nginx/">Nginx</a> for better security.</strong></li>
<li><strong>Debug mode restarts the app whenever script changes and displays errors in the browser.</strong></li>
</ul>
<div><h3 id="servingfiles">Serving Files</h3><pre><code class="python language-python hljs"><span class="hljs-meta">@app.route('/img/&lt;path:filename&gt;')</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serve_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">return</span> fl.send_from_directory(<span class="hljs-string">'DIRNAME'</span>, filename)
</code></pre></div>

<div><h3 id="servinghtml">Serving HTML</h3><pre><code class="python language-python hljs"><span class="hljs-meta">@app.route('/&lt;sport&gt;')</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serve_html</span><span class="hljs-params">(sport)</span>:</span>
    <span class="hljs-keyword">return</span> fl.render_template_string(<span class="hljs-string">'&lt;h1&gt;{{title}}&lt;/h1&gt;'</span>, title=sport)
</code></pre></div>

<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'fl.render_template(filename, &lt;kwargs&gt;)'</span></code> renders a file located in 'templates' dir.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'fl.abort(&lt;int&gt;)'</span></code> returns error code and <code class="python hljs"><span class="hljs-string">'return fl.redirect(&lt;url&gt;)'</span></code> redirects.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'fl.request.args[&lt;str&gt;]'</span></code> returns parameter from query string (URL part right of '?').</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'fl.session[&lt;str&gt;] = &lt;obj&gt;'</span></code> stores session data. It requires secret key to be set at the startup with <code class="python hljs"><span class="hljs-string">'app.secret_key = &lt;str&gt;'</span></code>.</strong></li>
</ul>
<div><h3 id="servingjson">Serving JSON</h3><pre><code class="python language-python hljs"><span class="hljs-meta">@app.post('/&lt;sport&gt;/odds')</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serve_json</span><span class="hljs-params">(sport)</span>:</span>
    team = fl.request.form[<span class="hljs-string">'team'</span>]
    <span class="hljs-keyword">return</span> {<span class="hljs-string">'team'</span>: team, <span class="hljs-string">'odds'</span>: [<span class="hljs-number">2.09</span>, <span class="hljs-number">3.74</span>, <span class="hljs-number">3.68</span>]}
</code></pre></div>

<div><h4 id="startstheappinitsownthreadandqueriesitsrestapi">Starts the app in its own thread and queries its REST API:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install requests</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> threading, requests
<span class="hljs-meta">&gt;&gt;&gt; </span>threading.Thread(target=app.run, daemon=<span class="hljs-keyword">True</span>).start()
<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">'http://localhost:5000/football/odds'</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>response = requests.post(url, data={<span class="hljs-string">'team'</span>: <span class="hljs-string">'arsenal f.c.'</span>})
<span class="hljs-meta">&gt;&gt;&gt; </span>response.json()
{<span class="hljs-string">'team'</span>: <span class="hljs-string">'arsenal f.c.'</span>, <span class="hljs-string">'odds'</span>: [<span class="hljs-number">2.09</span>, <span class="hljs-number">3.74</span>, <span class="hljs-number">3.68</span>]}
</code></pre></div>

<div><h2 id="profiling"><a href="https://gto76.github.io/python-cheatsheet/#profiling" name="profiling">#</a>Profiling</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> perf_counter
start_time = perf_counter()
...
duration_in_seconds = perf_counter() - start_time
</code></pre></div>

<div><h3 id="timingasnippet">Timing a Snippet</h3><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> timeit <span class="hljs-keyword">import</span> timeit
<span class="hljs-meta">&gt;&gt;&gt; </span>timeit(<span class="hljs-string">'list(range(10000))'</span>, number=<span class="hljs-number">1000</span>, globals=globals(), setup=<span class="hljs-string">'pass'</span>)
<span class="hljs-number">0.19373</span>
</code></pre></div>

<div><h3 id="profilingbyline">Profiling by Line</h3><pre><code class="text language-text">$ pip3 install line_profiler
$ echo '@profile
def main():
    a = list(range(10000))
    b = set(range(10000))
main()' &gt; test.py
$ kernprof -lv test.py
Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           @profile
     2                                           def main():
     3         1        253.4    253.4     32.2      a = list(range(10000))
     4         1        534.1    534.1     67.8      b = set(range(10000))
</code></pre></div>

<div><h3 id="callandflamegraphs">Call and Flame Graphs</h3><pre><code class="bash language-bash hljs">$ apt/brew install graphviz &amp;&amp; pip3 install gprof2dot snakeviz  <span class="hljs-comment"># Or download installer.</span>
$ tail --lines=+2 test.py &gt; test.py                             <span class="hljs-comment"># Removes first line.</span>
$ python3 -m cProfile -o test.prof test.py                      <span class="hljs-comment"># Runs built-in profiler.</span>
$ gprof2dot --format=pstats test.prof | dot -T png -o test.png  <span class="hljs-comment"># Generates call graph.</span>
$ xdg-open/open test.png                                        <span class="hljs-comment"># Displays call graph.</span>
$ snakeviz test.prof                                            <span class="hljs-comment"># Displays flame graph.</span>
</code></pre></div>

<div><h3 id="samplingandmemoryprofilers">Sampling and Memory Profilers</h3><pre><code class="text language-text">ââââââââââââââââ¯âââââââââââââ¯ââââââââââââââââââââââââââââââââ¯ââââââââ¯âââââââ
â pip3 install â   Target   â          How to run           â Lines â Live â
â âââââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââââââ¼ââââââââ¼âââââââ¨
â pyinstrument â    CPU     â pyinstrument test.py          â   Ã   â  Ã   â
â py-spy       â    CPU     â py-spy top -- python3 test.py â   Ã   â  â   â
â scalene      â CPU+Memory â scalene test.py               â   â   â  Ã   â
â memray       â   Memory   â memray run --live test.py     â   â   â  â   â
ââââââââââââââââ·âââââââââââââ·ââââââââââââââââââââââââââââââââ·ââââââââ·âââââââ
</code></pre></div>

<div><h2 id="numpy"><a href="https://gto76.github.io/python-cheatsheet/#numpy" name="numpy">#</a>NumPy</h2><p><strong>Array manipulation mini-language. It can run up to one hundred times faster than the equivalent Python code. An even faster alternative that runs on a GPU is called CuPy.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install numpy</span>
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
</code></pre></div>


<pre><code class="python language-python hljs">&lt;array&gt; = np.array(&lt;list/list_of_lists/â¦&gt;)              <span class="hljs-comment"># Returns a 1d/2d/â¦ NumPy array.</span>
&lt;array&gt; = np.zeros/ones/empty(&lt;shape&gt;)                  <span class="hljs-comment"># Also np.full(&lt;shape&gt;, &lt;el&gt;).</span>
&lt;array&gt; = np.arange(from_inc, to_exc, Â±step)            <span class="hljs-comment"># Also np.linspace(start, stop, len).</span>
&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  <span class="hljs-comment"># Also np.random.random(&lt;shape&gt;).</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      <span class="hljs-comment"># Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span>
&lt;array&gt; = &lt;array&gt;.flatten()                             <span class="hljs-comment"># Also `&lt;view&gt; = &lt;array&gt;.ravel()`.</span>
&lt;view&gt;  = &lt;array&gt;.transpose()                           <span class="hljs-comment"># Flips the table over its diagonal.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;array&gt; = np.copy/abs/sqrt/log/int64(&lt;array&gt;)           <span class="hljs-comment"># Returns new array of the same shape.</span>
&lt;array&gt; = &lt;array&gt;.sum/max/mean/argmax/all(axis)         <span class="hljs-comment"># Aggregates specified dimension.</span>
&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    <span class="hljs-comment"># Func can return a scalar or array.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;array&gt; = np.concatenate(&lt;list_of_arrays&gt;, axis=<span class="hljs-number">0</span>)      <span class="hljs-comment"># Links arrays along first axis (rows).</span>
&lt;array&gt; = np.vstack/column_stack(&lt;list_of_arrays&gt;)      <span class="hljs-comment"># Treats 1d arrays as rows or columns.</span>
&lt;array&gt; = np.tile/repeat(&lt;array&gt;, &lt;int/list&gt; [, axis])  <span class="hljs-comment"># Tiles array or repeats its elements.</span>
</code></pre>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of a dimension. Leftmost dimension has index 0. Summing the RGB image along axis 2 will return a greyscale image with shape (50, 100).</strong></li>
</ul>
<div><h3 id="indexing">Indexing</h3><pre><code class="bash hljs">&lt;el&gt;       = &lt;2d&gt;[row_index, col_index]                 <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int&gt;, &lt;int&gt;, &lt;int&gt;]</span>
&lt;1d_view&gt;  = &lt;2d&gt;[row_index]                            <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int&gt;, &lt;int&gt;, &lt;slice&gt;]</span>
&lt;1d_view&gt;  = &lt;2d&gt;[:, col_index]                         <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int&gt;, &lt;slice&gt;, &lt;int&gt;]</span>
&lt;2d_view&gt;  = &lt;2d&gt;[from:to_row_i, from:to_col_i]         <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int&gt;, &lt;slice&gt;, &lt;slice&gt;]</span>
</code></pre></div>

<pre><code class="bash hljs">&lt;1d_array&gt; = &lt;2d&gt;[row_indices, col_indices]             <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int/1d&gt;, &lt;1d&gt;, &lt;1d&gt;]</span>
&lt;2d_array&gt; = &lt;2d&gt;[row_indices]                          <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int/1d&gt;, &lt;1d&gt;, &lt;slice&gt;]</span>
&lt;2d_array&gt; = &lt;2d&gt;[:, col_indices]                       <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int/1d&gt;, &lt;slice&gt;, &lt;1d&gt;]</span>
&lt;2d_array&gt; = &lt;2d&gt;[np.ix_(row_indices, col_indices)]     <span class="hljs-comment"># Or: &lt;3d&gt;[&lt;int/1d/2d&gt;, &lt;2d&gt;, &lt;2d&gt;]</span>
</code></pre>
<pre><code class="bash hljs">&lt;2d_bools&gt; = &lt;2d&gt; &gt; &lt;el/1d/2d&gt;                          <span class="hljs-comment"># 1d object must have size of a row.</span>
&lt;1/2d_arr&gt; = &lt;2d&gt;[&lt;2d/1d_bools&gt;]                        <span class="hljs-comment"># 1d_bools must have size of a column.</span>
</code></pre>
<ul>
<li><strong><code class="python hljs"><span class="hljs-string">':'</span></code> returns a slice of all dimension's indices. Omitted dimensions default to <code class="python hljs"><span class="hljs-string">':'</span></code>.</strong></li>
<li><strong>Python converts <code class="python hljs"><span class="hljs-string">'obj[i, j]'</span></code> to <code class="python hljs"><span class="hljs-string">'obj[(i, j)]'</span></code>. This makes <code class="python hljs"><span class="hljs-string">'&lt;2d&gt;[row_i, col_i]'</span></code> and <code class="python hljs"><span class="hljs-string">'&lt;2d&gt;[row_indices]'</span></code> indistinguishable to NumPy if tuple of two indices is passed!</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'ix_([1, 2], [3, 4])'</span></code> returns <code class="python hljs"><span class="hljs-string">'[[1], [2]]'</span></code> and <code class="python hljs"><span class="hljs-string">'[[3, 4]]'</span></code>. Due to broadcasting rules, this is the same as using <code class="python hljs"><span class="hljs-string">'[[1, 1], [2, 2]]'</span></code> and <code class="python hljs"><span class="hljs-string">'[[3, 4], [3, 4]]'</span></code>.</strong></li>
<li><strong>Any value that is broadcastable to the indexed shape can be assigned to the selection.</strong></li>
</ul>
<div><h3 id="broadcasting">Broadcasting</h3><p><strong>A set of rules by which NumPy functions operate on arrays of different shapes.</strong></p><pre><code class="python language-python hljs">left  = np.array([<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.8</span>])                     <span class="hljs-comment"># `left.shape  == (3,)`</span>
right = np.array([[<span class="hljs-number">0.1</span>], [<span class="hljs-number">0.6</span>], [<span class="hljs-number">0.8</span>]])                 <span class="hljs-comment"># `right.shape == (3, 1)`</span>
</code></pre></div>


<div><h4 id="1ifarrayshapesdifferinlengthleftpadtheshortershapewithones">1. If array shapes differ in length, left-pad the shorter shape with ones:</h4><pre><code class="python language-python hljs">left  = np.array([[<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.8</span>]])                   <span class="hljs-comment"># `left.shape  == (1, 3)`</span>
right = np.array([[<span class="hljs-number">0.1</span>], [<span class="hljs-number">0.6</span>], [<span class="hljs-number">0.8</span>]])                 <span class="hljs-comment"># `right.shape == (3, 1)`</span>
</code></pre></div>

<div><h4 id="2ifanydimensionsdifferinsizeexpandtheonesthathavesize1byduplicatingtheirelements">2. If any dimensions differ in size, expand the ones that have size 1 by duplicating their elements:</h4><pre><code class="python language-python hljs">left  = np.array([[<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.8</span>],                    <span class="hljs-comment"># `left.shape  == (3, 3)`</span>
                  [<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.8</span>],
                  [<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.8</span>]])

right = np.array([[<span class="hljs-number">0.1</span>,  <span class="hljs-number">0.1</span>,  <span class="hljs-number">0.1</span>],                    <span class="hljs-comment"># `right.shape == (3, 3)`</span>
                  [<span class="hljs-number">0.6</span>,  <span class="hljs-number">0.6</span>,  <span class="hljs-number">0.6</span>],
                  [<span class="hljs-number">0.8</span>,  <span class="hljs-number">0.8</span>,  <span class="hljs-number">0.8</span>]])
</code></pre></div>

<div><h3 id="example-3">Example</h3><div><h4 id="foreachpointreturnsindexofitsnearestpoint010608121">For each point returns index of its nearest point (<code class="python hljs">[<span class="hljs-number">0.1</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.8</span>] =&gt; [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]</code>):</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>print(points := np.array([<span class="hljs-number">0.1</span>, <span class="hljs-number">0.6</span>, <span class="hljs-number">0.8</span>]))
[<span class="hljs-number">0.1</span>  <span class="hljs-number">0.6</span>  <span class="hljs-number">0.8</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>print(wrapped_points := points.reshape(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>))
[[<span class="hljs-number">0.1</span>]
 [<span class="hljs-number">0.6</span>]
 [<span class="hljs-number">0.8</span>]]
<span class="hljs-meta">&gt;&gt;&gt; </span>print(deltas := points - wrapped_points)
[[ <span class="hljs-number">0.</span>   <span class="hljs-number">0.5</span>  <span class="hljs-number">0.7</span>]
 [<span class="hljs-number">-0.5</span>  <span class="hljs-number">0.</span>   <span class="hljs-number">0.2</span>]
 [<span class="hljs-number">-0.7</span> <span class="hljs-number">-0.2</span>  <span class="hljs-number">0.</span> ]]
<span class="hljs-meta">&gt;&gt;&gt; </span>deltas[range(<span class="hljs-number">3</span>), range(<span class="hljs-number">3</span>)] = np.inf
<span class="hljs-meta">&gt;&gt;&gt; </span>print(distances := np.abs(deltas))
[[inf  <span class="hljs-number">0.5</span>  <span class="hljs-number">0.7</span>]
 [<span class="hljs-number">0.5</span>  inf  <span class="hljs-number">0.2</span>]
 [<span class="hljs-number">0.7</span>  <span class="hljs-number">0.2</span>  inf]]
<span class="hljs-meta">&gt;&gt;&gt; </span>print(distances.argmin(axis=<span class="hljs-number">1</span>))
[<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">1</span>]
</code></pre></div></div>


<div><h2 id="image"><a href="https://gto76.github.io/python-cheatsheet/#image" name="image">#</a>Image</h2><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install pillow</span>
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
</code></pre></div>

<pre><code class="python language-python hljs">&lt;Image&gt; = Image.new(<span class="hljs-string">'&lt;mode&gt;'</span>, (width, height))  <span class="hljs-comment"># Creates new image. Also `color=&lt;int/tuple&gt;`.</span>
&lt;Image&gt; = Image.open(&lt;path&gt;)                    <span class="hljs-comment"># Identifies format based on file's contents.</span>
&lt;Image&gt; = &lt;Image&gt;.convert(<span class="hljs-string">'&lt;mode&gt;'</span>)             <span class="hljs-comment"># Converts image to the new mode (see Modes).</span>
&lt;Image&gt;.save(&lt;path&gt;)                            <span class="hljs-comment"># Accepts `quality=&lt;int&gt;` if extension is jpg.</span>
&lt;Image&gt;.show()                                  <span class="hljs-comment"># Displays image in default preview app.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;int/tup&gt; = &lt;Image&gt;.getpixel((x, y))            <span class="hljs-comment"># Returns pixel's value (its color).</span>
&lt;ImgCore&gt; = &lt;Image&gt;.getdata()                   <span class="hljs-comment"># Returns a flattened view of pixel values.</span>
&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)           <span class="hljs-comment"># Updates pixel's value. Clips passed int/s.</span>
&lt;Image&gt;.putdata(&lt;list/ImgCore&gt;)                 <span class="hljs-comment"># Updates pixels with a copy of the sequence.</span>
&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                  <span class="hljs-comment"># Draws passed image at the specified location.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Image&gt; = &lt;Image&gt;.filter(&lt;Filter&gt;)              <span class="hljs-comment"># Use ImageFilter.&lt;name&gt;(&lt;args&gt;) for Filter.</span>
&lt;Image&gt; = &lt;Enhance&gt;.enhance(&lt;float&gt;)            <span class="hljs-comment"># Use ImageEnhance.&lt;name&gt;(&lt;Image&gt;) for Enhance.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;array&gt; = np.array(&lt;Image&gt;)                     <span class="hljs-comment"># Creates a 2d/3d NumPy array from the image.</span>
&lt;Image&gt; = Image.fromarray(np.uint8(&lt;array&gt;))    <span class="hljs-comment"># Use &lt;array&gt;.clip(0, 255) to clip the values.</span>
</code></pre>
<div><h3 id="modes-1">Modes</h3><ul>
<li><strong><code class="python hljs"><span class="hljs-string">'L'</span></code> - Lightness (greyscale image). Each pixel is an integer between 0 and 255.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'RGB'</span></code> - Red, green, blue (true color image). Each pixel is a tuple of three integers.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'RGBA'</span></code> - RGB with alpha. Low alpha (i.e. fourth int) makes pixel more transparent.</strong></li>
<li><strong><code class="python hljs"><span class="hljs-string">'HSV'</span></code> - Hue, saturation, value. Three ints representing color in HSV color space.</strong></li>
</ul><div><h3 id="examples">Examples</h3><div><h4 id="createsapngimageofarainbowgradient">Creates a PNG image of a rainbow gradient:</h4><pre><code class="python language-python hljs">WIDTH, HEIGHT = <span class="hljs-number">100</span>, <span class="hljs-number">100</span>
n_pixels = WIDTH * HEIGHT
hues = (<span class="hljs-number">255</span> * i/n_pixels <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n_pixels))
img = Image.new(<span class="hljs-string">'HSV'</span>, (WIDTH, HEIGHT))
img.putdata([(int(h), <span class="hljs-number">255</span>, <span class="hljs-number">255</span>) <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> hues])
img.convert(<span class="hljs-string">'RGB'</span>).save(<span class="hljs-string">'test.png'</span>)
</code></pre></div></div></div>




<div><h4 id="addsnoisetothepngimageanddisplaysit">Adds noise to the PNG image and displays it:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint
add_noise = <span class="hljs-keyword">lambda</span> value: max(<span class="hljs-number">0</span>, min(<span class="hljs-number">255</span>, value + randint(<span class="hljs-number">-20</span>, <span class="hljs-number">20</span>)))
img = Image.open(<span class="hljs-string">'test.png'</span>).convert(<span class="hljs-string">'HSV'</span>)
img.putdata([(add_noise(h), s, v) <span class="hljs-keyword">for</span> h, s, v <span class="hljs-keyword">in</span> img.getdata()])
img.show()
</code></pre></div>

<div><h3 id="imagedraw">Image Draw</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> ImageDraw
&lt;Draw&gt; = ImageDraw.Draw(&lt;Image&gt;)                <span class="hljs-comment"># Object for adding 2D graphics to the image.</span>
&lt;Draw&gt;.point((x, y))                            <span class="hljs-comment"># Draws a point. Also `fill=&lt;int/tuple/str&gt;`.</span>
&lt;Draw&gt;.line((x1, y1, x2, y2 [, ...]))           <span class="hljs-comment"># For anti-aliasing use &lt;Image&gt;.resize((w, h)).</span>
&lt;Draw&gt;.arc((x1, y1, x2, y2), deg1, deg2)        <span class="hljs-comment"># Draws in clockwise dir. Also pieslice().</span>
&lt;Draw&gt;.rectangle((x1, y1, x2, y2))              <span class="hljs-comment"># Also rounded_rectangle(), regular_polygon().</span>
&lt;Draw&gt;.polygon((x1, y1, x2, y2, ...))           <span class="hljs-comment"># Last point gets connected to the first one.</span>
&lt;Draw&gt;.ellipse((x1, y1, x2, y2))                <span class="hljs-comment"># To rotate use &lt;Image&gt;.rotate(anticlock_deg).</span>
&lt;Draw&gt;.text((x, y), &lt;str&gt;, font=&lt;Font&gt;)         <span class="hljs-comment"># `&lt;Font&gt; = ImageFont.truetype(&lt;path&gt;, size)`.</span>
</code></pre></div>

<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'fill=&lt;color&gt;'</span></code> to set the primary color.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'width=&lt;int&gt;'</span></code> to set the width of lines or contours.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'outline=&lt;color&gt;'</span></code> to set the color of the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code class="python hljs"><span class="hljs-string">'#rrggbb[aa]'</span></code> string or a color name.</strong></li>
</ul>
<div><h2 id="animation"><a href="https://gto76.github.io/python-cheatsheet/#animation" name="animation">#</a>Animation</h2><div><h4 id="createsagifofabouncingball">Creates a GIF of a bouncing ball:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install imageio</span>
<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw
<span class="hljs-keyword">import</span> imageio

WIDTH, HEIGHT, R = <span class="hljs-number">126</span>, <span class="hljs-number">126</span>, <span class="hljs-number">10</span>
frames = []
<span class="hljs-keyword">for</span> velocity <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>):
    y = sum(range(velocity))
    frame = Image.new(<span class="hljs-string">'L'</span>, (WIDTH, HEIGHT))
    draw = ImageDraw.Draw(frame)
    draw.ellipse((WIDTH/<span class="hljs-number">2</span>-R, y, WIDTH/<span class="hljs-number">2</span>+R, y+R*<span class="hljs-number">2</span>), fill=<span class="hljs-string">'white'</span>)
    frames.append(frame)
frames += reversed(frames[<span class="hljs-number">1</span>:<span class="hljs-number">-1</span>])
imageio.mimsave(<span class="hljs-string">'test.gif'</span>, frames, duration=<span class="hljs-number">0.03</span>)
</code></pre></div></div>


<div><h2 id="audio"><a href="https://gto76.github.io/python-cheatsheet/#audio" name="audio">#</a>Audio</h2><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> wave
</code></pre></div>

<pre><code class="python language-python hljs">&lt;Wave&gt;  = wave.open(<span class="hljs-string">'&lt;path&gt;'</span>)         <span class="hljs-comment"># Opens the WAV file for reading.</span>
&lt;int&gt;   = &lt;Wave&gt;.getframerate()       <span class="hljs-comment"># Returns number of frames per second.</span>
&lt;int&gt;   = &lt;Wave&gt;.getnchannels()       <span class="hljs-comment"># Returns number of samples per frame.</span>
&lt;int&gt;   = &lt;Wave&gt;.getsampwidth()       <span class="hljs-comment"># Returns number of bytes per sample.</span>
&lt;tuple&gt; = &lt;Wave&gt;.getparams()          <span class="hljs-comment"># Returns namedtuple of all parameters.</span>
&lt;bytes&gt; = &lt;Wave&gt;.readframes(nframes)  <span class="hljs-comment"># Returns all frames if -1 is passed.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Wave&gt; = wave.open(<span class="hljs-string">'&lt;path&gt;'</span>, <span class="hljs-string">'wb'</span>)    <span class="hljs-comment"># Creates/truncates a file for writing.</span>
&lt;Wave&gt;.setframerate(&lt;int&gt;)            <span class="hljs-comment"># Pass 44100 for CD, 48000 for video.</span>
&lt;Wave&gt;.setnchannels(&lt;int&gt;)            <span class="hljs-comment"># Pass 1 for mono, 2 for stereo.</span>
&lt;Wave&gt;.setsampwidth(&lt;int&gt;)            <span class="hljs-comment"># Pass 2 for CD, 3 for hi-res sound.</span>
&lt;Wave&gt;.setparams(&lt;tuple&gt;)             <span class="hljs-comment"># Tuple must contain all parameters.</span>
&lt;Wave&gt;.writeframes(&lt;bytes&gt;)           <span class="hljs-comment"># Appends frames to the file.</span>
</code></pre>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when converted to an integer, indicate the displacement of a speaker membrane at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be encoded unsigned. For all other sizes, the integer should be encoded signed with little-endian byte order.</strong></li>
</ul>
<div><h3 id="samplevalues">Sample Values</h3><pre><code class="python hljs">âââââââââââââ¯ââââââââââââ¯âââââââ¯ââââââââââââ
â sampwidth â    min    â zero â    max    â
â ââââââââââââ¼ââââââââââââ¼âââââââ¼ââââââââââââ¨
â     <span class="hljs-number">1</span>     â         <span class="hljs-number">0</span> â  <span class="hljs-number">128</span> â       <span class="hljs-number">255</span> â
â     <span class="hljs-number">2</span>     â    <span class="hljs-number">-32768</span> â    <span class="hljs-number">0</span> â     <span class="hljs-number">32767</span> â
â     <span class="hljs-number">3</span>     â  <span class="hljs-number">-8388608</span> â    <span class="hljs-number">0</span> â   <span class="hljs-number">8388607</span> â
âââââââââââââ·ââââââââââââ·âââââââ·ââââââââââââ
</code></pre></div>

<div><h3 id="readfloatsamplesfromwavfile">Read Float Samples from WAV File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_wav_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_int</span><span class="hljs-params">(bytes_obj)</span>:</span>
        an_int = int.from_bytes(bytes_obj, <span class="hljs-string">'little'</span>, signed=(p.sampwidth != <span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> an_int - <span class="hljs-number">128</span> * (p.sampwidth == <span class="hljs-number">1</span>)
    <span class="hljs-keyword">with</span> wave.open(filename) <span class="hljs-keyword">as</span> file:
        p = file.getparams()
        frames = file.readframes(<span class="hljs-number">-1</span>)
    bytes_samples = (frames[i : i + p.sampwidth] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, len(frames), p.sampwidth))
    <span class="hljs-keyword">return</span> [get_int(b) / pow(<span class="hljs-number">2</span>, (p.sampwidth * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> bytes_samples], p
</code></pre></div>

<div><h3 id="writefloatsamplestowavfile">Write Float Samples to WAV File</h3><pre><code class="python language-python hljs"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write_to_wav_file</span><span class="hljs-params">(filename, samples_f, p=<span class="hljs-keyword">None</span>, nchannels=<span class="hljs-number">1</span>, sampwidth=<span class="hljs-number">2</span>, framerate=<span class="hljs-number">44100</span>)</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_bytes</span><span class="hljs-params">(a_float)</span>:</span>
        a_float = max(<span class="hljs-number">-1</span>, min(<span class="hljs-number">1</span> - <span class="hljs-number">2e-16</span>, a_float))
        a_float += (p.sampwidth == <span class="hljs-number">1</span>)
        a_float *= pow(<span class="hljs-number">2</span>, (p.sampwidth * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>)
        <span class="hljs-keyword">return</span> int(a_float).to_bytes(p.sampwidth, <span class="hljs-string">'little'</span>, signed=(p.sampwidth != <span class="hljs-number">1</span>))
    <span class="hljs-keyword">if</span> p <span class="hljs-keyword">is</span> <span class="hljs-keyword">None</span>:
        p = wave._wave_params(nchannels, sampwidth, framerate, <span class="hljs-number">0</span>, <span class="hljs-string">'NONE'</span>, <span class="hljs-string">'not compressed'</span>)
    <span class="hljs-keyword">with</span> wave.open(filename, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:
        file.setparams(p)
        file.writeframes(<span class="hljs-string">b''</span>.join(get_bytes(f) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> samples_f))
</code></pre></div>

<div><h3 id="examples-1">Examples</h3><div><h4 id="savesa440hzsinewavetoamonowavfile">Saves a 440 Hz sine wave to a mono WAV file:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> pi, sin
samples_f = (sin(i * <span class="hljs-number">2</span> * pi * <span class="hljs-number">440</span> / <span class="hljs-number">44100</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">100_000</span>))
write_to_wav_file(<span class="hljs-string">'test.wav'</span>, samples_f)
</code></pre></div></div>


<div><h4 id="addsnoisetothewavfile">Adds noise to the WAV file:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> uniform
samples_f, params = read_wav_file(<span class="hljs-string">'test.wav'</span>)
samples_f = (f + uniform(<span class="hljs-number">-0.05</span>, <span class="hljs-number">0.05</span>) <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> samples_f)
write_to_wav_file(<span class="hljs-string">'test.wav'</span>, samples_f, p=params)
</code></pre></div>

<div><h4 id="playsthewavfile">Plays the WAV file:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install simpleaudio</span>
<span class="hljs-keyword">from</span> simpleaudio <span class="hljs-keyword">import</span> play_buffer
<span class="hljs-keyword">with</span> wave.open(<span class="hljs-string">'test.wav'</span>) <span class="hljs-keyword">as</span> file:
    frames, p = file.readframes(<span class="hljs-number">-1</span>), file.getparams()
    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate).wait_done()
</code></pre></div>

<div><h3 id="texttospeech">Text to Speech</h3><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install pyttsx3</span>
<span class="hljs-keyword">import</span> pyttsx3
engine = pyttsx3.init()
engine.say(<span class="hljs-string">'Sally sells seashells by the seashore.'</span>)
engine.runAndWait()
</code></pre></div>

<div><h2 id="synthesizer"><a href="https://gto76.github.io/python-cheatsheet/#synthesizer" name="synthesizer">#</a>Synthesizer</h2><div><h4 id="playspopcornbygershonkingsley">Plays Popcorn by Gershon Kingsley:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install simpleaudio</span>
<span class="hljs-keyword">import</span> itertools <span class="hljs-keyword">as</span> it, math, array, simpleaudio

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">play_notes</span><span class="hljs-params">(notes, bpm=<span class="hljs-number">132</span>, f=<span class="hljs-number">44100</span>)</span>:</span>
    get_pause   = <span class="hljs-keyword">lambda</span> n_beats: it.repeat(<span class="hljs-number">0</span>, int(n_beats * <span class="hljs-number">60</span>/bpm * f))
    sin_f       = <span class="hljs-keyword">lambda</span> i, hz: math.sin(i * <span class="hljs-number">2</span> * math.pi * hz / f)
    get_wave    = <span class="hljs-keyword">lambda</span> hz, n_beats: (sin_f(i, hz) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(int(n_beats * <span class="hljs-number">60</span>/bpm * f)))
    get_hz      = <span class="hljs-keyword">lambda</span> note: <span class="hljs-number">440</span> * <span class="hljs-number">2</span> ** ((int(note[:<span class="hljs-number">2</span>]) - <span class="hljs-number">69</span>) / <span class="hljs-number">12</span>)
    get_nbeats  = <span class="hljs-keyword">lambda</span> note: <span class="hljs-number">1</span>/<span class="hljs-number">2</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'â©'</span> <span class="hljs-keyword">in</span> note <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>/<span class="hljs-number">4</span> <span class="hljs-keyword">if</span> <span class="hljs-string">'âª'</span> <span class="hljs-keyword">in</span> note <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>
    get_samples = <span class="hljs-keyword">lambda</span> n: get_wave(get_hz(n), get_nbeats(n)) <span class="hljs-keyword">if</span> n <span class="hljs-keyword">else</span> get_pause(<span class="hljs-number">1</span>/<span class="hljs-number">4</span>)
    samples_f   = it.chain.from_iterable(get_samples(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> notes.split(<span class="hljs-string">','</span>))
    samples_i   = array.array(<span class="hljs-string">'h'</span>, (int(fl * <span class="hljs-number">5000</span>) <span class="hljs-keyword">for</span> fl <span class="hljs-keyword">in</span> samples_f))
    simpleaudio.play_buffer(samples_i, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, f).wait_done()

play_notes(<span class="hljs-string">'83â©,81âª,,83âª,,78âª,,74âª,,78âª,,71âª,,,,83âª,,81âª,,83âª,,78âª,,74âª,,78âª,,71âª,,,,'</span>
           <span class="hljs-string">'83â©,85âª,,86âª,,85âª,,86âª,,83âª,,85â©,83âª,,85âª,,81âª,,83âª,,81âª,,83âª,,79âª,,83âª,,,,'</span>)
</code></pre></div></div>


<div><h2 id="pygame"><a href="https://gto76.github.io/python-cheatsheet/#pygame" name="pygame">#</a>Pygame</h2><div><h4 id="opesawindowanddrawsasquarethatcanbemovedwitharrowkeys">Opes a window and draws a square that can be moved with arrow keys:</h4><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install pygame</span>
<span class="hljs-keyword">import</span> pygame <span class="hljs-keyword">as</span> pg

pg.init()
screen = pg.display.set_mode((<span class="hljs-number">500</span>, <span class="hljs-number">500</span>))
rect = pg.Rect(<span class="hljs-number">240</span>, <span class="hljs-number">240</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>)
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> pg.event.get(pg.QUIT):
    <span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pg.event.get(pg.KEYDOWN):
        dx = (event.key == pg.K_RIGHT) - (event.key == pg.K_LEFT)
        dy = (event.key == pg.K_DOWN) - (event.key == pg.K_UP)
        rect = rect.move((dx * <span class="hljs-number">20</span>, dy * <span class="hljs-number">20</span>))
    screen.fill(pg.Color(<span class="hljs-string">'black'</span>))
    pg.draw.rect(screen, pg.Color(<span class="hljs-string">'white'</span>), rect)
    pg.display.flip()
pg.quit()
</code></pre></div></div>


<div><h3 id="rect">Rect</h3><p><strong>Object for storing rectangular coordinates.</strong></p><pre><code class="python language-python hljs">&lt;Rect&gt; = pg.Rect(x, y, width, height)           <span class="hljs-comment"># Creates Rect object. Truncates passed floats.</span>
&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/â¦           <span class="hljs-comment"># `top/right/bottom/left`. Allows assignments.</span>
&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/â¦                <span class="hljs-comment"># `topright/bottomright/bottomleft/size`. Same.</span>
&lt;Rect&gt; = &lt;Rect&gt;.move((delta_x, delta_y))        <span class="hljs-comment"># Use move_ip() to move the rectangle in-place.</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            <span class="hljs-comment"># Checks whether rectangle contains the point.</span>
&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             <span class="hljs-comment"># Checks whether the two rectangles overlap.</span>
&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     <span class="hljs-comment"># Returns index of first colliding Rect or -1.</span>
&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  <span class="hljs-comment"># Returns indices of all colliding rectangles.</span>
</code></pre>
<div><h3 id="surface">Surface</h3><p><strong>Object for representing images.</strong></p><pre><code class="python language-python hljs">&lt;Surf&gt; = pg.display.set_mode((width, height))   <span class="hljs-comment"># Opens a new window and returns its surface.</span>
&lt;Surf&gt; = pg.Surface((width, height))            <span class="hljs-comment"># New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span>
&lt;Surf&gt; = pg.image.load(&lt;path/file&gt;)             <span class="hljs-comment"># Loads the image. Format depends on source.</span>
&lt;Surf&gt; = pg.surfarray.make_surface(&lt;np_array&gt;)  <span class="hljs-comment"># Also `&lt;np_arr&gt; = surfarray.pixels3d(&lt;Surf&gt;)`.</span>
&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              <span class="hljs-comment"># Creates a new surface from the cutout.</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;Surf&gt;.fill(color)                              <span class="hljs-comment"># Pass tuple of ints or pg.Color('&lt;name/hex&gt;').</span>
&lt;Surf&gt;.set_at((x, y), color)                    <span class="hljs-comment"># Updates pixel. Also &lt;Surf&gt;.get_at((x, y)).</span>
&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     <span class="hljs-comment"># Draws passed surface at specified location.</span>
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> pygame.transform <span class="hljs-keyword">import</span> scale, rotate      <span class="hljs-comment"># Also: flip, smoothscale, scale_by.</span>
&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         <span class="hljs-comment"># Scales the surface. `smoothscale()` blurs it.</span>
&lt;Surf&gt; = rotate(&lt;Surf&gt;, angle)                  <span class="hljs-comment"># Rotates the surface for counterclock degrees.</span>
&lt;Surf&gt; = flip(&lt;Surf&gt;, flip_x=<span class="hljs-keyword">False</span>)             <span class="hljs-comment"># Mirrors the surface. Also `flip_y=False`.</span>
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-keyword">from</span> pygame.draw <span class="hljs-keyword">import</span> line, arc, rect         <span class="hljs-comment"># Also: ellipse, polygon, circle, aaline.</span>
line(&lt;Surf&gt;, color, (x1, y1), (x2, y2))         <span class="hljs-comment"># Draws a line to the surface. Also `width=1`.</span>
arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    <span class="hljs-comment"># Also ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0).</span>
rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=<span class="hljs-number">0</span>)            <span class="hljs-comment"># Also polygon(&lt;Surf&gt;, color, points, width=0).</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Font&gt; = pg.font.Font(&lt;path/file&gt;, size)        <span class="hljs-comment"># Loads TTF file. Pass None for default font.</span>
&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  <span class="hljs-comment"># Accepts background color as fourth argument.</span>
</code></pre>
<div><h3 id="sound">Sound</h3><pre><code class="python language-python hljs">&lt;Sound&gt; = pg.mixer.Sound(&lt;path/file/bytes&gt;)     <span class="hljs-comment"># WAV file or bytes/array of signed shorts.</span>
&lt;Sound&gt;.play/stop()                             <span class="hljs-comment"># Also set_volume(&lt;float&gt;) and fadeout(msec).</span>
</code></pre></div>

<div><h3 id="basicmariobrothersexample">Basic Mario Brothers Example</h3><pre><code class="python language-python hljs"><span class="hljs-keyword">import</span> collections, dataclasses, enum, io, itertools <span class="hljs-keyword">as</span> it, pygame <span class="hljs-keyword">as</span> pg, urllib.request
<span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint

P = collections.namedtuple(<span class="hljs-string">'P'</span>, <span class="hljs-string">'x y'</span>)          <span class="hljs-comment"># Position</span>
D = enum.Enum(<span class="hljs-string">'D'</span>, <span class="hljs-string">'n e s w'</span>)                   <span class="hljs-comment"># Direction</span>
W, H, MAX_S = <span class="hljs-number">50</span>, <span class="hljs-number">50</span>, P(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>)                  <span class="hljs-comment"># Width, Height, Max speed</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_screen</span><span class="hljs-params">()</span>:</span>
        pg.init()
        <span class="hljs-keyword">return</span> pg.display.set_mode((W*<span class="hljs-number">16</span>, H*<span class="hljs-number">16</span>))
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_images</span><span class="hljs-params">()</span>:</span>
        url = <span class="hljs-string">'https://gto76.github.io/python-cheatsheet/web/mario_bros.png'</span>
        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))
        <span class="hljs-keyword">return</span> [img.subsurface(get_rect(x, <span class="hljs-number">0</span>)) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(img.get_width() // <span class="hljs-number">16</span>)]
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_mario</span><span class="hljs-params">()</span>:</span>
        Mario = dataclasses.make_dataclass(<span class="hljs-string">'Mario'</span>, <span class="hljs-string">'rect spd facing_left frame_cycle'</span>.split())
        <span class="hljs-keyword">return</span> Mario(get_rect(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), P(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-keyword">False</span>, it.cycle(range(<span class="hljs-number">3</span>)))
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_tiles</span><span class="hljs-params">()</span>:</span>
        border = [(x, y) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> range(W) <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> range(H) <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, W-<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> y <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, H-<span class="hljs-number">1</span>]]
        platforms = [(randint(<span class="hljs-number">1</span>, W-<span class="hljs-number">2</span>), randint(<span class="hljs-number">2</span>, H-<span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(W*H // <span class="hljs-number">10</span>)]
        <span class="hljs-keyword">return</span> [get_rect(x, y) <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> border + platforms]
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_rect</span><span class="hljs-params">(x, y)</span>:</span>
        <span class="hljs-keyword">return</span> pg.Rect(x*<span class="hljs-number">16</span>, y*<span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>)
    run(get_screen(), get_images(), get_mario(), get_tiles())

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(screen, images, mario, tiles)</span>:</span>
    clock = pg.time.Clock()
    pressed = set()
    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> pg.event.get(pg.QUIT):
        clock.tick(<span class="hljs-number">28</span>)
        pressed |= {e.key <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> pg.event.get(pg.KEYDOWN)}
        pressed -= {e.key <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> pg.event.get(pg.KEYUP)}
        update_speed(mario, tiles, pressed)
        update_position(mario, tiles)
        draw(screen, images, mario, tiles)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_speed</span><span class="hljs-params">(mario, tiles, pressed)</span>:</span>
    x, y = mario.spd
    x += <span class="hljs-number">2</span> * ((pg.K_RIGHT <span class="hljs-keyword">in</span> pressed) - (pg.K_LEFT <span class="hljs-keyword">in</span> pressed))
    x += (x &lt; <span class="hljs-number">0</span>) - (x &gt; <span class="hljs-number">0</span>)
    y += <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> D.s <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> get_boundaries(mario.rect, tiles) <span class="hljs-keyword">else</span> (pg.K_UP <span class="hljs-keyword">in</span> pressed) * <span class="hljs-number">-10</span>
    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_position</span><span class="hljs-params">(mario, tiles)</span>:</span>
    x, y = mario.rect.topleft
    n_steps = max(abs(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> mario.spd)
    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n_steps):
        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))
        x, y = x + (mario.spd.x / n_steps), y + (mario.spd.y / n_steps)
        mario.rect.topleft = x, y

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_boundaries</span><span class="hljs-params">(rect, tiles)</span>:</span>
    deltas = {D.n: P(<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>), D.e: P(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), D.s: P(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), D.w: P(<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>)}
    <span class="hljs-keyword">return</span> {d <span class="hljs-keyword">for</span> d, delta <span class="hljs-keyword">in</span> deltas.items() <span class="hljs-keyword">if</span> rect.move(delta).collidelist(tiles) != <span class="hljs-number">-1</span>}

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">stop_on_collision</span><span class="hljs-params">(spd, bounds)</span>:</span>
    <span class="hljs-keyword">return</span> P(x=<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> (D.w <span class="hljs-keyword">in</span> bounds <span class="hljs-keyword">and</span> spd.x &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (D.e <span class="hljs-keyword">in</span> bounds <span class="hljs-keyword">and</span> spd.x &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">else</span> spd.x,
             y=<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> (D.n <span class="hljs-keyword">in</span> bounds <span class="hljs-keyword">and</span> spd.y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (D.s <span class="hljs-keyword">in</span> bounds <span class="hljs-keyword">and</span> spd.y &gt; <span class="hljs-number">0</span>) <span class="hljs-keyword">else</span> spd.y)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span><span class="hljs-params">(screen, images, mario, tiles)</span>:</span>
    screen.fill((<span class="hljs-number">85</span>, <span class="hljs-number">168</span>, <span class="hljs-number">255</span>))
    mario.facing_left = mario.spd.x &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> mario.spd.x <span class="hljs-keyword">else</span> mario.facing_left
    is_airborne = D.s <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> get_boundaries(mario.rect, tiles)
    image_index = <span class="hljs-number">4</span> <span class="hljs-keyword">if</span> is_airborne <span class="hljs-keyword">else</span> next(mario.frame_cycle) <span class="hljs-keyword">if</span> mario.spd.x <span class="hljs-keyword">else</span> <span class="hljs-number">6</span>
    screen.blit(images[image_index + (mario.facing_left * <span class="hljs-number">9</span>)], mario.rect)
    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tiles:
        is_border = t.x <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, (W-<span class="hljs-number">1</span>)*<span class="hljs-number">16</span>] <span class="hljs-keyword">or</span> t.y <span class="hljs-keyword">in</span> [<span class="hljs-number">0</span>, (H-<span class="hljs-number">1</span>)*<span class="hljs-number">16</span>]
        screen.blit(images[<span class="hljs-number">18</span> <span class="hljs-keyword">if</span> is_border <span class="hljs-keyword">else</span> <span class="hljs-number">19</span>], t)
    pg.display.flip()

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()
</code></pre></div>

<div><h2 id="pandas"><a href="https://gto76.github.io/python-cheatsheet/#pandas" name="pandas">#</a>Pandas</h2><p><strong>Data analysis library. For examples see <a href="https://gto76.github.io/python-cheatsheet/#plotly">Plotly</a>.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install pandas matplotlib</span>
<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd, matplotlib.pyplot <span class="hljs-keyword">as</span> plt
</code></pre></div>


<div><h3 id="series">Series</h3><p><strong>Ordered dictionary with a name.</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], index=[<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>], name=<span class="hljs-string">'a'</span>); s
x    <span class="hljs-number">1</span>
y    <span class="hljs-number">2</span>
Name: a, dtype: int64
</code></pre></div>


<pre><code class="python language-python hljs">&lt;S&gt;  = pd.Series(&lt;list&gt;)                       <span class="hljs-comment"># Uses list's indices for 'index'.</span>
&lt;S&gt;  = pd.Series(&lt;dict&gt;)                       <span class="hljs-comment"># Uses dictionary's keys for 'index'.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;el&gt; = &lt;S&gt;.loc[key]                            <span class="hljs-comment"># Or: &lt;S&gt;.iloc[i]</span>
&lt;S&gt;  = &lt;S&gt;.loc[coll_of_keys]                   <span class="hljs-comment"># Or: &lt;S&gt;.iloc[coll_of_i]</span>
&lt;S&gt;  = &lt;S&gt;.loc[from_key : to_key_inc]          <span class="hljs-comment"># Or: &lt;S&gt;.iloc[from_i : to_i_exc]</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;el&gt; = &lt;S&gt;[key/i]                              <span class="hljs-comment"># Or: &lt;S&gt;.&lt;key&gt;</span>
&lt;S&gt;  = &lt;S&gt;[coll_of_keys/coll_of_i]             <span class="hljs-comment"># Or: &lt;S&gt;[key/i : key/i]</span>
&lt;S&gt;  = &lt;S&gt;[&lt;S_of_bools&gt;]                       <span class="hljs-comment"># Or: &lt;S&gt;.loc/iloc[&lt;S_of_bools&gt;]</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;S&gt;  = &lt;S&gt; &gt; &lt;el/S&gt;                            <span class="hljs-comment"># Returns S of bools. For logic use &amp;, |, ~.</span>
&lt;S&gt;  = &lt;S&gt; + &lt;el/S&gt;                            <span class="hljs-comment"># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;S&gt;  = &lt;S&gt;.head/describe/sort_values()         <span class="hljs-comment"># Also &lt;S&gt;.unique/value_counts/round/dropna().</span>
&lt;S&gt;  = &lt;S&gt;.str.strip/lower/contains/replace()  <span class="hljs-comment"># Also split().str[i] or split(expand=True).</span>
&lt;S&gt;  = &lt;S&gt;.dt.year/month/day/hour              <span class="hljs-comment"># Use pd.to_datetime(&lt;S&gt;) to get S of datetimes.</span>
&lt;S&gt;  = &lt;S&gt;.dt.to_period(<span class="hljs-string">'y/m/d/h'</span>)             <span class="hljs-comment"># Quantizes datetimes into Period objects.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;S&gt;.plot.line/area/bar/pie/hist()              <span class="hljs-comment"># Generates a plot. Accepts `title=&lt;str&gt;`.</span>
plt.show()                                     <span class="hljs-comment"># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre>
<ul>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'print(&lt;S&gt;.to_string())'</span></code> to print a Series that has more than sixty items.</strong></li>
<li><strong>Use <code class="python hljs"><span class="hljs-string">'&lt;S&gt;.index'</span></code> to get collection of keys and <code class="python hljs"><span class="hljs-string">'&lt;S&gt;.index = &lt;coll&gt;'</span></code> to update them.</strong></li>
<li><strong>Only pass a list or Series to loc/iloc because <code class="python hljs"><span class="hljs-string">'obj[x, y]'</span></code> is converted to <code class="python hljs"><span class="hljs-string">'obj[(x, y)]'</span></code> and <code class="python hljs"><span class="hljs-string">'&lt;S&gt;.loc[key_1, key_2]'</span></code> is how you retrieve a value from a multi-indexed Series.</strong></li>
<li><strong>Pandas uses NumPy types like <code class="python hljs"><span class="hljs-string">'np.int64'</span></code>. Series is converted to <code class="python hljs"><span class="hljs-string">'float64'</span></code> if np.nan is assigned to any item. Use <code class="python hljs"><span class="hljs-string">'&lt;S&gt;.astype(&lt;str/type&gt;)'</span></code> to get converted Series.</strong></li>
</ul>
<div><h4 id="seriesaggregatetransformmap">Series â Aggregate, Transform, Map:</h4><pre><code class="python language-python hljs">&lt;el&gt; = &lt;S&gt;.sum/max/mean/std/idxmax/count()     <span class="hljs-comment"># Or: &lt;S&gt;.agg(lambda &lt;S&gt;: &lt;el&gt;)</span>
&lt;S&gt;  = &lt;S&gt;.rank/diff/cumsum/ffill/interpolâ¦()  <span class="hljs-comment"># Or: &lt;S&gt;.agg/transform(lambda &lt;S&gt;: &lt;S&gt;)</span>
&lt;S&gt;  = &lt;S&gt;.isna/fillna/isin([&lt;el/coll&gt;])       <span class="hljs-comment"># Or: &lt;S&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<pre><code class="python hljs">ââââââââââââââââ¯ââââââââââââââ¯ââââââââââââââ¯ââââââââââââââââ
â              â    <span class="hljs-string">'sum'</span>    â   [<span class="hljs-string">'sum'</span>]   â {<span class="hljs-string">'s'</span>: <span class="hljs-string">'sum'</span>}  â
â âââââââââââââââ¼ââââââââââââââ¼ââââââââââââââ¼ââââââââââââââââ¨
â s.apply(â¦)   â      <span class="hljs-number">3</span>      â    sum  <span class="hljs-number">3</span>   â     s  <span class="hljs-number">3</span>      â
â s.agg(â¦)     â             â             â               â
ââââââââââââââââ·ââââââââââââââ·ââââââââââââââ·ââââââââââââââââ

ââââââââââââââââ¯ââââââââââââââ¯ââââââââââââââ¯ââââââââââââââââ
â              â    <span class="hljs-string">'rank'</span>   â   [<span class="hljs-string">'rank'</span>]  â {<span class="hljs-string">'r'</span>: <span class="hljs-string">'rank'</span>} â
â âââââââââââââââ¼ââââââââââââââ¼ââââââââââââââ¼ââââââââââââââââ¨
â s.apply(â¦)   â             â      rank   â               â
â s.agg(â¦)     â    x  <span class="hljs-number">1.0</span>   â   x   <span class="hljs-number">1.0</span>   â   r  x  <span class="hljs-number">1.0</span>   â
â              â    y  <span class="hljs-number">2.0</span>   â   y   <span class="hljs-number">2.0</span>   â      y  <span class="hljs-number">2.0</span>   â
ââââââââââââââââ·ââââââââââââââ·ââââââââââââââ·ââââââââââââââââ
</code></pre>

<div><h3 id="dataframe">DataFrame</h3><p><strong>Table with labeled rows and columns.</strong></p><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]], index=[<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>], columns=[<span class="hljs-string">'x'</span>, <span class="hljs-string">'y'</span>]); df
   x  y
a  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>
b  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;DF&gt;   = pd.DataFrame(&lt;list_of_rows&gt;)          <span class="hljs-comment"># Rows can be either lists, dicts or series.</span>
&lt;DF&gt;   = pd.DataFrame(&lt;dict_of_columns&gt;)       <span class="hljs-comment"># Columns can be either lists, dicts or series.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;el&gt;   = &lt;DF&gt;.loc[row_key, col_key]            <span class="hljs-comment"># Or: &lt;DF&gt;.iloc[row_i, col_i]</span>
&lt;S/DF&gt; = &lt;DF&gt;.loc[row_key/s]                   <span class="hljs-comment"># Or: &lt;DF&gt;.iloc[row_i/s]</span>
&lt;S/DF&gt; = &lt;DF&gt;.loc[:, col_key/s]                <span class="hljs-comment"># Or: &lt;DF&gt;.iloc[:, col_i/s]</span>
&lt;DF&gt;   = &lt;DF&gt;.loc[row_bools, col_bools]        <span class="hljs-comment"># Or: &lt;DF&gt;.iloc[row_bools, col_bools]</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;S/DF&gt; = &lt;DF&gt;[col_key/s]                       <span class="hljs-comment"># Or: &lt;DF&gt;.&lt;col_key&gt;</span>
&lt;DF&gt;   = &lt;DF&gt;[&lt;S_of_bools&gt;]                    <span class="hljs-comment"># Filters rows. For example `df[df.x &gt; 1]`.</span>
&lt;DF&gt;   = &lt;DF&gt;[&lt;DF_of_bools&gt;]                   <span class="hljs-comment"># Assigns NaN to items that are False in bools.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;DF&gt;   = &lt;DF&gt; &gt; &lt;el/S/DF&gt;                      <span class="hljs-comment"># Returns DF of bools. Treats series as a row.</span>
&lt;DF&gt;   = &lt;DF&gt; + &lt;el/S/DF&gt;                      <span class="hljs-comment"># Items with non-matching keys get value NaN.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;DF&gt;   = &lt;DF&gt;.set_index(col_key)               <span class="hljs-comment"># Replaces row keys with column's values.</span>
&lt;DF&gt;   = &lt;DF&gt;.reset_index(drop=<span class="hljs-keyword">False</span>)          <span class="hljs-comment"># Drops or moves row keys to column named index.</span>
&lt;DF&gt;   = &lt;DF&gt;.sort_index(ascending=<span class="hljs-keyword">True</span>)       <span class="hljs-comment"># Sorts rows by row keys. Use `axis=1` for cols.</span>
&lt;DF&gt;   = &lt;DF&gt;.sort_values(col_key/s)           <span class="hljs-comment"># Sorts rows by passed column/s. Also `axis=1`.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;DF&gt;   = &lt;DF&gt;.head/tail/sample(&lt;int&gt;)          <span class="hljs-comment"># Returns first, last, or random n rows.</span>
&lt;DF&gt;   = &lt;DF&gt;.describe()                       <span class="hljs-comment"># Describes columns. Also info(), corr(), shape.</span>
&lt;DF&gt;   = &lt;DF&gt;.query(<span class="hljs-string">'&lt;query&gt;'</span>)                 <span class="hljs-comment"># Filters rows. For example `df.query('x &gt; 1')`.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;DF&gt;.plot.line/area/bar/scatter(x=col_key, â¦)  <span class="hljs-comment"># `y=col_key/s`. Also hist/box(column/by=col_k).</span>
plt.show()                                     <span class="hljs-comment"># Displays the plot. Also plt.savefig(&lt;path&gt;).</span>
</code></pre>
<div><h4 id="dataframemergejoinconcat">DataFrame â Merge, Join, Concat:</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>df_2 = pd.DataFrame([[<span class="hljs-number">4</span>, <span class="hljs-number">5</span>], [<span class="hljs-number">6</span>, <span class="hljs-number">7</span>]], index=[<span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>], columns=[<span class="hljs-string">'y'</span>, <span class="hljs-string">'z'</span>]); df_2
   y  z
b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>
c  <span class="hljs-number">6</span>  <span class="hljs-number">7</span>
</code></pre></div>

<pre><code class="python hljs">âââââââââââââââââââââââââ¯ââââââââââââââââ¯âââââââââââââ¯âââââââââââââ¯ââââââââââââââââââââââââââââ
â                       â    <span class="hljs-string">'outer'</span>    â   <span class="hljs-string">'inner'</span>  â   <span class="hljs-string">'left'</span>   â       Description         â
â ââââââââââââââââââââââââ¼ââââââââââââââââ¼âââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââ¨
â df.merge(df_2,        â    x   y   z  â x   y   z  â x   y   z  â Merges on column if 'on'  â
â          on=<span class="hljs-string">'y'</span>,      â <span class="hljs-number">0</span>  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   .  â <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  â <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   .  â or 'left_on/right_on' are â
â          how=â¦)       â <span class="hljs-number">1</span>  <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  â            â <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  â set, else on shared cols. â
â                       â <span class="hljs-number">2</span>  .   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>  â            â            â Uses <span class="hljs-string">'inner'</span> by default.  â
â ââââââââââââââââââââââââ¼ââââââââââââââââ¼âââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââ¨
â df.join(df_2,         â    x yl yr  z â            â x yl yr  z â Merges on row keys.       â
â         lsuffix=<span class="hljs-string">'l'</span>,  â a  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  .  . â x yl yr  z â <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  .  . â Uses <span class="hljs-string">'left'</span> by default.   â
â         rsuffix=<span class="hljs-string">'r'</span>,  â b  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span> â <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span> â <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span> â If Series is passed, it   â
â         how=â¦)        â c  .  .  <span class="hljs-number">6</span>  <span class="hljs-number">7</span> â            â            â is treated as a column.   â
â ââââââââââââââââââââââââ¼ââââââââââââââââ¼âââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââ¨
â pd.concat([df, df_2], â    x   y   z  â     y      â            â Adds rows at the bottom.  â
â           axis=<span class="hljs-number">0</span>,     â a  <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   .  â     <span class="hljs-number">2</span>      â            â Uses <span class="hljs-string">'outer'</span> by default.  â
â           join=â¦)     â b  <span class="hljs-number">3</span>   <span class="hljs-number">4</span>   .  â     <span class="hljs-number">4</span>      â            â A Series is treated as a  â
â                       â b  .   <span class="hljs-number">4</span>   <span class="hljs-number">5</span>  â     <span class="hljs-number">4</span>      â            â column. To add a row use  â
â                       â c  .   <span class="hljs-number">6</span>   <span class="hljs-number">7</span>  â     <span class="hljs-number">6</span>      â            â pd.concat([df, DF([s])]). â
â ââââââââââââââââââââââââ¼ââââââââââââââââ¼âââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââ¨
â pd.concat([df, df_2], â    x  y  y  z â            â            â Adds columns at the       â
â           axis=<span class="hljs-number">1</span>,     â a  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  .  . â x  y  y  z â            â right end. Uses <span class="hljs-string">'outer'</span>   â
â           join=â¦)     â b  <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span> â <span class="hljs-number">3</span>  <span class="hljs-number">4</span>  <span class="hljs-number">4</span>  <span class="hljs-number">5</span> â            â by default. A Series is   â
â                       â c  .  .  <span class="hljs-number">6</span>  <span class="hljs-number">7</span> â            â            â treated as a column.      â
âââââââââââââââââââââââââ·ââââââââââââââââ·âââââââââââââ·âââââââââââââ·ââââââââââââââââââââââââââââ
</code></pre>
<div><h4 id="dataframeaggregatetransformmap">DataFrame â Aggregate, Transform, Map:</h4><pre><code class="python language-python hljs">&lt;S&gt;  = &lt;DF&gt;.sum/max/mean/std/idxmax/count()    <span class="hljs-comment"># Or: &lt;DF&gt;.apply/agg(lambda &lt;S&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpoâ¦()  <span class="hljs-comment"># Or: &lt;DF&gt;.apply/agg/transform(lambda &lt;S&gt;: &lt;S&gt;)</span>
&lt;DF&gt; = &lt;DF&gt;.isna/fillna/isin([&lt;el/coll&gt;])      <span class="hljs-comment"># Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span>
</code></pre></div>

<pre><code class="python hljs">âââââââââââââââââââ¯ââââââââââââââââ¯ââââââââââââââââ¯ââââââââââââââââ
â                 â     <span class="hljs-string">'sum'</span>     â    [<span class="hljs-string">'sum'</span>]    â {<span class="hljs-string">'x'</span>: <span class="hljs-string">'sum'</span>}  â
â ââââââââââââââââââ¼ââââââââââââââââ¼ââââââââââââââââ¼ââââââââââââââââ¨
â df.apply(â¦)     â      x  <span class="hljs-number">4</span>     â        x  y   â     x  <span class="hljs-number">4</span>      â
â df.agg(â¦)       â      y  <span class="hljs-number">6</span>     â   sum  <span class="hljs-number">4</span>  <span class="hljs-number">6</span>   â               â
âââââââââââââââââââ·ââââââââââââââââ·ââââââââââââââââ·ââââââââââââââââ

âââââââââââââââââââ¯ââââââââââââââââ¯ââââââââââââââââ¯ââââââââââââââââ
â                 â     <span class="hljs-string">'rank'</span>    â    [<span class="hljs-string">'rank'</span>]   â {<span class="hljs-string">'x'</span>: <span class="hljs-string">'rank'</span>} â
â ââââââââââââââââââ¼ââââââââââââââââ¼ââââââââââââââââ¼ââââââââââââââââ¨
â df.apply(â¦)     â               â       x    y  â               â
â df.agg(â¦)       â       x    y  â    rank rank  â         x     â
â df.transform(â¦) â  a  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  â  a  <span class="hljs-number">1.0</span>  <span class="hljs-number">1.0</span>  â    a  <span class="hljs-number">1.0</span>     â
â                 â  b  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  â  b  <span class="hljs-number">2.0</span>  <span class="hljs-number">2.0</span>  â    b  <span class="hljs-number">2.0</span>     â
âââââââââââââââââââ·ââââââââââââââââ·ââââââââââââââââ·ââââââââââââââââ
</code></pre>

<ul>
<li><strong>Listed methods process the columns unless they receive <code class="python hljs"><span class="hljs-string">'axis=1'</span></code>. Exceptions to this rule are <code class="python hljs"><span class="hljs-string">'&lt;DF&gt;.dropna()'</span></code>, <code class="python hljs"><span class="hljs-string">'&lt;DF&gt;.drop(row_key/s)'</span></code> and <code class="python hljs"><span class="hljs-string">'&lt;DF&gt;.rename(&lt;dict/func&gt;)'</span></code>.</strong></li>
<li><strong>Fifth result's columns are indexed with a multi-index. This means we need a tuple of column keys to specify a column: <code class="python hljs"><span class="hljs-string">'&lt;DF&gt;.loc[row_key, (col_key_1, col_key_2)]'</span></code>.</strong></li>
</ul>
<div><h3 id="multiindex">Multi-Index</h3><pre><code class="python language-python hljs">&lt;DF&gt; = &lt;DF&gt;.loc[row_key_1]                     <span class="hljs-comment"># Or: &lt;DF&gt;.xs(row_key_1)</span>
&lt;DF&gt; = &lt;DF&gt;.loc[:, (slice(<span class="hljs-keyword">None</span>), col_key_2)]   <span class="hljs-comment"># Or: &lt;DF&gt;.xs(col_key_2, axis=1, level=1)</span>
&lt;DF&gt; = &lt;DF&gt;.set_index(col_keys)                <span class="hljs-comment"># Creates index from cols. Also `append=False`.</span>
&lt;DF&gt; = &lt;DF&gt;.pivot_table(index=col_key/s)       <span class="hljs-comment"># `columns=key/s, values=key/s, aggfunc='mean'`.</span>
&lt;S&gt;  = &lt;DF&gt;.stack/unstack(level=<span class="hljs-number">-1</span>)            <span class="hljs-comment"># Combines col keys with row keys or vice versa.</span>
</code></pre></div>

<div><h3 id="fileformats">File Formats</h3><pre><code class="python language-python hljs">&lt;S/DF&gt; = pd.read_json/pickle(&lt;path/url/file&gt;)  <span class="hljs-comment"># Also io.StringIO(&lt;str&gt;), io.BytesIO(&lt;bytes&gt;).</span>
&lt;DF&gt;   = pd.read_csv/excel(&lt;path/url/file&gt;)    <span class="hljs-comment"># Also `header/index_col/dtype/usecols/â¦=&lt;obj&gt;`.</span>
&lt;list&gt; = pd.read_html(&lt;path/url/file&gt;)         <span class="hljs-comment"># Raises ImportError if webpage has zero tables.</span>
&lt;S/DF&gt; = pd.read_parquet/feather/hdf(&lt;pathâ¦&gt;)  <span class="hljs-comment"># Function read_hdf() accepts `key=&lt;s/df_name&gt;`.</span>
&lt;DF&gt;   = pd.read_sql(<span class="hljs-string">'&lt;table/query&gt;'</span>, &lt;conn&gt;)  <span class="hljs-comment"># Pass SQLite3/Alchemy connection. See #SQLite.</span>
</code></pre></div>

<pre><code class="python language-python hljs">&lt;DF&gt;.to_json/csv/html/latex/parquet(&lt;path&gt;)    <span class="hljs-comment"># Returns a string/bytes if path is omitted.</span>
&lt;DF&gt;.to_pickle/excel/feather/hdf(&lt;path&gt;)       <span class="hljs-comment"># Method to_hdf() requires `key=&lt;s/df_name&gt;`.</span>
&lt;DF&gt;.to_sql(<span class="hljs-string">'&lt;table_name&gt;'</span>, &lt;connection&gt;)      <span class="hljs-comment"># Also `if_exists='fail/replace/append'`.</span>
</code></pre>
<ul>
<li><strong><code class="python hljs"><span class="hljs-string">'$ pip3 install "pandas[excel]" odfpy lxml pyarrow'</span></code> installs dependencies.</strong></li>
<li><strong>Csv functions use the same dialect as standard library's csv module (e.g. <code class="python hljs"><span class="hljs-string">'sep=","'</span></code>).</strong></li>
<li><strong>Read_csv() only parses dates of columns that are listed in 'parse_dates'. It automatically tries to detect the format, but it can be helped with 'date_format' or 'dayfirst' arguments.</strong></li>
<li><strong>We get a dataframe with DatetimeIndex if 'parse_dates' argument includes 'index_col'. Its <code class="python hljs"><span class="hljs-string">'resample("y/m/d/h")'</span></code> method returns Resampler object that is similar to GroupBy.</strong></li>
</ul>
<div><h3 id="groupby">GroupBy</h3><p><strong>Object that groups together rows of a dataframe based on the value of the passed column.</strong></p><pre><code class="python language-python hljs">&lt;GB&gt; = &lt;DF&gt;.groupby(col_key/s)                 <span class="hljs-comment"># Splits DF into groups based on passed column.</span>
&lt;DF&gt; = &lt;GB&gt;.apply/filter(&lt;func&gt;)               <span class="hljs-comment"># Filter drops a group if func returns False.</span>
&lt;DF&gt; = &lt;GB&gt;.get_group(&lt;el&gt;)                    <span class="hljs-comment"># Selects a group by grouping column's value.</span>
&lt;S&gt;  = &lt;GB&gt;.size()                             <span class="hljs-comment"># S of group sizes. Same keys as get_group().</span>
&lt;GB&gt; = &lt;GB&gt;[col_key]                           <span class="hljs-comment"># Single column GB. All operations return S.</span>
</code></pre></div>


<pre><code class="python language-python hljs">&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/std/idxmax/count()    <span class="hljs-comment"># Or: &lt;GB&gt;.agg(lambda &lt;S&gt;: &lt;el&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           <span class="hljs-comment"># Or: &lt;GB&gt;.transform(lambda &lt;S&gt;: &lt;S&gt;)</span>
&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       <span class="hljs-comment"># Or: &lt;GB&gt;.transform(lambda &lt;S&gt;: &lt;S&gt;)</span>
</code></pre>
<div><h4 id="dividesrowsintogroupsandsumstheircolumnsresulthasanamedindexthatcreatescolumnzonreset_index">Divides rows into groups and sums their columns. Result has a named index that creates column <code class="python hljs"><span class="hljs-string">'z'</span></code> on reset_index():</h4><pre><code class="python language-python hljs"><span class="hljs-meta">&gt;&gt;&gt; </span>df = pd.DataFrame([[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>], [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>]], list(<span class="hljs-string">'abc'</span>), list(<span class="hljs-string">'xyz'</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>gb = df.groupby(<span class="hljs-string">'z'</span>); gb.apply(print)
   x  y  z
a  <span class="hljs-number">1</span>  <span class="hljs-number">2</span>  <span class="hljs-number">3</span>
   x  y  z
b  <span class="hljs-number">4</span>  <span class="hljs-number">5</span>  <span class="hljs-number">6</span>
c  <span class="hljs-number">7</span>  <span class="hljs-number">8</span>  <span class="hljs-number">6</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>gb.sum()
    x   y
z
<span class="hljs-number">3</span>   <span class="hljs-number">1</span>   <span class="hljs-number">2</span>
<span class="hljs-number">6</span>  <span class="hljs-number">11</span>  <span class="hljs-number">13</span></code></pre></div>

<div><h3 id="rolling">Rolling</h3><p><strong>Object for rolling window calculations.</strong></p><pre><code class="python language-python hljs">&lt;RS/RDF/RGB&gt; = &lt;S/DF/GB&gt;.rolling(win_size)     <span class="hljs-comment"># Also: `min_periods=None, center=False`.</span>
&lt;RS/RDF/RGB&gt; = &lt;RDF/RGB&gt;[col_key/s]            <span class="hljs-comment"># Or: &lt;RDF/RGB&gt;.&lt;col_key&gt;</span>
&lt;S/DF&gt;       = &lt;R&gt;.mean/sum/max()              <span class="hljs-comment"># Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span>
</code></pre></div>


<div><h2 id="plotly"><a href="https://gto76.github.io/python-cheatsheet/#plotly" name="plotly">#</a>Plotly</h2><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install plotly kaleido pandas</span>
<span class="hljs-keyword">import</span> plotly.express <span class="hljs-keyword">as</span> px, pandas <span class="hljs-keyword">as</span> pd
</code></pre></div>

<pre><code class="python language-python hljs">&lt;Fig&gt; = px.line(&lt;DF&gt; [, y=col_key/s [, x=col_key]])   <span class="hljs-comment"># Also px.line(y=&lt;list&gt; [, x=&lt;list&gt;]).</span>
&lt;Fig&gt;.update_layout(paper_bgcolor=<span class="hljs-string">'#rrggbb'</span>)          <span class="hljs-comment"># Also `margin=dict(t=0, r=0, b=0, l=0)`.</span>
&lt;Fig&gt;.write_html/json/image(<span class="hljs-string">'&lt;path&gt;'</span>)                 <span class="hljs-comment"># Use &lt;Fig&gt;.show() to display the plot.</span>
</code></pre>
<pre><code class="python language-python hljs">&lt;Fig&gt; = px.area/bar/box(&lt;DF&gt;, x=col_key, y=col_keys)  <span class="hljs-comment"># Also `color=col_key`. All are optional.</span>
&lt;Fig&gt; = px.scatter(&lt;DF&gt;, x=col_key, y=col_keys)       <span class="hljs-comment"># Also `color/size/symbol=col_key`. Same.</span>
&lt;Fig&gt; = px.scatter_3d(&lt;DF&gt;, x=col_key, y=col_key, â¦)  <span class="hljs-comment"># `z=col_key`. Also color, size, symbol.</span>
&lt;Fig&gt; = px.histogram(&lt;DF&gt;, x=col_keys, y=col_key)     <span class="hljs-comment"># Also color, nbins. All are optional.</span>
</code></pre>
<div><h4 id="displaysalinechartoftotalcovid19deathspermilliongroupedbycontinent">Displays a line chart of total COVID-19 deaths per million grouped by continent:</h4><p></p><div id="2a950764-39fc-416d-97fe-0a6226a3095f" class="plotly-graph-div js-plotly-plot" style="height: 312px; width: 667px;"><div class="plot-container plotly"><div class="svg-container" style="position: relative; width: 666.997px; height: 311.997px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="311.997" style="background: rgba(0, 0, 0, 0);"><defs id="defs-d58e7f"><g class="clips"><clipPath id="clipd58e7fxyplot" class="plotclip"><rect width="454" height="245"></rect></clipPath><clipPath class="axesclip" id="clipd58e7fx"><rect x="80" y="0" width="454" height="311.997"></rect></clipPath><clipPath class="axesclip" id="clipd58e7fy"><rect x="0" y="24" width="666.997" height="245"></rect></clipPath><clipPath class="axesclip" id="clipd58e7fxy"><rect x="80" y="24" width="454" height="245"></rect></clipPath></g><g class="gradients"></g></defs><g class="bglayer"><rect class="bg" x="80" y="24" width="454" height="245" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="24" width="454" height="245" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="4" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="534" y="4" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="269" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="534" y="269" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="125.4" y="269.5" width="363.20000000000005" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="269.5" width="45.400000000000006" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="488.6" y="269.5" width="45.400000000000006" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="48.5" width="20" height="196" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="244.5" width="20" height="24.5" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="24" width="20" height="24.5" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(167.94,0)" d="M0,24v245" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(293.37,0)" d="M0,24v245" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(416.75,0)" d="M0,24v245" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,216.5)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,176.25)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,135.99)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,95.74)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,55.489999999999995)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"><path class="yzl zl crisp" transform="translate(0,256.75)" d="M80,0h454" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 2px;"></path></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"></g><g class="plot" transform="translate(80, 24)" clip-path="url('#clipd58e7fxyplot')"></g><g class="overplot"></g><path class="xlines-above crisp" d="M79,269.5H534" style="fill: none; stroke-width: 1px; stroke: rgb(255, 255, 255); stroke-opacity: 1;"></path><path class="ylines-above crisp" d="M79.5,24V269" style="fill: none; stroke-width: 1px; stroke: rgb(255, 255, 255); stroke-opacity: 1;"></path><g class="overlines-above"></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="284.4" data-unformatted="Jul 2020" data-math="N" transform="translate(167.94,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jul 2020</text></g><g class="xtick"><text text-anchor="middle" x="0" y="284.4" data-unformatted="Jan 2021" data-math="N" transform="translate(293.37,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jan 2021</text></g><g class="xtick"><text text-anchor="middle" x="0" y="284.4" data-unformatted="Jul 2021" data-math="N" transform="translate(416.75,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jul 2021</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="0" data-math="N" transform="translate(0,256.75)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">0</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="500" data-math="N" transform="translate(0,216.5)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">500</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="1000" data-math="N" transform="translate(0,176.25)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">1000</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="1500" data-math="N" transform="translate(0,135.99)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">1500</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="2000" data-math="N" transform="translate(0,95.74)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">2000</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="2500" data-math="N" transform="translate(0,55.489999999999995)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">2500</text></g></g><g class="overaxes-above"></g></g></g><g class="polarlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"><canvas class="gl-canvas gl-canvas-context" width="666.997" height="311.997" style="position: absolute; top: 0px; left: 0px; overflow: visible; pointer-events: none;"></canvas><canvas class="gl-canvas gl-canvas-focus" width="666.997" height="311.997" style="position: absolute; top: 0px; left: 0px; overflow: visible; pointer-events: none;"></canvas><canvas class="gl-canvas gl-canvas-pick" width="666.997" height="311.997" style="position: absolute; top: 0px; left: 0px; overflow: visible; pointer-events: none;"></canvas></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="311.997"><defs id="topdefs-d58e7f"><g class="clips"></g><clipPath id="legendd58e7f"><rect width="124" height="140" x="0" y="0"></rect></clipPath></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="legend" pointer-events="all" transform="translate(542.997, 24)"><rect class="bg" shape-rendering="crispEdges" style="stroke: rgb(68, 68, 68); stroke-opacity: 1; fill: rgb(0, 0, 0); fill-opacity: 0; stroke-width: 0px;" width="124" height="140" x="0" y="0"></rect><g class="scrollbox" transform="translate(0, 0)" clip-path="url('#legendd58e7f')"><text class="legendtitletext user-select-none" text-anchor="start" data-unformatted="Continent" data-math="N" x="2" y="15.600000000000001" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Continent</text><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 30.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="South America" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">South America</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(99, 110, 250); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 49.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="North America" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">North America</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(239, 85, 59); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 68.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Europe" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Europe</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(0, 204, 150); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 87.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Asia" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Asia</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(171, 99, 250); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 106.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Africa" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Africa</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(255, 161, 90); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g><g class="groups" transform="translate(0, 0)"><g class="traces" transform="translate(0, 125.1)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Oceania" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Oceania</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(25, 211, 243); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="118.58489990234375" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g></g><rect class="scrollbar" rx="20" ry="3" width="0" height="0" style="fill: rgb(128, 139, 164); fill-opacity: 1;" x="0" y="0"></rect></g><g class="g-gtitle"></g><g class="g-xtitle" transform="translate(0,-3.7448220520019504)"><text class="xtitle" x="307" y="312.21910362243653" text-anchor="middle" data-unformatted="Date" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Date</text></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,24.825976562500003,146.5)" x="24.825976562500003" y="146.5" text-anchor="middle" data-unformatted="Total Deaths per Million" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Total Deaths per Million</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-d58e7f" class="modebar"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Toggle Spike Lines" data-attr="_cartesianSpikesEnabled" data-val="on" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="M512 409c0-57-46-104-103-104-57 0-104 47-104 104 0 57 47 103 104 103 57 0 103-46 103-103z m-327-39l92 0 0 92-92 0z m-185 0l92 0 0 92-92 0z m370-186l92 0 0 93-92 0z m0-184l92 0 0 92-92 0z" transform="matrix(1.5 0 0 -1.5 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn active" data-title="Show closest data on hover" data-attr="hovermode" data-val="closest" data-toggle="false" data-gravity="ne"><svg viewBox="0 0 1500 1000" class="icon" height="1em" width="1em"><path d="m375 725l0 0-375-375 375-374 0-1 1125 0 0 750-1125 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Compare data on hover" data-attr="hovermode" data-val="x" data-toggle="false" data-gravity="ne"><svg viewBox="0 0 1125 1000" class="icon" height="1em" width="1em"><path d="m187 786l0 2-187-188 188-187 0 0 937 0 0 373-938 0z m0-499l0 1-187-188 188-188 0 0 937 0 0 376-938-1z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="311.997"><g class="hoverlayer"></g></svg></div></div></div><pre><code class="python language-python hljs">covid = pd.read_csv(<span class="hljs-string">'https://raw.githubusercontent.com/owid/covid-19-data/8dde8ca49b'</span>
                    <span class="hljs-string">'6e648c17dd420b2726ca0779402651/public/data/owid-covid-data.csv'</span>,
                    usecols=[<span class="hljs-string">'iso_code'</span>, <span class="hljs-string">'date'</span>, <span class="hljs-string">'population'</span>, <span class="hljs-string">'total_deaths'</span>])
continents = pd.read_csv(<span class="hljs-string">'https://gto76.github.io/python-cheatsheet/web/continents.csv'</span>,
                         usecols=[<span class="hljs-string">'Three_Letter_Country_Code'</span>, <span class="hljs-string">'Continent_Name'</span>])
df = pd.merge(covid, continents, left_on=<span class="hljs-string">'iso_code'</span>, right_on=<span class="hljs-string">'Three_Letter_Country_Code'</span>)
df = df.groupby([<span class="hljs-string">'Continent_Name'</span>, <span class="hljs-string">'date'</span>]).sum().reset_index()
df[<span class="hljs-string">'Total Deaths per Million'</span>] = df.total_deaths * <span class="hljs-number">1e6</span> / df.population
df = df[df.date &gt; <span class="hljs-string">'2020-03-14'</span>]
df = df.rename({<span class="hljs-string">'date'</span>: <span class="hljs-string">'Date'</span>, <span class="hljs-string">'Continent_Name'</span>: <span class="hljs-string">'Continent'</span>}, axis=<span class="hljs-string">'columns'</span>)
px.line(df, x=<span class="hljs-string">'Date'</span>, y=<span class="hljs-string">'Total Deaths per Million'</span>, color=<span class="hljs-string">'Continent'</span>)
</code></pre></div>



<div><h4 id="displaysamultiaxislinechartoftotalcovid19casesandchangesinpricesofbitcoindowjonesandgold">Displays a multi-axis line chart of total COVID-19 cases and changes in prices of Bitcoin, Dow Jones and gold:</h4><p></p><div id="e23ccacc-a456-478b-b467-7282a2165921" class="plotly-graph-div js-plotly-plot" style="height: 285px; width: 667px;"><div class="plot-container plotly"><div class="svg-container" style="position: relative; width: 666.997px; height: 285px;"><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="285" style="background: rgba(0, 0, 0, 0);"><defs id="defs-5cd3c9"><g class="clips"><clipPath id="clip5cd3c9xyplot" class="plotclip"><rect width="444" height="243"></rect></clipPath><clipPath id="clip5cd3c9xy2plot" class="plotclip"><rect width="444" height="243"></rect></clipPath><clipPath class="axesclip" id="clip5cd3c9x"><rect x="80" y="0" width="444" height="285"></rect></clipPath><clipPath class="axesclip" id="clip5cd3c9y"><rect x="0" y="24" width="666.997" height="243"></rect></clipPath><clipPath class="axesclip" id="clip5cd3c9xy"><rect x="80" y="24" width="444" height="243"></rect></clipPath><clipPath class="axesclip" id="clip5cd3c9y2"><rect x="0" y="24" width="666.997" height="243"></rect></clipPath><clipPath class="axesclip" id="clip5cd3c9xy2"><rect x="80" y="24" width="444" height="243"></rect></clipPath></g><g class="gradients"></g></defs><g class="bglayer"><rect class="bg" x="80" y="24" width="444" height="243" style="fill: rgb(229, 236, 246); fill-opacity: 1; stroke-width: 0;"></rect></g><g class="draglayer cursor-crosshair"><g class="xy"><rect class="nsewdrag drag" data-subplot="xy" x="80" y="24" width="444" height="243" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nwdrag drag cursor-nw-resize" data-subplot="xy" x="60" y="4" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nedrag drag cursor-ne-resize" data-subplot="xy" x="524" y="4" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="swdrag drag cursor-sw-resize" data-subplot="xy" x="60" y="267" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sedrag drag cursor-se-resize" data-subplot="xy" x="524" y="267" width="20" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ewdrag drag cursor-ew-resize" data-subplot="xy" x="124.4" y="267.5" width="355.20000000000005" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="wdrag drag cursor-w-resize" data-subplot="xy" x="80" y="267.5" width="44.400000000000006" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="edrag drag cursor-e-resize" data-subplot="xy" x="479.6" y="267.5" width="44.400000000000006" height="20" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy" x="59.5" y="48.3" width="20" height="194.4" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy" x="59.5" y="242.70000000000002" width="20" height="24.3" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy" x="59.5" y="24" width="20" height="24.3" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g><g class="xy2"><rect class="nsdrag drag cursor-ns-resize" data-subplot="xy2" x="524.5" y="48.3" width="20" height="194.4" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="sdrag drag cursor-s-resize" data-subplot="xy2" x="524.5" y="242.70000000000002" width="20" height="24.3" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect><rect class="ndrag drag cursor-n-resize" data-subplot="xy2" x="524.5" y="24" width="20" height="24.3" style="fill: transparent; stroke-width: 0; pointer-events: all;"></rect></g></g><g class="layer-below"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="cartesianlayer"><g class="subplot xy"><g class="layer-subplot"><g class="shapelayer"></g><g class="imagelayer"></g></g><g class="gridlayer"><g class="x"><path class="xgrid crisp" transform="translate(166,0)" d="M0,24v243" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(288.66999999999996,0)" d="M0,24v243" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="xgrid crisp" transform="translate(409.33,0)" d="M0,24v243" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y"><path class="ygrid crisp" transform="translate(0,225.1)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,183.2)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,141.3)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,99.39)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="ygrid crisp" transform="translate(0,57.49)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g><g class="y2"><path class="y2grid crisp" transform="translate(0,199.18)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="y2grid crisp" transform="translate(0,131.37)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path><path class="y2grid crisp" transform="translate(0,63.55)" d="M80,0h444" style="stroke: rgb(255, 255, 255); stroke-opacity: 1; stroke-width: 1px;"></path></g></g><g class="zerolinelayer"></g><path class="xlines-below"></path><path class="ylines-below"></path><g class="overlines-below"><path class="xy2-x"></path><path class="xy2-y"></path></g><g class="xaxislayer-below"></g><g class="yaxislayer-below"></g><g class="overaxes-below"><g class="xy2-x"></g><g class="xy2-y"></g></g><g class="plot" transform="translate(80, 24)" clip-path="url('#clip5cd3c9xyplot')"><g class="scatterlayer mlayer"><g class="trace scatter trace11027d" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"></g><g class="lines"><path class="js-line" d="M0,242.93L25.33,242.2L26,242.13L74,236.47L74.67,236.36L87.33,233.71L88,233.54L100.67,230L101.33,229.76L140.67,216.72L141.33,216.48L156,210.68L156.67,210.34L168.67,203.47L169.33,203L179.33,195.71L180,195.16L191.33,186.61L192,186.18L228,156.77L228.67,156.44L242,149.58L242.67,149.31L249.33,146.13L250,145.75L264.67,136.95L265.33,136.46L272,131.67L272.67,131.1L284.67,119.27L285.33,118.7L297.33,106.94L298,106.42L311.33,97.98L312,97.64L324.67,91.76L325.33,91.41L337.33,85.21L338,84.76L357.33,70.4L358,69.72L364.67,64.45L365.33,63.88L373.33,57.54L374,57.17L379.33,53.31L380,52.84L387.33,48.33L388,47.93L406,38.43L406.67,38.06L422.67,28.4L423.33,27.88L430.67,22.75L431.33,22.16L442,13.66L442.67,13.18L444,12.15" style="vector-effect: non-scaling-stroke; fill: none; stroke: rgb(239, 85, 59); stroke-opacity: 1; stroke-width: 2px; opacity: 1;"></path></g><g class="points"></g><g class="text"></g></g></g></g><g class="overplot"><g class="xy2" transform="translate(80, 24)" clip-path="url('#clip5cd3c9xy2plot')"><g class="scatterlayer mlayer"><g class="trace scatter trace655882" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"></g><g class="lines"><path class="js-line" d="M0,209.09L2.67,212.99L3.33,213.37L4.67,213.74L5.33,212.7L6.67,213.09L7.33,211.98L8,211.83L8.67,212.56L10,215.93L10.67,215.98L11.33,215.97L12,226.02L12.67,223.99L13.33,225.23L14,224.58L14.67,225.87L16,225.1L16.67,221.85L18,221.87L18.67,223.08L20,219.99L20.67,220.17L21.33,220.05L22,220.9L23.33,222.77L24,221.03L25.33,220.43L26,219.79L28,219.8L28.67,218.16L29.33,218.48L30,217.94L30.67,218.05L31.33,219.54L34,219.62L34.67,220.31L36,218.76L36.67,218.2L37.33,218.44L38,219.49L38.67,219.49L39.33,218.68L40.67,217.2L41.33,217.13L43.33,216.33L44,212.93L44.67,213.42L45.33,212.71L46.67,212.6L47.33,212.55L48.67,211.33L49.33,209L50.67,210.22L51.33,213.08L52,213.61L52.67,212.92L54,209.74L54.67,211.13L55.33,210.96L56,209.96L57.33,209.76L58,210.47L58.67,211.97L59.33,211.63L60,211.54L60.67,212.97L61.33,212.57L62,212.81L62.67,211.63L64,210.75L64.67,209.86L65.33,210.68L66,208.26L66.67,210.44L67.33,210.01L68,209.52L68.67,209.98L71.33,209.53L72,209.28L72.67,211.15L73.33,210.61L77.33,210.84L78,211.27L79.33,211.21L80,210.03L80.67,210.1L81.33,211.18L84,211.76L84.67,211.6L88.67,212L89.33,210.97L90,211.39L90.67,210.79L92.67,211.43L93.33,211.31L98.67,211.69L99.33,210.97L100.67,210.27L101.33,210.42L102.67,209.16L103.33,205.45L104,205.71L104.67,205.07L106,204.31L106.67,202.82L107.33,205.23L108,204.58L108.67,204.71L109.33,202.87L112.67,202.42L113.33,204.02L116,202.46L116.67,202.37L117.33,201.13L118,202.03L118.67,202.83L119.33,202.42L120.67,203.09L121.33,203.14L122,202.77L122.67,204.17L123.33,203.75L124,204.31L126,202.99L126.67,203.09L127.33,202.1L128,204L128.67,208L129.33,207.08L130,208.25L130.67,207.87L131.33,207.57L132,208.38L134.67,207.32L135.33,207.73L137.33,205.5L138,205.59L140,205.63L140.67,207.25L141.33,206.99L142,207.99L143.33,206.47L144,206.27L146.67,206.15L147.33,206.72L149.33,206.55L150,206.12L151.33,206.55L152,205.7L154.67,203.52L155.33,203.96L158.67,203.76L159.33,202.88L160,202.29L160.67,199.19L162.67,198.21L163.33,198.48L164,198.33L164.67,196.35L165.33,197.66L166,197.09L168,196.06L168.67,196.7L170,194.71L170.67,189.77L171.33,189.82L172,192.32L172.67,190.11L173.33,190.62L174,190.76L174.67,189.35L176,187.25L176.67,188.1L177.33,188.49L178,185.89L179.33,182.17L180,182.12L181.33,179.31L182,180.24L182.67,180.26L183.33,177.72L184,179L184.67,184.4L185.33,184.55L186,182.47L186.67,180.89L187.33,175.95L188,178.76L188.67,177.4L189.33,176.56L190,179.11L191.33,176.91L192,177.43L192.67,180.41L193.33,179.61L194.67,181.3L195.33,178.75L197.33,176.66L198,170.19L199.33,163.95L200,161.45L201.33,165.09L202,161.74L202.67,163.59L203.33,161.91L204.67,152.68L205.33,153.24L208,143.91L208.67,142.64L210,131L210.67,133.76L213.33,103.61L214,105.47L216,127.1L216.67,115.51L217.33,109.11L218,117.18L219.33,120.71L220,117.85L221.33,121.55L222,137.68L222.67,130.23L223.33,133.44L225.33,131.72L226,139.02L227.33,125.76L228,125.92L228.67,129.86L229.33,128.42L230.67,114.97L231.33,116.84L232.67,108.84L233.33,110.08L234.67,84.19L235.33,89.53L236,79.31L236.67,80.7L237.33,82.06L238,76.55L238.67,79.19L239.33,74.9L240,64.83L240.67,66.43L242,51.33L242.67,46.41L244,76.19L244.67,73.18L246,84.68L246.67,85.19L247.33,88.78L248,73.43L248.67,77.71L249.33,70.33L250,77.08L250.67,75.84L251.33,75.89L252,68.05L252.67,64.49L253.33,55.69L254.67,45.5L255.33,47.12L256,33.76L256.67,40.39L257.33,51.99L258,48.92L258.67,41.86L259.33,45.32L260.67,43.77L261.33,46.47L262,56.7L262.67,55.98L263.33,62.69L264,66.35L264.67,54.62L266.67,45.69L267.33,41.7L268.67,41.09L269.33,40.11L270,46.19L270.67,42.25L271.33,41.22L272,44.18L272.67,51.5L273.33,43.73L274,44L274.67,38.71L275.33,37.3L276,38.37L276.67,26.04L277.33,27.38L278,26.68L279.33,35.67L280,50.93L280.67,52.61L281.33,50.05L283.33,68.43L284,71.99L284.67,75.57L285.33,58.43L286,54.97L286.67,55.68L287.33,60.02L288,45.69L288.67,45.42L289.33,49.51L290,47.57L290.67,60.78L291.33,46.8L292,50.32L293.33,42.09L294,44.04L294.67,52.15L295.33,49.26L296,75.07L296.67,73.14L297.33,72.58L299.33,94.25L300,96.39L300.67,116.58L301.33,103.66L302,115.55L302.67,114.75L303.33,124.2L304,110.76L304.67,111.8L305.33,108.75L306,111.68L306.67,121.04L307.33,124.73L308,121.1L308.67,115.45L309.33,117.66L310.67,109.04L311.33,116.95L312,121.53L312.67,120.47L314,128.64L314.67,115.41L315.33,117.6L316,115.44L316.67,121.53L317.33,109.42L318.67,104.95L319.33,111.98L320,112.99L320.67,120.73L322,121.03L322.67,134.77L324.67,124.57L325.33,134.91L326,133.03L326.67,124.62L327.33,125.35L328,120.45L329.33,128.3L330,127.19L331.33,122.44L332,127.7L332.67,126.03L333.33,127.33L334,130.67L334.67,127.53L335.33,128.48L336,126.01L337.33,131.27L338,130.86L339.33,135.64L340,135.26L340.67,134.36L341.33,137.71L342,141.16L342.67,133.29L343.33,132.6L344,128.27L345.33,122.22L346,115.43L347.33,106.35L348,106.31L348.67,98.7L349.33,100.78L351.33,112.65L352,107.2L353.33,96.71L354,90.77L354.67,93.36L355.33,84.59L357.33,91.21L358,79.71L360,85.82L360.67,90.29L361.33,89.93L362,83.38L362.67,74.43L363.33,75.91L364.67,73.72L365.33,80.01L366,75.72L366.67,82.62L367.33,75.39L368,75.92L368.67,76.17L369.33,82.23L370,81.85L370.67,76.11L372,72.08L372.67,72.36L373.33,66.18L374,63.17L374.67,83.07L375.33,85.52L376,84.5L376.67,89.65L377.33,88.57L378,85.62L378.67,89.38L380,78.4L380.67,79.74L381.33,81.51L382,78.05L382.67,81.53L383.33,96.62L384,103.97L384.67,94.12L385.33,89.61L386,96.63L386.67,97.06L387.33,95.37L388.67,102.8L389.33,100.99L390.67,78.6L391.33,79.99L392.67,75.2L393.33,66.99L394,53.85L394.67,59.17L395.33,58.61L396,55.2L396.67,55.87L397.33,46.6L398,51.53L398.67,46.88L399.33,47.15L400,32.56L400.67,34.96L401.33,32.69L402,31.08L402.67,23.44L403.33,17.53L404,30.45L404.67,35.64L405.33,33.24L406,34.82L406.67,27.62L408,43.19L408.67,35.88L409.33,30.39L410,31.55L411.33,34.57L412,26.98L412.67,27.86L413.33,33.04L414,34.16L414.67,32.79L415.33,26.64L416,12.15L416.67,14.18L417.33,20.94L418,21.09L418.67,23.8L419.33,22.73L420,19.32L422.67,48.45L423.33,44.43L424,39.04L424.67,42.34L425.33,50.68L426,46.31L426.67,50.71L427.33,47.32L428,59.97L428.67,55.72L430,45.5L430.67,48.24L431.33,47.47L432,50.04L433.33,74.9L434,74.33L434.67,70.18L435.33,69.78L436,70.44L437.33,81.59L438,74.35L438.67,71.84L439.33,83.32L440,83.74L440.67,75.94L442,85.14L442.67,82.94L443.33,83.42L444,82.83" style="vector-effect: non-scaling-stroke; fill: none; stroke: rgb(99, 110, 250); stroke-opacity: 1; stroke-width: 2px; opacity: 1;"></path></g><g class="points"></g><g class="text"></g></g><g class="trace scatter trace06dc7f" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"></g><g class="lines"><path class="js-line" d="M0,209.09L2,210.71L2.67,212.13L3.33,212.56L4,212.05L5.33,211.01L6,211.95L6.67,210.55L7.33,211.71L8.67,212.82L9.33,213.62L10,214.43L10.67,213.03L12,217.6L12.67,215.23L14.67,218.81L15.33,217.56L16.67,218.94L17.33,220.03L19.33,220.73L20,218.2L20.67,217.6L21.33,215.98L22.67,216.8L23.33,216.53L24.67,216.74L25.33,217.91L26,217.35L26.67,217.78L30.67,214.58L31.33,214.68L33.33,214.98L34,214.31L35.33,214.8L36,213.96L39.33,214.88L40,214.83L42.67,214.09L43.33,214.13L44.67,213.84L45.33,214.58L49.33,214.4L50,213.85L52.67,214.53L53.33,215.15L56.67,213.53L57.33,214L58.67,213.68L59.33,213.69L65.33,212.52L66,212.48L70.67,209.97L71.33,210.33L72,210.67L72.67,212.9L74,212.26L74.67,212.2L80.67,211.67L81.33,212.52L82,212.16L82.67,213.03L88.67,211.65L89.33,211.51L91.33,212.2L92,211.76L94.67,211.08L95.33,210.81L98.67,211.04L99.33,210.84L100.67,211.07L101.33,211.29L108.67,210.86L109.33,210.41L114,209.49L114.67,209.58L124,208.87L124.67,208.67L127.33,208.68L128,208.14L129.33,209.3L130,209.49L134,209.86L134.67,209.73L138,209.57L138.67,209.87L142.67,210.88L143.33,210.44L150,209.28L150.67,209.73L152.67,208.75L153.33,208.65L157.33,208.73L158,208.9L161.33,209.02L162,209.05L164.67,210.1L165.33,211.23L170,209.64L170.67,208.99L172,208.74L172.67,208.4L174.67,207.78L175.33,208.16L178,207.12L178.67,207.32L180.67,207.94L181.33,207.81L185.33,207.17L186,207.28L189.33,207.1L190,206.8L198,206.87L198.67,206.7L202.67,206.9L203.33,206.82L212,206.07L212.67,205.81L217.33,205.87L218,206.08L225.33,205.94L226,206.7L226.67,206.34L227.33,207.08L231.33,205.8L232,205.68L240,205.13L240.67,205.27L245.33,205.38L246,205.95L248.67,205.39L249.33,205.54L250,205.96L250.67,205.27L259.33,203.63L260,203.91L270,203.06L270.67,202.95L280,202.13L280.67,202.17L282.67,202.49L283.33,202.22L291.33,201.99L292,201.61L294,201.36L294.67,201.38L296,202.76L296.67,202.24L298,201.83L298.67,201.86L305.33,201.88L306,201.71L314,201.55L314.67,201.73L319.33,202.23L320,202.48L321.33,202.89L322,202.65L326,201.81L326.67,201.87L329.33,201.51L330,201.33L335.33,201.18L336,201.13L339.33,201.45L340,201.73L341.33,202.31L342,201.66L344.67,200.96L345.33,200.93L360.67,200.66L361.33,201.12L364,200.75L364.67,200.67L373.33,200.79L374,200.87L384.67,201.96L385.33,201.35L388,201.23L388.67,201.91L389.33,201.8L390,202.46L391.33,202.01L392,202.14L394,201.77L394.67,201.36L399.33,201.17L400,200.72L408.67,200.19L409.33,200.09L421.33,199.7L422,199.96L427.33,200.65L428,201.19L430,200.91L430.67,201.69L431.33,202.24L432,201.5L434,201.06L434.67,200.8L436,200.17L436.67,200.17L438.67,200.16L439.33,200.29L444,201.15" style="vector-effect: non-scaling-stroke; fill: none; stroke: rgb(0, 204, 150); stroke-opacity: 1; stroke-width: 2px; opacity: 1;"></path></g><g class="points"></g><g class="text"></g></g><g class="trace scatter trace4e4bed" style="stroke-miterlimit: 2; opacity: 1;"><g class="fills"></g><g class="errorbars"></g><g class="lines"><path class="js-line" d="M0,209.09L1.33,209.42L2,209.56L2.67,209.56L3.33,211.11L5.33,210.54L6,209.52L9.33,208.89L10,208.86L12,210.6L12.67,212.1L14.67,212.71L15.33,211.91L16.67,212.86L17.33,212.74L19.33,211.05L20,209.15L22,209.89L22.67,209.91L24,209.93L24.67,210.72L25.33,210.82L26,209.85L30,209.04L30.67,207.6L34.67,207.79L35.33,207.93L36.67,208.47L37.33,208.39L38.67,208.78L39.33,207.76L42,208.02L42.67,208.1L48.67,208.66L49.33,207.89L52,208.44L52.67,208.25L56,207.55L56.67,207.69L58,207.31L58.67,207.92L60,207.79L60.67,207.94L63.33,208.07L64,207.59L66.67,207.83L67.33,208.39L68,207.96L68.67,208.82L74.67,207.86L75.33,207.93L81.33,207L82,207.07L85.33,206.44L86,206.85L90.67,205.99L91.33,206.32L98.67,205.98L99.33,205.44L103.33,203.63L104,203.35L108.67,202.2L109.33,201.59L110,201.17L110.67,202.02L112.67,201.73L113.33,203.6L116.67,202.86L117.33,202.53L118,202.24L118.67,203.07L120,203.56L120.67,203.61L124,203.82L124.67,202.94L128,203.56L128.67,203.7L132,203.59L132.67,203.35L135.33,203.28L136,203.18L139.33,203.55L140,203.89L143.33,205.12L144,205.02L150.67,204.24L151.33,204.6L154.67,203.8L155.33,204.5L158,204.21L158.67,204.17L164.67,204.08L165.33,204.75L167.33,204.64L168,204.55L170,204.37L170.67,203.34L171.33,203.24L172,203.9L173.33,205.22L174,204.77L175.33,204.82L176,204.55L181.33,205.06L182,205.29L186.67,206.76L187.33,206.8L189.33,205.55L190,205.57L192.67,204.86L193.33,205.6L198,205.16L198.67,204.52L207.33,204.45L208,204.4L211.33,203.19L212,204.12L212.67,204.01L213.33,205.61L217.33,205.28L218,205.7L225.33,205.27L226,205.39L228,205.25L228.67,205.16L230,205.68L230.67,205.64L231.33,206.53L232,206.08L236,205.79L236.67,205.86L242,206.59L242.67,206.38L244.67,206.38L245.33,206.82L246.67,207.81L247.33,207.84L251.33,208.52L252,208.66L252.67,208.79L253.33,208L261.33,207.55L262,207.57L264,207.83L264.67,207.68L268,208.06L268.67,207.8L277.33,207.63L278,207.01L280,206.86L280.67,206.93L283.33,206.77L284,206.76L291.33,206.63L292,205.99L294.67,205.54L295.33,205.57L296.67,205.82L297.33,205.53L302.67,204.68L303.33,204.63L310,204.11L310.67,204.85L312.67,204.38L313.33,204.33L319.33,205.09L320,206.84L323.33,206.79L324,206.66L328.67,206.9L329.33,206.79L336,206.16L336.67,206.19L341.33,206.12L342,206.08L346,206.33L346.67,206.31L352.67,206.2L353.33,207.12L356,207.75L356.67,207.31L358.67,206.73L359.33,206.65L370.67,206.03L371.33,206.12L372.67,205.85L373.33,206.03L377.33,206.5L378,206.48L380,206.46L380.67,207.23L383.33,207.08L384,206.79L388,207.32L388.67,207.61L389.33,207.9L390,207.21L398.67,206.43L399.33,206.37L400.67,206.99L401.33,207L404.67,206.39L405.33,206.32L411.33,206.4L412,206.53L412.67,207.04L413.33,206.44L415.33,205.82L416,205.74L422.67,205.06L423.33,205.26L427.33,206.48L428,206.6L440.67,207.06L441.33,206.37L444,206.43" style="vector-effect: non-scaling-stroke; fill: none; stroke: rgb(255, 161, 90); stroke-opacity: 1; stroke-width: 2px; opacity: 1;"></path></g><g class="points"></g><g class="text"></g></g></g></g></g><path class="xlines-above crisp" d="M79,267.5H525" style="fill: none; stroke-width: 1px; stroke: rgb(255, 255, 255); stroke-opacity: 1;"></path><path class="ylines-above crisp" d="M79.5,24V267" style="fill: none; stroke-width: 1px; stroke: rgb(255, 255, 255); stroke-opacity: 1;"></path><g class="overlines-above"><path class="xy2-x crisp" d="M0,0" style="fill: none;"></path><path class="xy2-y crisp" d="M524.5,24V267" style="fill: none; stroke-width: 1px; stroke: rgb(255, 255, 255); stroke-opacity: 1;"></path></g><g class="xaxislayer-above"><g class="xtick"><text text-anchor="middle" x="0" y="282.4" data-unformatted="Jul 2020" data-math="N" transform="translate(166,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jul 2020</text></g><g class="xtick"><text text-anchor="middle" x="0" y="282.4" data-unformatted="Jan 2021" data-math="N" transform="translate(288.66999999999996,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jan 2021</text></g><g class="xtick"><text text-anchor="middle" x="0" y="282.4" data-unformatted="Jul 2021" data-math="N" transform="translate(409.33,0)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Jul 2021</text></g></g><g class="yaxislayer-above"><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="0" data-math="N" transform="translate(0,267)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">0</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="50M" data-math="N" transform="translate(0,225.1)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">50M</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="100M" data-math="N" transform="translate(0,183.2)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">100M</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="150M" data-math="N" transform="translate(0,141.3)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">150M</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="200M" data-math="N" transform="translate(0,99.39)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">200M</text></g><g class="ytick"><text text-anchor="end" x="76.6" y="4.199999999999999" data-unformatted="250M" data-math="N" transform="translate(0,57.49)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">250M</text></g></g><g class="overaxes-above"><g class="xy2-x"></g><g class="xy2-y"><g class="y2tick"><text text-anchor="start" x="527.4" y="4.199999999999999" data-unformatted="0" data-math="N" transform="translate(0,267)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">0</text></g><g class="y2tick"><text text-anchor="start" x="527.4" y="4.199999999999999" data-unformatted="200" data-math="N" transform="translate(0,199.18)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">200</text></g><g class="y2tick"><text text-anchor="start" x="527.4" y="4.199999999999999" data-unformatted="400" data-math="N" transform="translate(0,131.37)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">400</text></g><g class="y2tick"><text text-anchor="start" x="527.4" y="4.199999999999999" data-unformatted="600" data-math="N" transform="translate(0,63.55)" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">600</text></g></g></g></g><g class="subplot xy2"></g></g><g class="polarlayer"></g><g class="ternarylayer"></g><g class="geolayer"></g><g class="funnelarealayer"></g><g class="pielayer"></g><g class="treemaplayer"></g><g class="sunburstlayer"></g><g class="glimages"></g></svg><div class="gl-container"></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="285"><defs id="topdefs-5cd3c9"><g class="clips"></g><clipPath id="legend5cd3c9"><rect width="108" height="86" x="0" y="0"></rect></clipPath></defs><g class="indicatorlayer"></g><g class="layer-above"><g class="imagelayer"></g><g class="shapelayer"></g></g><g class="infolayer"><g class="legend" pointer-events="all" transform="translate(558.997, 24)"><rect class="bg" shape-rendering="crispEdges" style="stroke: rgb(68, 68, 68); stroke-opacity: 1; fill: rgb(0, 0, 0); fill-opacity: 0; stroke-width: 0px;" width="108" height="86" x="0" y="0"></rect><g class="scrollbox" transform="translate(0, 0)" clip-path="url('#legend5cd3c9')"><g class="groups"><g class="traces" transform="translate(0, 14.5)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Total Cases" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Total Cases</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(239, 85, 59); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="102.84590911865234" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g><g class="traces" transform="translate(0, 33.5)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Bitcoin" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Bitcoin</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(99, 110, 250); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="102.84590911865234" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g><g class="traces" transform="translate(0, 52.5)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Dow Jones" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Dow Jones</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(0, 204, 150); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="102.84590911865234" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g><g class="traces" transform="translate(0, 71.5)" style="opacity: 1;"><text class="legendtext user-select-none" text-anchor="start" x="40" y="4.680000000000001" data-unformatted="Gold" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 12px; fill: rgb(42, 63, 95); fill-opacity: 1; white-space: pre;">Gold</text><g class="layers" style="opacity: 1;"><g class="legendfill"></g><g class="legendlines"><path class="js-line" d="M5,0h30" style="fill: none; stroke: rgb(255, 161, 90); stroke-opacity: 1; stroke-width: 2px;"></path></g><g class="legendsymbols"><g class="legendpoints"></g></g></g><rect class="legendtoggle" pointer-events="all" x="0" y="-9.5" width="102.84590911865234" height="19" style="cursor: pointer; fill: rgb(0, 0, 0); fill-opacity: 0;"></rect></g></g></g><rect class="scrollbar" rx="20" ry="3" width="0" height="0" style="fill: rgb(128, 139, 164); fill-opacity: 1;" x="0" y="0"></rect></g><g class="g-gtitle"></g><g class="g-xtitle"></g><g class="g-ytitle"><text class="ytitle" transform="rotate(-90,21.091601562500003,145.5)" x="21.091601562500003" y="145.5" text-anchor="middle" data-unformatted="Total Cases" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">Total Cases</text></g><g class="g-y2title"><text class="y2title" transform="rotate(-90,572.42739944458,145.5)" x="572.42739944458" y="145.5" text-anchor="middle" data-unformatted="%" data-math="N" style="font-family: &quot;Open Sans&quot;, verdana, arial, sans-serif; font-size: 14px; fill: rgb(42, 63, 95); opacity: 1; font-weight: normal; white-space: pre;">%</text></g></g><g class="menulayer"></g><g class="zoomlayer"></g></svg><div class="modebar-container" style="position: absolute; top: 0px; right: 0px; width: 100%;"><div id="modebar-5cd3c9" class="modebar"><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Download plot as a png" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m500 450c-83 0-150-67-150-150 0-83 67-150 150-150 83 0 150 67 150 150 0 83-67 150-150 150z m400 150h-120c-16 0-34 13-39 29l-31 93c-6 15-23 28-40 28h-340c-16 0-34-13-39-28l-31-94c-6-15-23-28-40-28h-120c-55 0-100-45-100-100v-450c0-55 45-100 100-100h800c55 0 100 45 100 100v450c0 55-45 100-100 100z m-400-550c-138 0-250 112-250 250 0 138 112 250 250 250 138 0 250-112 250-250 0-138-112-250-250-250z m365 380c-19 0-35 16-35 35 0 19 16 35 35 35 19 0 35-16 35-35 0-19-16-35-35-35z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn active" data-title="Zoom" data-attr="dragmode" data-val="zoom" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000-25l-250 251c40 63 63 138 63 218 0 224-182 406-407 406-224 0-406-182-406-406s183-406 407-406c80 0 155 22 218 62l250-250 125 125z m-812 250l0 438 437 0 0-438-437 0z m62 375l313 0 0-312-313 0 0 312z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Pan" data-attr="dragmode" data-val="pan" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m1000 350l-187 188 0-125-250 0 0 250 125 0-188 187-187-187 125 0 0-250-250 0 0 125-188-188 186-187 0 125 252 0 0-250-125 0 187-188 188 188-125 0 0 250 250 0 0-126 187 188z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Zoom in" data-attr="zoom" data-val="in" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m1 787l0-875 875 0 0 875-875 0z m687-500l-187 0 0-187-125 0 0 187-188 0 0 125 188 0 0 187 125 0 0-187 187 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Zoom out" data-attr="zoom" data-val="out" data-toggle="false" data-gravity="n"><svg viewBox="0 0 875 1000" class="icon" height="1em" width="1em"><path d="m0 788l0-876 875 0 0 876-875 0z m688-500l-500 0 0 125 500 0 0-125z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Autoscale" data-attr="zoom" data-val="auto" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="m250 850l-187 0-63 0 0-62 0-188 63 0 0 188 187 0 0 62z m688 0l-188 0 0-62 188 0 0-188 62 0 0 188 0 62-62 0z m-875-938l0 188-63 0 0-188 0-62 63 0 187 0 0 62-187 0z m875 188l0-188-188 0 0-62 188 0 62 0 0 62 0 188-62 0z m-125 188l-1 0-93-94-156 156 156 156 92-93 2 0 0 250-250 0 0-2 93-92-156-156-156 156 94 92 0 2-250 0 0-250 0 0 93 93 157-156-157-156-93 94 0 0 0-250 250 0 0 0-94 93 156 157 156-157-93-93 0 0 250 0 0 250z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Reset axes" data-attr="zoom" data-val="reset" data-toggle="false" data-gravity="n"><svg viewBox="0 0 928.6 1000" class="icon" height="1em" width="1em"><path d="m786 296v-267q0-15-11-26t-25-10h-214v214h-143v-214h-214q-15 0-25 10t-11 26v267q0 1 0 2t0 2l321 264 321-264q1-1 1-4z m124 39l-34-41q-5-5-12-6h-2q-7 0-12 3l-386 322-386-322q-7-4-13-4-7 2-12 7l-35 41q-4 5-3 13t6 12l401 334q18 15 42 15t43-15l136-114v109q0 8 5 13t13 5h107q8 0 13-5t5-13v-227l122-102q5-5 6-12t-4-13z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a rel="tooltip" class="modebar-btn" data-title="Toggle Spike Lines" data-attr="_cartesianSpikesEnabled" data-val="on" data-toggle="false" data-gravity="n"><svg viewBox="0 0 1000 1000" class="icon" height="1em" width="1em"><path d="M512 409c0-57-46-104-103-104-57 0-104 47-104 104 0 57 47 103 104 103 57 0 103-46 103-103z m-327-39l92 0 0 92-92 0z m-185 0l92 0 0 92-92 0z m370-186l92 0 0 93-92 0z m0-184l92 0 0 92-92 0z" transform="matrix(1.5 0 0 -1.5 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn active" data-title="Show closest data on hover" data-attr="hovermode" data-val="closest" data-toggle="false" data-gravity="ne"><svg viewBox="0 0 1500 1000" class="icon" height="1em" width="1em"><path d="m375 725l0 0-375-375 375-374 0-1 1125 0 0 750-1125 0z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a><a rel="tooltip" class="modebar-btn" data-title="Compare data on hover" data-attr="hovermode" data-val="x" data-toggle="false" data-gravity="ne"><svg viewBox="0 0 1125 1000" class="icon" height="1em" width="1em"><path d="m187 786l0 2-187-188 188-187 0 0 937 0 0 373-938 0z m0-499l0 1-187-188 188-188 0 0 937 0 0 376-938-1z" transform="matrix(1 0 0 -1 0 850)"></path></svg></a></div><div class="modebar-group"><a href="https://plotly.com/" target="_blank" data-title="Produced with Plotly" class="modebar-btn plotlyjsicon modebar-btn--logo"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 132 132" height="1em" width="1em"><defs><style>.cls-1 {fill: #3f4f75;} .cls-2 {fill: #80cfbe;} .cls-3 {fill: #fff;}</style></defs><title>plotly-logomark</title><g id="symbol"><rect class="cls-1" width="132" height="132" rx="6" ry="6"></rect><circle class="cls-2" cx="78" cy="54" r="6"></circle><circle class="cls-2" cx="102" cy="30" r="6"></circle><circle class="cls-2" cx="78" cy="30" r="6"></circle><circle class="cls-2" cx="54" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="30" r="6"></circle><circle class="cls-2" cx="30" cy="54" r="6"></circle><path class="cls-3" d="M30,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,30,72Z"></path><path class="cls-3" d="M78,72a6,6,0,0,0-6,6v24a6,6,0,0,0,12,0V78A6,6,0,0,0,78,72Z"></path><path class="cls-3" d="M54,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,54,48Z"></path><path class="cls-3" d="M102,48a6,6,0,0,0-6,6v48a6,6,0,0,0,12,0V54A6,6,0,0,0,102,48Z"></path></g></svg></a></div></div></div><svg class="main-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="666.997" height="285"><g class="hoverlayer"></g></svg></div></div></div><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install pandas lxml selenium plotly</span>
<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd, selenium.webdriver, io, plotly.graph_objects <span class="hljs-keyword">as</span> go

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    covid, (bitcoin, gold, dow) = get_covid_cases(), get_tickers()
    df = wrangle_data(covid, bitcoin, gold, dow)
    display_data(df)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_covid_cases</span><span class="hljs-params">()</span>:</span>
    url = <span class="hljs-string">'https://catalog.ourworldindata.org/garden/covid/latest/compact/compact.csv'</span>
    df = pd.read_csv(url, parse_dates=[<span class="hljs-string">'date'</span>])
    df = df[df.country == <span class="hljs-string">'World'</span>]
    s = df.set_index(<span class="hljs-string">'date'</span>).total_cases
    <span class="hljs-keyword">return</span> s.rename(<span class="hljs-string">'Total Cases'</span>)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_tickers</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">with</span> selenium.webdriver.Chrome() <span class="hljs-keyword">as</span> driver:
        driver.implicitly_wait(<span class="hljs-number">10</span>)
        symbols = {<span class="hljs-string">'Bitcoin'</span>: <span class="hljs-string">'BTC-USD'</span>, <span class="hljs-string">'Gold'</span>: <span class="hljs-string">'GC=F'</span>, <span class="hljs-string">'Dow Jones'</span>: <span class="hljs-string">'%5EDJI'</span>}
        <span class="hljs-keyword">return</span> [get_ticker(driver, name, symbol) <span class="hljs-keyword">for</span> name, symbol <span class="hljs-keyword">in</span> symbols.items()]

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_ticker</span><span class="hljs-params">(driver, name, symbol)</span>:</span>
    url = <span class="hljs-string">f'https://finance.yahoo.com/quote/<span class="hljs-subst">{symbol}</span>/history/'</span>
    driver.get(url + <span class="hljs-string">'?period1=1579651200&amp;period2=9999999999'</span>)
    <span class="hljs-keyword">if</span> buttons := driver.find_elements(<span class="hljs-string">'xpath'</span>, <span class="hljs-string">'//button[@name="reject"]'</span>):
        buttons[<span class="hljs-number">0</span>].click()
    html = io.StringIO(driver.page_source)
    dataframes = pd.read_html(html, parse_dates=[<span class="hljs-string">'Date'</span>])
    s = dataframes[<span class="hljs-number">0</span>].set_index(<span class="hljs-string">'Date'</span>).Open
    <span class="hljs-keyword">return</span> s.rename(name)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrangle_data</span><span class="hljs-params">(covid, bitcoin, gold, dow)</span>:</span>
    df = pd.concat([bitcoin, gold, dow], axis=<span class="hljs-number">1</span>)  <span class="hljs-comment"># Creates table by joining columns on dates.</span>
    df = df.sort_index().interpolate()            <span class="hljs-comment"># Sorts rows by date and interpolates NaN-s.</span>
    df = df.loc[<span class="hljs-string">'2020-02-23'</span>:<span class="hljs-string">'2021-12-20'</span>]        <span class="hljs-comment"># Keeps rows between specified dates.</span>
    df = (df / df.iloc[<span class="hljs-number">0</span>]) * <span class="hljs-number">100</span>                  <span class="hljs-comment"># Calculates percentages relative to day 1.</span>
    df = df.join(covid)                           <span class="hljs-comment"># Adds column with covid cases.</span>
    <span class="hljs-keyword">return</span> df.sort_values(df.index[<span class="hljs-number">-1</span>], axis=<span class="hljs-number">1</span>)   <span class="hljs-comment"># Sorts columns by last day's value.</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">display_data</span><span class="hljs-params">(df)</span>:</span>
    figure = go.Figure()
    <span class="hljs-keyword">for</span> col_name <span class="hljs-keyword">in</span> reversed(df.columns):
        yaxis = <span class="hljs-string">'y1'</span> <span class="hljs-keyword">if</span> col_name == <span class="hljs-string">'Total Cases'</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'y2'</span>
        trace = go.Scatter(x=df.index, y=df[col_name], yaxis=yaxis, name=col_name)
        figure.add_trace(trace)
    figure.update_layout(
        width=<span class="hljs-number">944</span>,
        height=<span class="hljs-number">423</span>,
        yaxis1=dict(title=<span class="hljs-string">'Total Cases'</span>, rangemode=<span class="hljs-string">'tozero'</span>),
        yaxis2=dict(title=<span class="hljs-string">'%'</span>, rangemode=<span class="hljs-string">'tozero'</span>, overlaying=<span class="hljs-string">'y'</span>, side=<span class="hljs-string">'right'</span>),
        colorway=[<span class="hljs-string">'#EF553B'</span>, <span class="hljs-string">'#636EFA'</span>, <span class="hljs-string">'#00CC96'</span>, <span class="hljs-string">'#FFA152'</span>],
        legend=dict(x=<span class="hljs-number">1.08</span>)
    )
    figure.show()

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()
</code></pre></div>



<div><h2 id="appendix"><a href="https://gto76.github.io/python-cheatsheet/#appendix" name="appendix">#</a>Appendix</h2><div><h3 id="cython">Cython</h3><p><strong>Library that compiles Python-like code into C.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment"># $ pip3 install cython</span>
<span class="hljs-keyword">import</span> pyximport; pyximport.install()                <span class="hljs-comment"># Module that runs Cython scripts.</span>
<span class="hljs-keyword">import</span> &lt;cython_script&gt;                               <span class="hljs-comment"># Script must have '.pyx' extension.</span>
</code></pre></div></div>



<div><h4 id="allcdefdefinitionsareoptionalbuttheycontributetothespeedup">All <code class="python hljs"><span class="hljs-string">'cdef'</span></code> definitions are optional, but they contribute to the speed-up:</h4><pre><code class="python language-python hljs"><span class="hljs-keyword">cdef</span> &lt;type&gt; &lt;var_name&gt; [= &lt;obj/var&gt;]                 <span class="hljs-comment"># Either Python or C type variable.</span>
<span class="hljs-keyword">cdef</span> &lt;ctype&gt; *&lt;pointer_name&gt; [= &amp;&lt;var&gt;]              <span class="hljs-comment"># Use &lt;pointer&gt;[0] to get the value.</span>
<span class="hljs-keyword">cdef</span> &lt;ctype&gt;[size] &lt;array_name&gt; [= &lt;coll/array&gt;]     <span class="hljs-comment"># Also `&lt;ctype&gt;[:] &lt;mview&gt; = &lt;array&gt;`.</span>
<span class="hljs-keyword">cdef</span> &lt;ctype&gt; *&lt;array_name&gt; [= &lt;coll/array/pointer&gt;]  <span class="hljs-comment"># E.g. `&lt;&lt;ctype&gt; *&gt; malloc(n_bytes)`.</span>
</code></pre></div>

<pre><code class="python language-python hljs"><span class="hljs-keyword">cdef</span> &lt;type&gt; &lt;func_name&gt;(&lt;type&gt; [*]&lt;arg_name&gt;): ...   <span class="hljs-comment"># Omitted types default to `object`.</span>
</code></pre>
<pre><code class="python language-python hljs"><span class="hljs-keyword">cdef</span> <span class="hljs-class"><span class="hljs-keyword">class</span> &lt;<span class="hljs-title">class_name</span>&gt;:</span>                             <span class="hljs-comment"># Also `cdef struct &lt;struct_name&gt;:`.</span>
    <span class="hljs-keyword">cdef</span> <span class="hljs-keyword">public</span> &lt;type&gt; [*]&lt;attr_name&gt;                <span class="hljs-comment"># Also `... &lt;ctype&gt; [*]&lt;field_name&gt;`.</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, &lt;type&gt; &lt;arg_name&gt;)</span>:</span>           <span class="hljs-comment"># Also `cdef __dealloc__(self):`.</span>
        self.&lt;attr_name&gt; = &lt;arg_name&gt;                <span class="hljs-comment"># Also `... free(&lt;array/pointer&gt;)`.</span>
</code></pre>
<div><h3 id="virtualenvironments">Virtual Environments</h3><p><strong>System for installing libraries directly into project's directory.</strong></p><pre><code class="python hljs">$ python3 -m venv NAME      <span class="hljs-comment"># Creates virtual environment in current directory.</span>
$ source NAME/bin/activate  <span class="hljs-comment"># Activates it. On Windows run `NAME\Scripts\activate`.</span>
$ pip3 install LIBRARY      <span class="hljs-comment"># Installs the library into active environment.</span>
$ python3 FILE              <span class="hljs-comment"># Runs the script in active environment. Also `./FILE`.</span>
$ deactivate                <span class="hljs-comment"># Deactivates the active virtual environment.</span>
</code></pre></div>


<div><h3 id="basicscripttemplate">Basic Script Template</h3><p><strong>Run the script with <code class="python hljs"><span class="hljs-string">'$ python3 FILE'</span></code> or <code class="python hljs"><span class="hljs-string">'$ chmod u+x FILE; ./FILE'</span></code>. To automatically start the debugger when uncaught exception occurs run <code class="python hljs"><span class="hljs-string">'$ python3 -m pdb -cc FILE'</span></code>.</strong></p><pre><code class="python language-python hljs"><span class="hljs-comment">#!/usr/bin/env python3</span>
<span class="hljs-comment">#</span>
<span class="hljs-comment"># Usage: .py</span>
<span class="hljs-comment">#</span>

<span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv, exit
<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict, namedtuple
<span class="hljs-keyword">from</span> dataclasses <span class="hljs-keyword">import</span> make_dataclass
<span class="hljs-keyword">from</span> enum <span class="hljs-keyword">import</span> Enum
<span class="hljs-keyword">import</span> functools <span class="hljs-keyword">as</span> ft, itertools <span class="hljs-keyword">as</span> it, operator <span class="hljs-keyword">as</span> op, re


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">pass</span>


<span class="hljs-comment">###</span>
<span class="hljs-comment">##  UTIL</span>
<span class="hljs-comment">#</span>

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span><span class="hljs-params">(filename)</span>:</span>
    <span class="hljs-keyword">with</span> open(filename, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:
        <span class="hljs-keyword">return</span> file.readlines()


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:
    main()
</code></pre></div>


<div><h2 id="index"><a href="https://gto76.github.io/python-cheatsheet/#index" name="index">#</a>Index</h2><ul><li><strong>Ctrl+F / âF is usually sufficient.</strong></li>
<li><strong>Searching <code class="python hljs"><span class="hljs-string">'#&lt;title&gt;'</span></code> will limit the search to the titles.</strong></li>
<li><strong>Click on the title's <code class="python hljs"><span class="hljs-string">'#'</span></code> to get a link to its section.</strong></li>
</ul></div>
 

  <footer>
    <aside>September 16, 2025</aside>
    <a href="https://gto76.github.io/" rel="author">Jure Å orn</a>
  </footer>

  <a id="return-to-top"><i class="icon-chevron-up"></i></a>

  
  
  
  
  <svg id="js-plotly-tester" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position: absolute; left: -10000px; top: -10000px; width: 9000px; height: 9000px; z-index: 1;"><path class="js-reference-point" d="M0,0H1V1H0Z" style="stroke-width: 0; fill: black;"></path></svg>
  



</body></html>
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: image/png
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/web/image_orig_blue6.png

PNG

   IHDR     )   Ì  ñzTXtRaw profile type exif  xÚí[äºDÿ±
-7§Ùì`?ÇÙ¥Û-IùVÝ¬ÌbA î ×ÿþ¯ëþö·¿Yô1¹k+½ÏWê©Áæ?_×äø¯|6õã}OÏÏçËñÊßÍ¿ý!ôï§À{ä=~m§¯_Û}?ØàSþûÖøn¿oßá{¢ö§¡ï¢F¤Ïû{À×PíöÉùN»ôV5{>Ú:ã9`~þr×wd!<rÅ§¤rk­XÏ¾4>ó{ð)äJ×/5Æ}8ÏKqÐïö|.1ÆÓ7ß×j?.ÿèÏ©»\ÏÏöfÔËâàé@ÃÅ+RÌÏMvðyµ?~ÿûW;ü»¯×Ðkè5ôz½^C¯¡×Ðkè5ôz½^C¯¡×Ðkè5ôz½^C¯¡×Ðkè5ôz½^Cÿ=_º±!vÿ×»7\=»4|úý=|¶wëá¹äk#~?ôðûv÷ëºå¯7ü¼ë¿ÜòsçKü};SûXúó¾QìïþºCC·~Þu;Få¹C#={nÚhÿzÇ¿ì÷OïäpÿÎ­oB¾^C¯¡×Ðkè5ôz½^C¯¡×Ðkè5ôz½^C¯¡×Ðkè5ôz½^C¯¡×Ðkè5ôú÷ýÜÊñÇ³D~>ýñ(8ÝáÍù¿<K$´¾÷tüö_~ÞÿévË¿ýúCü9øí!&ç{ðûöÿ>d÷3ïëÞÝî=ÙTROå;©_S|>±Kñ9ªøâ|å-óK}¾;ßÍ¿,ùí|/ë,úkÉ¶»v÷e!&Æ[Îaøll±VüÜ-Â·ÝPc;¶â
G÷Äð3{NÛÓ-g3oc×`ÓsDþWßî?Ùù>ÏW1/ã||Å¸@grcÔOv#"v¿NÍ}ÿùeOâ%=Ï6ßß`~G@GvÌ¼n%²º¿p§ÎÆ"ðÅ¢ËVÌ×ªlh0ôSDÀrAc!8-àÜÁ!Õ]CÍÝçy,±ÄJlz+¥LþÔÔÈ¡cN9çkn¹çQbI%RjÑ£|F5Õ\«µ¶Úëh±¥[iµµÖÛè¡Çzî¥×ÞzïcpÎåÁÑÆaÆfeV7Ûìs,Òg¥WYuµÕ×ØaÇvÞe×ÝvßãØ!N:ùSO;ýKªÝxÓÍî[o»ý¨}ÃúßÿAÔìµðDJ;Ö¨±µÖ_&Lp3"eª¿*$tPÌ|³"§ù®;¨r`YÁÙ¦Át,äk?±ãN¡Ãÿç¸¹Z~âþ/s
Ý¹Û?Úóð¤õD§Û§}¤ú.ç?15|À;ðÅ'?ÆPµò1F7úm{¬öµ¼³g1j5ÇÑ9õ²pû2W·Ó3£¶6ÞlÝÕ|g½~aáëmN½w­Ú5fÝXZCx/×î)ãÃÝ±ÓçmÑYÚmµx³í:3Ä°·á_¿qM[£íÄRs¥9GêDðØN=.2Ñ÷ãÚíØe(cptÛ[W*çÞaò§íÉ£æÃ¦¤[³õôÑ±¨ð;Ý§ Ò3¶pË>yYï&«à°Ä×øKâA1}ÌÌûð=Oß%F>íQâóÔîAG¥Lþ¶v¥sbÞ§³ï±»Tt;¡Íq|»«4sùË9ÓüÝ]fîÊ¾X´ìàìáTðµ®Âï«ÝHÞíR¾×4w8õÆÁ1
42 k kNÞ
°?>ï50øÕç1`2Asî
e±oêÇÙT¨gR£[î~àÖÛ¾í	3j«mH¶3ïRÕCæÌ¹_òTií¤ôØÑ¿ÚÖs«)ø~ß°îb mÞc%GkeÚ¡XJd:ã+Ptü4ð}´,§éqd¹P
oÔ[Â]´UXl½ÂlkÜµð)jæ.¬ÓýºFnhàÅ=|ä\DösÏÙnÔè¸}P»°]°©P«N~ºpý@®à/»gí¬:yÈr<Úí¶ÉìâJEá`ìo2UµwÑGvNDk¢ìxÍP(¿Fz¡[0ÛÀß³< Õ*%j:v¤2IÛmcfàÖæ\çÎBuNÎ§
	XÃñiSg·Q5ì
à§º±±aë@ùIÒ3ñßÅ %¾:¼'öÞðó(H¾§Më%´FÎÕú>u¸¾÷¬á"OAçåLB>Tø «ÔáHu³£Äi¢!ºÃmºj,8~PD¤XËÀöó®^ØwÄÒWÇð9JeV(©wMõ/Yé@|DoDÃs¸ì,%×X6ÙÓv¾]Úchs]Æ^!X·Z%ÊÐÔöm²k8P#ïÄ&<dw2ÚD]t¹48(Qk¬qIÛBFÜ$ü§âp!h²LJ´1¢óD¨yzð~,¹ÌÙVèKÄ P\TÙ
°¤¬ÉÎAßÀD"þõÀÂx çh;¢`ar=È§³¢ZðW$3Án«$o8p<5D B%ñ)R¯BÅ¦Kº8Ù=dc!ÍÜbÙ^:ÐXLÔ%¤Ôläµ=L j<þ}SÔ¤G¢d}bÜµwÊ0!7@q=ÈÌ#Oç	ð#dÛÒ¡OA×á3à ¸£GÔìx<b{Òò¼3­6ÕS¿HÔì\MÐCøqî1·¡I¦&NÔÁfRÛ5|=0NÊ°@¶­îµ§úKo*e·NùMp·0´ë(ÎT(ÓvvWy½bkÐÈnÂP»£ç3 Ü$yÐu­ÝÎrl R!s²·xJÎmøÖ·hmùOÂ.	å*zá,rÑeEÇaüJl"0ÄxîI*}IËNÕSÁ/²³ÃÄç1Õ
µ2¨´*¬³qük1¨_ xw@xqX{¥ÏóÒ/¦'	HÇªubGÖ<tÔ¤.ØUÔ!|õDÉª Äx\V	îÖòEËu1^@Z×?¾dG  N*Qtåÿ$÷HóÐü\agò¸sdü k*Mg Ê·q@ m\PKçE)S`EÒ ¤ÜàõÆ¯JÄ
´h.¤ÖÑCzþd¡½özAU*	X´	G	îxn©ûØZH\§Ãj¶³
¨ªøMô&@ÕgÀ>§è}§­¶
pÌÛ¹×¼­ty4¨¤} Ãfèf§¥õçsmíÆs×¼ªÝODy&g7¬íÑ¿ !k!)ÁÜª g¯ÇB¸[Ý6ÜÊ^B¸C®Ü!Vè1\){2)Òa\ÝeÀ=HrÂ»>øªEPöäLÙC6Èê.ÉW .Æw
ßS§ã±4ÐÙÔíÈT!;Ê|GE§Gm]j.º#öèÞ R¡Ã¡Æ 9Ù°,À¦k$!7´¸DÔ ha}´¡m ¤ªäshnNJuÉíý@|®Û½Xs%N5	L*{¼Q~Ò§xò\%´P9à/8]¨ÜÃ> YÄS eNÃ«ÛóÇUê¥I?-F÷.jìcep2Á(T5OSêÝ#¸:%>¹8Üª2ù5Õ	@!ÒËL+Mdm{¹KÊyL lÓ${AT0-8$¹ÎªÒW§9L^ÿéÐ6|ÞK
À*ãPR" 0Æû9!pÀ6dj·sZý¡ÎìanoÒÔÜ±ç+]Q9¯ðÃq´Ætô<÷&uyDÒquÜ%ª÷\Ç*
ªô9Î½~:Ðì<`Ü0Lå0ÉÄÆdWyV_Ðæ±2 xî"ñÚµiA¿àtüò	RàXç¾B@]*%ñ} Ùô¢g²§ ñ®ãqTð®åéE	©Mä"Lrô.%NÛÖÁ¥@8{?ëPB:¬dNÁH*|þáYº}{µÀ%>³$¤P2PÝzjÏX÷fM;	¢ ±P¸ô]%1BÕR¥Ä-@"-â¡ÿ+Ëuµ4Ê#$7-AAC^nmÂ{Z 1,È8@¦úil6mªÄ>ÔÆð«e/dªX(À=Uÿ9L½nukHJAsç0ÐÄ©§Ù¾ 	é.HnS	÷±)2,ÅÀOÒäsA'tÔM©Ítcª5Ð¯©üDiÜ]øTI'Ë/Pg8b2µ¡rÆ¬F^ íHÈ-íÇ É¥J è´FdbhëBÐu¨ÚF#ÂHWðÊÓ¡®1]¡©ä61L!ÁZ5aøýé+T*ºTx7¸ÐÔ·ÔC§ÂÜÍa^â ¨Ï +éyÆdp+ H¿aæ£üqA¼ËéeÌh¾-'!aG?ð'Ú)Óº4W°c=ùYÝ¥÷¯è¯h<ðÎñö@ÂQä,êÀá½(Î»SÃqhÎH1A¼"ÂÏ})FË´@Ó0O}MtdU`Ç¢thkdàdAý[UV|%ºZ°:SjR·1ë°ÇÙUÀª%°h/¸?ø*¶3«-¨¶Tºãk"é¥­ÁÏâ2cI¿;e²ÜÂëq2cjb9àÎ¢:èËR¿ÉIÉÁPÏ
z~7´þÖm,­P·.o-ê®8oH¢¥:KÄei%'	 P~l_&À¨Î®ÆGu¸i 9­ç¦Ç£/Â/=qê°8d 4Ä(71 !¾c m º­Q}Ë¾¿at?²]´ÄÀpÜ¬ezäû¹x×9wG52=-Þð(ûSÅWQhÌD7Ð¡	:ì­%; ²£«+ÅrQ:Zè´´¾®Uî¬-qk æ$@§Ù§Y17oW$öÂEÃt¸Ñd~IÞM_t¤ÒÂ#ùÀS{$g[Yè¯©k
l6\dðy'íYñ¡ë Èk22jQ¬8°.´_Ä'Äù(æZoÊ4t¸ÃP\äQ×Òàìrtz6<'HÏ#æ\£Èè³zaÑ[@BÍzõR´¹ûY¦QÚX£oÅ5ô1.F!ø¢êµ O²¨ózÛU79\ßZ§?´ä1ûI«DzÙmw`IÐ>¨û$ÄQK CèÒ¦äÐS¨2O·CIWAø¬ÀÜé'ð,àw:ÃIK&?&<~ß0$=iÞVr9ÌJ&Ó,úEv°øáR«P¹ôã*ôÝÓE<ê háý»©qzd'BX¦
µª$ïdÚ¢WMÓBZ½ À7é@6¸3â¸®Hðz@`ÌyamÇ£ËiõBx|¿é9;n®Ì¹±u`R »¨^¨¬5´TÌÎ`oC×EPiò ëé¢ß2qGui¹À!ãu.´Òg ¡·®÷µKwFº ÕÆãª#µÇVBÃwÌKñã@ÝQ¿¶µ.´78¼ïÿ q¨%yXZ. 'MûÔbx¢+ôéj¦C=­p`==¾ÖV¨F%7µ0~¢píâdÉ
Ð=YªUdúB×Y¥0ÙUFRuFO+ä¥i zSÃ¥&oµÚ¾¸=ÁoIí:"! ÏàÙJÇéEël¤BÎfòt=	êÜµÎÇTÖj&5¢[¨ÔÀ´ëþ
DCúÕ Çí"oÔÌÌ7lÍÿDRÀ$¹²Õ?7,Dº(O:¨ðÁD}åçCü¹@kCh{+È¯ÄoÌÍé?ªVi·{Ð3@$Á-fDå$NÍðÉ.¶©9ð	á­Î.6Å¥ñrxQA'ãmD	Þ k JTÊ(7nM³úzhkÔÒÕ~]UIë
M¸]¸y rBÃPõÅ§.ÄÄá`M¦ÑÄÊA~§ß¢0­.æ@vé×´@!¯îe)'N+R w`ÐZÐ6Èvë²þÅJ^,g
rjÉÍï8C¶éÚzDBpä¥§ÕzCºEÃò(L +àÄ<2}!0¨%0:é»3ü®ÿ;Hô3æãÿ¤½¨ñõ¥«U¾Çí@Ïî/×e¼S óx+zKÒíd(û æ{Eÿ?è
õÄXC×±).¹¤:¡×X°ºÖ£¸ d¸5ý%FIJõ^è.ý¯J)rÄMÝÀ<$é:äZ#qò¦&ØM­íèZæøà ×CõãgK¸jÍ.s6ZYw)XZxO I§QZù%«
ø¦2¥÷^ÝsÕ¢ Á´X7 eì¢,¦X^øØ Wc¨± ¸éÈÇ¸d ÀC!©Ë©Ùéj\«çbÑ>U	´<û$ÑZy.&L/¬Ü&î ç¢I1Tãõ  iCCPICC profile  x}=HÃ@ß¦JEªvqÈP,HqÔ*¡B¨Zu0¹ô4$).kÁÁÅª³®® øâææ¤è"%~ZÄxÇqï}ïËÝwÐ¨0Íê 4Ý6ÓÉÍ­¡WÑO3ÈÌ2æ$)ßñu ßïb<Ë¿îÏÑ§æ-DâYf6ññô¦mpÞ'°¬tAâG®+¿q.º,ðÌIÏGÅb+ÌJ¦F<EU5ò¬Ç*ç-ÎZ¥ÆZ÷ä/çõe®ÓAX
j(£1ÚuR,¤é<áãvý¹rÁÈ±*4È®ü~÷Ö*LÆ½¤pè~qQ ´4ëó}ì8Í ø\émµÌ|^okÑ#``¸¸nkÊp¹=²)»RP( ïgôM9`ðè]óúÖ:Çé¡^¥nC`¬HÙë>ïîéìÛ¿5­þý Mèrd*3$   	pHYs  Â  ÂnÐu>   tIMEå/.|\FF    IDATxÚìÝy^Wy8þçlw{ï}ßwÏgñØÎj;v@Ò%I²R	Z	(úÒV_TPiERi¡­º â«hUQHJkµ)ÄÖ$@ +qìÄ[¼Ígæ]ïvî9Ïï¿wx3Ø±ClÇ?i=ñïrîsûç°±K®å¦FàCÿ÷ÿÀÍa||5as B!B!ä0Æ>.d¸ôq&Yk¡ÓéÀ¡Cá±Ç¿ù_çfæN' ?ý'×Ür3ÑK!B!B^J s¶ËÍÏÏÃ}ßþüîÿ÷É¥ßáÐ  ¼rËeðé?ûc¸ý¶[!ºZ	!B!BÈF	ÀW°qã¸áÚ+aÿgáàÌüOþ³?®%%B!B!òs£à¹ajrÖLMÂ]ÿqÏ±à§ÿäcpûm·Ò!B!B!/	% ÏS°fõ0ð©Ñ!xÍ-7Ó!B!B!dyÍ-7ÿÐÿý?´á!B!B!+ÐÐÐð-7Ó B!B!dâãã«é(B!B!²Bñ0é(B!B!²BqÎ9B!B!BV(ÊþB!B!²QB!B!B!B!¬` $B!B!d£ !B!B!+% 	!B!BYÁ(H!B!BÈ
F	@B!B!BV0J B!B!²QB!B!B!B!¬`òB? HWÁ
Æ£@!B!U B!B!²]pTñG!B!B.$TH!B!BÈ
F	@B!B!BV0J B!B!²QB!B!B!B!¬` $B!B!d£ !B!B!+% 	!B!BYÁ(H!B!BÈ
F	@B!B!BV0J B!B!²QB!B!B!B!¬`YÉÂ
Æ£@!B!U B!B!²­ø
À½1ÖZ  àüX¾·ÿsª#B!BYÙ¨B!B!B!B!¬` $B!B!d£ !B!B!+% 	!B!BYÁ(H!B!BÈ
F	@B!B!BV0I`eCD`-ý ~æsB!B!²rQ !B!B!+% 	!B!BYÁ(H!B!BÈ
F	@B!B!BV0J B!B!²QðÂÄèB!B!\$âï!*B!B!ç¤	@ÎZ$xüc¬µ`­  ! "c@)ÖZ@D@DÆ9Î9çqékÊ¿üôØö÷þcÓ¼±ÿkYùûsexÇ´ÖA)Å$A×uÁRJ,¤h  ¥ÄqãÐI ²b(9ÿ/ækÇ
Æ`-}M<QÆ/çq>Ù÷©çélÅ'ÑY)ãäæ/õþ´ÖbiþÈ9cÌÒÜBÈéwÒ Özi î"Ëÿ. ¥  c Yü³ÖcR ÐÃz¿/ô09êù:Qé?fB(EQ/ L)ÅcLÁ²,ãÆ.àÈÇAD´B[qÇÆql¥ Âf³	µZ¢ »B9Gÿ'ûú2ÑW¾À=^lõóüýËÿò¿§ü~4'äüv¼9Ø©ÎËNöuýãD <ÞË
B!§yl?Ygù[å¿Rµv)(¥d}1RJ ,ÏsfA!!,³ä/þeE`âÙ Ïq¯¢õ ÀqnáÆÁ9Y	Ïó !ÖqÎmQZ)E@îºnç¹EDt]»Ý.¸®Kw	9¯SB¹âòåêñþ]ý/mûÿ¼ü(c®ÓËãòüyÎõ;¡qîLÜ§#A×_í×_¸¼*rþÏÕ\crör§úÃ.ÿÁË,ËÀ÷}Ö[N
EQ0!ëáÈò<ç( ¹®BSÑZÎ¹-/
\vD(:ñ"BQLJÉÇáiò$I¤BI)Ý8ýJ¥â¦iª´ÖRª"¥¬ ¢4ÆhÆX :BEÎy+MÓ1¦c6c¨T*HBÈÊJ ôdçJw¦ÚËP¹ÆþûúT®ý}MYèq¼6ü#3ç¤	Àåð².s8çÌZÆç\!$cLE¡8ç®BXk1I1AeY¦ @D´Öçût CDh·Û  (Dô1ã8µ0 dçFc`ff¦$ò}?[»víüÂÂÂ|û<Ï;$¥cL!L$L)E'B9G&à¥þUË¿~y²kyµÞ©ÄW/f	ß©üþ¹r<ÏäÏG­kÈJ_7Vô÷?Ó?Ëù>¤qr®ú¹7é-9eI0k-Bp×u¥Ri­]­µÏóc."V¬µcÌB)e1¶ µnpÎ;@ ¦÷=JEOüLéUÿq PívÛBxãT¢¨H)ë 0²°°°úÑGÿÊW¾2øÔSOUæææÙÙÙ0MÓRJpÎ³ßùßy×»ÞUBxYa&I«B×u­µíL!SÈUõo~&ª¬Gñùø xylùü²W@²4÷ëÃ!øòdK<Ë
Àþs½Ï9"ò Êê3'ÏsÏ	!jJ©AÆX ÂúÌÌÌpe¾ïûºV«-aøçyû`   9cÌôx:Þ2­°HYù'¬µ"óµvÐqaDj·Û#wÞyçä×¾öµÕ?þøã8Q§ÓñÂá+cKÓ´p§Ón·çßð7ìù¿ù'.»ì²Íæ3A,h­Ó LQe	(=	!ätèôëÔïÿãM_(ùwº®¿3Ùcìtã¾¦Y)cLÿ|¬,Ð8Åeºì>7Æô÷ûÃ²`¯ºù¾(> +éZ¦Â®ó¬à²]äÊ3Ç{ÿ¯Ón·}ÇqBD±îûþÖzõÃ?<ñ½ï}oðî»ïvïÞ9r¤ç¹zýúõ¿õ[¿5þÁ~pH± öÀ ´c Ø²nç=4YïØ; P1!Äã8Sßüæ7§þò/ÿräÀCóóóÃiÖ1JÄ ç¹PJqq¬A#DQd8ç¾ÂÛ¶mÞvÛmÝË.»ì ïûsEQÄã<ÏsÎ  ÿ)OçByÊàÓP±sÆ&¨/¶Âñ8ÉÆÛËg+È§É;9&Ý/òþ:î¤}ùõ|
m ¢ÿe}  ¦) BsM , Üær4¨µÏóÀÃz¿ÆU_Eá°Öz4Ia)åèÇ?þñÉû·[½k×®<Ï«õzÝk4®RÊEQç{®ógögÿò/ÿ2ðùÏ¾zÍ5×°¹¹9S­Vµëº&Ë2-À^ò	?¨.¤àªÜåOJ	EQ0ÆBÆ1Ïó6<ûì³ÿðÿpÝ>¸:IV«EÔj5Okí(¥ïûY»ÝfY1Ïó MSç¹è×á]»vµÛíq)åaß÷c­58i­ËªLÃ9Ç¢(@JsãÇ¡»è,rÇ{{*×O9I\^-Rþ9s7U39A;Ùßyª=NG2ç|±îÉz|>ü;?Óú+ú¬·<R¬|võÀ9,ËíÅKý¿o­4MÁ÷}ÐZ?ïùØÿl}©q&ýä|ë^hlADR>ï^BD& )%Ë²eYÆcÌZË{DQÜZËR¬R©@çç9
!ÐZkRÆZk]×µp¬øÀö¾'..´óG/Y9sù¸ã;^ðÇDcs]WÄq¬1UA¬)âòGydËwÜqÅ»ßýîßùÎw.ãxMec 05ÏóBÇqN§ãEáV«U·(
ïÀN§ÓÛo¿½ãy^ :Æíº®-b©üxo^®¥g ×÷ d¯¯âRê¢;w^õáxóöíÛ/·Ö	!ªXAD1¦c"IÇ1GD®bRJÆ9gBEK5sÙe¥6mêÂ±^"c©RJÖ«DcäyÖZð}vê:Ë-Oò-ßq¹sÔ?©=Þ!§28Ó×
]äå°¼Çtùa­k-c1!ãÇ¾#"·Ör³9ÆHÓT¸®Ëûu:f­åÈ\×eBÐZ³,Ë@)BÈ²ú*{/Ð}AÈc@)iç¹®Ë Çq,RÒZ«<ÏsÇñR¢Ê9¯rÎ#)ed­ºÝnX©TBÇq*ÖZs.QJ)yçÐboÃI0Æ\°/¯i<"çóµKósëÅÅ)íÜívYE d­õRj}$}á_¸ì÷~ï÷Öi­WI)«###Cya:Zkaá¬§·¡-BEÁÀnÝº5þ?ø#7n|®(£y'hÇÁF£a Xz{{!^8½ä+ "RrÆ ukíÄ=÷Ü³öÛßþödQ#AÆG!1\kÍ|ßgËª½c1ØÛHDE¡1Ø¹sçðý÷ß¿îÖ[oí:rÎçÃ0\Ìó|>Ïó¥TSkÝUJeÆëº.äyTAvþLûUò:8^bbyeü½¾.´1î§óc<dÇ~Á´ÖÌ#BJ)cxù3Ë2Î9·sÔZcQ  ¥z `¬µ&MÓBkm}ß À<ÏÁuÝrãç-s¤ç"!§~¿ZkÁó<ç9 Qt]W!¢^ç øÆ1VSJ1¥µæZk¨×ë µ¶ykÆX ×uÛEQ´R­Þ÷Ñöì¿Oi<'/qçòÕ9/w¬q*= ëºLkÍÑµÖÖRÓ?üðÏ|æ3¾üå/¯Ñ¡¡¡¨Ýn»R¾ïË$I¸ëº¬·á  ó<,cn­V¢Ü¾}ûØÆW%IrÄuÝ¤Ùlb¥RaµZMk­Ëðr¤/biç\Zk=D¬ïÞ½{ü«_ýêX$!çÜãXrÎ%Ii²²Á®ã8K;mI)¢^¯»IlÛ¶mÝôô´{õÕW¯å/~Îqç:ÎsRÊ#i¢ëº¹ÖÚÐm}v¬Zqªüã-¡§ s#0x¡?_¾$ñD÷<ÝÏä|Ó¿É\ßuÌz	@áû¾ÌóÜ-Âí­~pQc"
×u9 Ø<Ï-cÌº®x¬|ã89ç<R&± Lï{ Öúgîee	!§m)%ãU*Ç± ¥TeYUQRÖ9çµf³9¸ÿþ½{÷Ö<è...
ÆÛ¿?ÎÏÏ×¼æ5é5×\ÓØ¼yóá >|øÐÈÈÈA¥ED[öæ,K«Ã!ä|Ë¿Ðç/ËÏt²]1¹ëºÊSÍó|Zkýããã×§izÙðððêRÊUJ	 àYqcøijÆ+»Â±¦¯fhh(9zôèÑë¯¿~ç<ðýV«õXµZ=  Ýn·U©T¢(2 (`YðTÞù>!²Ö2ÇqXQBáE±1¶ùßüæëÞúÖ·^ ÓQU1*Ïs LÁÊ¥ÓJ)èUþ1f©§ çºÝ.zgÃ0Ôq'It  ®V«ÝÛn»­qÃ7¼ùæwoØ°áI¥ÔSZëÃÖÚã8ZÆqáAcyo¢ãýÞÉõ¡ÁÙìÏT¬l'j¾N×ÝK+é¼ôr£3. T  ªªsÎ{;¨Ò4­VKú¾o¬µëºsn¢@ß÷MQ¹ã8íN§sTJysÞÔZgJ©1Æd·Gîñî=BÈó+¬µ²ÛízãÔ8ç#ÆqÏóÆ>¼úXõ_ÿõ_?øÁj{÷î­§iZR*!8Vä 2çåÍ÷¼ç=ÿ÷ÏäääÆóCó6 ä1ËÃS)®$äÜ¹v©Âþù1ÏË´°·Ék·Û2Cß÷ýO|â 0áûþÈÑ£GkãxZkY©Tx£Ñ`®ëkýl  ¬^¯ïû0??ÏgggZ­=ùäã?úÑ.¿úê«1Ïó: ÌT*<ÏrÎ  îoæ|!ê%õR
8çlpp·Z-Ö[ÎË<ÏcZkR¬µ ¥,Ë ?Ñ«µc8Q±4MùÜÜB0 Pa»ÝÎîºë®êÖ­[½+¯¼R|ðì¼÷½ï1Æ,c)¥)ª Ïò Ñ[rÍ^Üÿö³ÍÍ)¸0>Jz¬óßû5;ÙÄ§ÿùRÎÿJ¸v^è8QçÜ	ËÓÇ= ¨	!F¥Zë;wN|ÿûßØ±càÀuäÈÉãÖZ[©TÖíÅ_\\yåñ-[NLL<ëºî3N9³È9Ç4MMos;<Þ5O×!'^ÇaqÎ¹EÑ@$ã\rèÐ¡K¿öµ¯M~õ«_9|øð@Ç)¥¯ò\×ugYÆÇaJ)Ìó@Þyçá< zè¡¶çyóy71©Rª@D,û»®'+`!r|'K ²4MEQÄ¢Py7ÝtSíSúT¤
8çNQ2Þ·ÃìRòOJ¹´ü4MSh4Ðn·Áq6==-Ç	öîÝ;òë¿þë¸zõêêE]4ýö·¿ýà«_ýêÝRÊÝ½M0,cÌBoù\`Ë¢({øaoGÞ|ýúõñ7Üýçþ§)Kâ+
EÁ¢ ­5EYÖzi×<Î9ô V«UþA Ûí6k6 Àqç¹ÿðÃ{ßøÆ7ü÷¾÷½NeÂó<Þn·¡R©PþY¶NðëS`õ&5x.¼y ¼ÿù	¶,iò¼gâq4âü½?óÿ¬ÔDÓ}N^öóÂc¼ú 0óK~øÃ^ú½ï}oÍ÷¿ÿý±ýèGÕÙÙYWJ)zpDÄ ¬Ö1À9·Û¶m3ç%×]wÝÜûßÿþÚí·ß.<ÏÓÖZ-¥4B¦)*¥~æ~ ä!§÷åI¬.âò}ûömùÕ_ýÕK÷íÛ7f©i­×uRJ¥i*¬µB)ÅR$	!Àó<ÌóÜV*·^¯÷¿ÿý­¿û»¿[p]wQ)#bÑ[EfcÐ·¢BÈtÊEQ0c_rÉ%<CÑét8 p)%+õ*Ï"BeK»ÄövrÆT«U0Æ°N§àè(¥¢Ãó={öø>øààßÿýß\yåþ¶mÛ ^¯w ákÎ¹ ¼v.+ùzËTÐZ[câæºÛ¶mÓãN§ °Ôç¯CY¨<Ï*ÿqéá[©TXÈcJ9Íf3ç·6oÞ<Ë-·Ì½ûÝï^Ì²,¢¨hµZ6",Ï)9³ÿ²zvÙGYÁr¼Ð@DÄå³Xþ¥tþÎjâáD	p}¼¤ïOÎùûÿx÷~¹óÒÒXPÞê½{¿ÿã¸ãÂ©\T!GÎÖõ]nJµvÀ3e­Ýð­o}ë/ùËnß¾}ÌSwÇcIÎ9B°(X¥RÁv» çïû(¥´³³³ÙÝwß]Ý½{·LÓ4{Ç;ÞÑÈó¼$Iêû¾É²¬|"UÇòânÝÞ¼P¸Ço!Ö>ýôÓßùÎwn]Ã«aèw»]e­åZk ÜqB°$I ÜÙsÆL÷ô½÷Þ;ýì³Ï]·nÝÏóÆ ¬ïû1Æ6M¨V«àBÎù_û®san&·4àù½û´ÖL)Å  µÖ2ÔÝn×AWÇPn>ÑÐ!IRBQà8h­!MSÈ²=Ï­5pÎyªÓéøRJEQ±°°Ð}ôÑGëoxÃêßûÞ÷|!,wë_G¾RªÏËÏGo·;¦Ba­eQ6l0EQX!DQ  YaçÌ÷}@D(]gYã@Ðh4@J	µZÆÆÆ`zzº<¸jÕª â$Iæn»í¶=¿ôK¿ôìÔÔÔN x6Ë²Ù$Iâ(
¸@7e9Ý8ç?3ô¦µfY±(cLh­Öû¾ÏzwB1æyË!9ç(¥´1£µ¶h1Öó<ì%é±·\Egxà©_w¦þrV'<WBÈózÕîPEÿç1Æ$ás)¥NGÔj5ÞëùÊ{;²[¥ÍóÜJ)µÖô¶L´eß¤Þî¨¦) xwÂ%T+åº:Ñ¿<g÷ú?Qæ±wS{\qG)Uãxs~ùç>÷¹-úÔ§6(¥&Ç©aè1ÆTeåÀ,IÏó ^¯c»Ý4MaxxØÖj5·V«üä'úÎ;ïl¼å-o9GÇifY÷60½Ö'ØÛ mé¥kùÙûóDqoÙòäDñÑéºÉ©¡Ë6ãRJañC^óÙÏ~vÝþýûÇÇ¬T*A$
ç¼UYe r	où.ºR© "Bç®ëºQ£ÑXuÿý÷¯¾â+FqVkÆqÆ jµzA®#çÆ36]ûùÆùçØiM è@Ä2áÆ²,ã(ÇáIk×®1cab¦èy$Ie2°lÉ¿ò¿Æ¬ÕjØl6Ñ÷}£GâªU«0Ïs=::ÚyûÛß~ôÆo¿é¦±-ýÅ8Ð$CÌLÁ­µRªçùRj jÝn×RÊV«Å¢ ß÷z!IR
|ß_ÚøÃZN8çà8\sÍ5ð¿ðP®Y³>lzè¡|hh¨ù×ý×û'&&Ï²l ìÉó|s¾ÀK­µ¦(
äÓèwæ®	Öñjµªò<wÇñ ÀR:È$asV.íæ»÷EDçyÚÛ¹Y»®«­µEç¶wmàé
°	!/.U¶fè¿çÊöy3 àÆQ©T8ý *õzÝµÖJÇq$cLZks^äy^H)Îy©µ6çsÍ3ÖZÛK"BÇèykäeÓ{yÅ¤Rkí!âPëÿýßÿýOúÓA°F)5`ñ­µ ¸µ1Æ@iBEel	Zk@Dh·Ûèy×Z£²þÌ3Ï¬¾ï¾û¦^ó×ìÓZÏy¤iZ(¥sn9çse« Xj]CÎüØx¢ÝOuôþä^ÿïÑøuzÇöâS¡µv¢¨5±o}ë[#õz½$ßívDäÈ­µå½ÄÊsT&ÿâ8jµ
N<Ïã®ëV«å)¥jßþö·Gß÷¾÷Mc¢@Çq+J«ÝnÇóÌZKI@Bù9ÈMTÊåFCº Pév»¡µ¶ îå_.fffx«Õ)%äyeâ)CÈóò<Þä&Ïst]=Ï37Ýt¹úê«qddRæGI:ÎÂÿñ?;55õ¤µvçü9cÌc,f­èª³ãìîÈ¬µL)Å$qÂ0`Ôqu|ö³]÷õ¯}¨(
ßu]éû>KÓ1àyÞÒì$I`Ýºu0::
=ödYõz1099	×^{-EO=õnß¾Ýüð?Ì'''ÛJ©#ó=®ëîÎóü1¦)¥Q÷ú1bù¦üü¿^Ðº´$JádYcj±ºRj ã:OV    IDATÂñ}[kYLõ½ME{l¤±ã8 hk­»EQt}ßyçE¯Âû«P)HÈéàHYÁÛÿu½ÏYQs.|ß÷µÖUÇqµÖ#Íf³&¥t}ßwÍ¦ 000@¦J +hpÎ;±nQ±µ6¼8VògRèû>h­_ðJPät_ÿËWXkYQ1!VíÝ»wý¿øÅæææ&¦¦¦êRÊ MS¦) V®jè½ì 4MsàyÌÏÏÃââ¢P_~ypèÐ¡úÖ­[Go»í¶¡8£4MÛµZMÇq\.¶BÆ9_k(¶9;×Fs,ßðèDãf/ñ´?õ'ûú[P?ÇÓ77yXçÜ·ÖFF£Òl6Ý±±1iá®ëò4M!ÏsVVt
!ÖÚ¥Jôò¤&I"N¥RyäñÙÙÙcccEQ cÀ\¦MÇq2¸@{ÃBÈK!Oô-ÇþÁÁA©µöçææÆÇÇWÀCÿûß¯åyîv»½A Ýn¤KÄqpl©0FQd>úÑf7ß|sª*:Ø³gîÝ»·ÝétfV¯^½ËZû Øo­g5   +´
py0Ô÷àeNGEQ,,,û¾¿þÇ?þñæ}ìcîÚµk}«Õ¼ì²Ë¼C,Ë¸Özi£4M17n_ù_ï~÷»P­V!IXXX )%ìÚµR°víZ8xð ã5kì+^ñ<¢®Öºmi!bW@¡µÆr
®^ºrÑÄÉ?N$µ0ÇÒ4âO<xpbëÖ­YyÆáû>³Ö2)%ÀÐÐaJÅT«ÕsÞ\µjÕJ¥rT)uT)u¤Ûíu]·ÅK±8ÙFÓüX®L` âÒd¶7ô3!àûq!&|ß¿øñÇ¿èé§^µcÇÊÎ;,ËT½^M6éÁÁÁ|Í5ÉÚµkõz}¦Z­Í²lÁuÝ£ÖÚ ´1	ç<Ëó\sÎMù`ùïT~B^ÂõÏÊj"8¶Ða»ví~àÖ­[WµÖzBÉ9çZkÆ9gårÝ²Z  Ýn?¯ÿqoS4Ñjµ4MÃ={ö5ÍÑZ­6d­íôÚa$sÝ«¸µ½z,_\ÓõæK'ù3v¯[ú¤lar ch,;Í÷pß}ÁÌqnQ{öìqµÖjbbBt:n­eG XàºîÒæåj<ÏÁqHÓÇÆh­YER)ÌÎÎnÝºn»í¶È÷ý)ß÷[½zõ®(vu:Û7/4t¦!äÔÉgÇ1@I?ðÀëßð7L2Æêswaa±ùùyð}ºÝîRoÆXÙ=ÏÃ$IÌ¦M²[n¹¥U«ÕÇI÷ìÙãüÃ?üºï¾ûº×]wÝç|Æq#Fc®^¯·´Öi¯úÏ®Ä$EÿÒþk/ÐåEQH ð{î¹÷½ï}kvîÜ9 ÃÃÃ~·ÛI0!H)YÿaaajµÜrË-0;;ãÀÓO?iÂüc¸ë®»àï|'üâ/þ"»ñÆùÿþïÿ
­µûÔSOU6nÜè9#úÞ¬""¢Ö©Yöéûû"c"J©±4M7<ùä?ùÉO®ýïÿþïÕ PmµZ82 îU1X¥T>>>Þ½üòË®¿þú£¯{ÝëoÚ´éJ¥òL£Ñ8èyJ)S (úf:§J)0Æô÷»bÆf­1ÇZ[BLº®»ásûÜæüã-,,¬ ppPu:Þ{ùf­µÅàà`~óÍ7w¯ºêª-[¶,\{íµs¬µ¢8Â9B4ò<ï*¥2kmÑspù³ äL'ÊÊ¥GDiq1HÓÔ_\\t¤Òq¥MèÊ
¢ò1ÆµFGGÁ÷}`/?YQ µæÖZEQe~~~dûöíkßö¶·ÍZkµÖZEÑr'æ§RÊ1f¢`RJzÅøgùõÿ·³þßÓZ/Uk2Æs1[¾PRÒ vî×ãmÕëÝ)¢¨æçç% N§Ã$ÁÁA¨V«ç9¤iº´B¥ÿþUJA·Û=6²Ü¤EÁó<w£;î¸ÿÅ_ü_­Vßüæ7×o½õVuã7æ¾ïwáXqéÍèE6!qÇw<ïa¼lÇQ ÊSét:c÷ÜsÏeo}ë[/AÄñ(êèù¾/{ÍÈYeP­V!c¸ñÆá7~ã7`qqæææÀó"¢xjjjîu¯{ÝnÏóët:ÍÇ{,½øâ;øÀf§§§AÄQ-öº÷P?aÒl¥@}ÍEËþÂ÷}gnn®amÿþýc÷Þ{ïh·Û­ú­VË[XXPÖZQ¯×9".5Ø-{äXkarr®ºê*xâ'à¯|%lÙ²vìØqCe°víZz½[¶l±«V­ÊÍf{íÚµsãÌ@;MÓL)eÊ>9½`ä¨ÿç¥µÖ³ÖApÑC=tÕõ×_¿ùÀÅq<îºîçyu×u#!DaäºnÄ9Rçyc,,¢Ún·«{÷î­ÿÏÿüÏÀW¾òZÞæÍ1s@Çz>oé!äìL®zÉ{&`ìX&#¢ ¡bL±áßøÆUõWµ±Óé¬¢hb@U*¨R©®ë ¶ÛíhÿþýÕíÛ·×·nÝ:´cÇáj­ëCCCA @¦Æu]SémN=ÿÈYzmNDQ®1¦êºîÄ={.ù§ú§(ªy;½d8CDVnÒQ&ZÍÕô¾ïµ&&&@J	F¢(²7ÜpåKß÷]¥  f±RJ#¥Äc{çàÒÒ|rvâßes  8cL0Æ+XpÑa91Gá0Æç\qÎ÷ú9wiñòñbS{F-;_å¹QÖÚÀó¼á<Ï§zè¡Kî»ï¾1 ¢(RYñN§Ã1LQ¾^yRÐ+\ ÆA Æ,i2)%RrDZk¶k×.ÜºukzñÅ·Ö¯_¿ ê1ìü£ëõÜ9t.Èy ü£?ú£ãMúÞ¾õÞµZmèÚk¯]EÑheu­uE)åv»]a­ååÒ­5a×^{-|ð£Gcæçç1Ë2søðá´V«-Ü|óÍû]×Ý700pôÊ+¯ì\sÍ5Ý+®¸¢á! QJµ9"ÆØóþ®Äoùñï-V«Å£(bRJQ­VÕW^)ßñwÀ;ÞñöW¼Âyì±Çv»­Ò4ee@]núáy¤i
ûöíÆÜrË- 0a×®]Ðét Z­ÂæÍÙÚµkaqq³,ÃÃ;vìHfggÇÇÇç=Ïk¦i:S!ÐZJ)º{ÎÀygq P Pai­7¼þõ¯ß¦éEóQÏójÖZ_)å&Iâh­"*k­êõbQ½ÀÌ Õív=Çq<!Dàû~°uëV÷òË/g[¶lIò<osÎ 8aMzÈræ&V½ååØÍ@ô&³ !Ö<xðÊO|â¾ûÝïNA0Çq¨ò1N¦Ê£1
 ïûN®ïû>ç¼òäOF>ø`íÞ{ïØ·o_Ýqðâ/æ®ëêv»¹®[pÎM´òäL%zÏ;!Yùó)åÄÌÌÌÅ_ùÊWÆ×¬YBp×u6¼*cÆ´Ûí¥
0Çq Ïó¥eÀY±hµZ,C¦µ?ùÉOÅÅÅÊâââ@§Ó©øJ)qlEac¨)%õ<KñOÙú¤/¹${q cÌ
"V±
  DEQ!býÞXXn41<eÆäîÝ¾ä_y<ÆX=MÓ	 ¸ø'¸dÛ¶m#ãTÍ¦âÆfYÚX§¬t/ûÿ%I1Ì²ó<·Æì-ïgÝnRVJqÎ[±ù©©©#ïz×»¯Y³æ0c¬	?­¤àÊf¼ìÇd¥8Ñà¥.»®ëZ ÈFçþûïÛ³gÏ¡ÑÑQÇþoÿöo;ç4M¹R
R,Ë2h·Û0;;###pë­·Âðð0¼ç=ï¯ýëüî»ï[·nU7Ýt|×»ÞFQ´pé¥Î¹®>|XXky¥RQIð²OÄYkÑZh1Rvç `¯zÕ«RcÌ ,¬]»>úÑ:¨¼ìÝè8B@eÀ¸ç{Àqxç;ß	F®ºê*xãß«W¯jµ
=öxÇêõ:Û¾}»xâ'Ô«_ýjoË-~½^W®ëòÞ[xèßïB:?gB_À¥]·ËÞ_8x÷ÝwO9rduçJ©PkíZkE¦¬Z­²n·[Qàû~ùæcP©TÑó<)Póóó²^¯ã¾ô¥ôµ¯}íÂøøø!­õ""&XÐC³ÔK¹µçyÎcÒqsZk£wÝu×Ä7¿ùÍÑZ­Vo4R)¥x«Õbã ç1e?%ìt:R)¥â8v«Õªï8NpðàÁê¾ðÚ>XKÓÔ}ãßh«ÕjçyÖ»÷uï¹OôÉY	w +¥1Æu§Â«@´nÝ:wllLÌÍÍ±z½ÎÒ4!h­!Ë2RBePxRJh6À,Ë ÜÙZI0ß÷y»Ýó MÓáÏþóÊ30===ú|`øæo®^uÕUÖó¼,Ë2Í97qã8?ócáRßc (À+?8ç"º  b^r[ksó¢·óyç9çBv/9TßøiIrDT½¤ëïûÓ{÷îþÁ~0è8/a²@KÕ~J)È²li¹v B­5FQd³,ÓJEOMM±N§#FFFÂ=z4ýÈG>Ò¸îºëBìÞÑétöcz-l[By	Àþå´ÇI XÆXÁëV«ÕÍ7ï¸öÚks­u6::ê"¢Ï9w8ç"MSîº.=É¾ûÝïÂ]wÝo~óË¥lÿþýìÞ{ïiú¬*¥ü¹¹9RÆ  Ò4­ïß¿à¯|eèy»°°×jµ¢\´¼/ÑJ(áïÿw-" ÀÀÀã8Ã¥6ãLJÙ1ÆXÆØ@«Õv'
Ài·Û¼XCÇEäyZkh6ðå/vîÜ	ÓÓÓ°zõjð}Àu]XXXuëÖ¡çy¸~ýzEQöÉO~²í4M3k­1ÆØ²i}¹Ô*D^ÔÿgÎuQàûþÒ2&cB4MÆXøäO$IRóçyBkÍ¥¬L
!Àó<@Dh·ÛP¯×!ÏsH1Æ Ùl2DdçA·Û­>úè£C333«ÆÇÇ«ÆÇu]Çð³^%2Æ ÏsJðrÆørb¯ÿëUØ	k­@DG¡¬µÖ:RÖÇ\XXzüñÇG15k­§ã)%+7Ü
Ã°ÿ{0ß÷ÁÃ|ßçy8åàà ezâ'Ôç?ÿysÑEµ×¯_?ã8Î"ç<a½j&Sät^ûe%i¹r (
&¥dYqcëºn16çù<Ï'~ð¬ZµÊÛ¹s§ãÕëuç9[\\\Z>XîÚÛ¼*
4M0Æ@0??ARån¥B)åÖjµÐZËöíÛ'>ö±ÙW¼âÝý×=äºîá  õÈÓ	|úvçýßg1õb.¥t1RªÒl6ëA*¥j½*¿JeµF£1ÒjµªÝn×5Æ$I MSlaxdhhh?ç|o$\×mXkS)eç9xeÿ¹Ñúv:?}aÕ+2èZkëqO~ñ_\÷ÿøO=õTmhhÈít:\JÉÆÆÆ I@Dp¬µ µ^Ú¼§W¥y[ Ð7ÝtS÷öÛoï2Ïó¼çàÁøØcµo¹åÃkÖ¬y1öDeÏú¾1Ö@Ä1V& ñæ²+â\\s¦òugòÑÜ÷	ÀôàX¯ J¥5Åz½Î»Ý®UJ9Ífs5 E:£Ò4å °´;Öî¸ã×¾öµe8p¿éMo×\s÷¶·½­¶¸¸8\«ÕZy'îw¾óÀuÝhÓ¦M~²Z­òãÝd+é}¢~½ 	{´QaÈ*ÊäE]´v÷îÝÃÝn70ÆÈþÝëÒ4DU«V-5Ì~â'`÷îÝpÉ%Àää$C§ÓÁrwà+®¸¯»î:»gÏ"ÏóLJrÎsè½e+UÐ­óó=¸_¯½Ðã8,Ïsná1BD·÷¶ÛMDc¸ÖgYÆzóR¶¬~¢¬µÐn·add:V«UÞív¡(
1::êÎÎÎÃÃÃµÖé%YD¥ÆÚ®ë>o=BÈÏ$ö'{"ª,Ë¥TÄ9¥5)å0"®ÒZO>üðÃÿÇüÇ8c¬*p$I°8AkÍ XúB(ÚívÙ#Õëul6lnnaµZÍÞwß}#û·;úÏ|f@Jé§i*»®k{e}
rÉi$õívÍ"JÓtBJyù6Ýÿý}úÓ^½wïÞpppP5>33¾ïCÐ[Æ¥^ÇeR!C(²,[Ú]»L'Iccc¶(âðáÃIñôôt:33cjµSSS¢\Iáº.³Ö"õ<ý¤¾xõúõ,Ë B l6«*ÊÔâââÔ<0úÃþ°öÐCUZ­VçyMk0ÆT³Ùäq Ø0­ugãÆsú§:ºqãÆçy±(
ÛëñhµÖ½Ë6`¢dßß¿Ë¸U : þó?ÿóà?üáúØØ788ÈZ­Ã#G`qqRÀ9,Ë I¢jµÄq­V£(B×u ¤oûÛ¿ök¿6sàÀ3??}ç;ßî¼óN Íüä'G=Ï{nÕªUû´Ö|ß_ÔZÇp¬ºóèÿGÉ?BÈO ö?+Íó¼B$ Ðà+kíàÈÈÈ"6{K½ ¤ÖõOD´Öð|Þýîw³o¾¦§§áw÷wùðð°S¯×C N¤³°°Ð¸äKä-·Ü"Êq¡µæåÛbøiOÂ=2ôHeÄ9GÇq1fzsm Xp]wnxx¸ýì³ÏfZkãûþRrNJÉzo<Ak×\sÁââ"h­ágN§ Çv]»v-æyFØ>(n½õV9<<1Râòê ì¦úzn1 `­VU*á8²ÖºIø1offÆ@ÆqÌ]×eeóN§A@«ÕX\\×uÁZÍfáèÑ£p,_Ë°w=ðv»ÍÇÃÃÃRJÉcÌÃò<.K¦ä!/M(å`­åÆ%¥«\×7ÆÆq<Úh4ÆÍæclÕÝwß=n¹â+*ÖZË²9Â1K	­5ýÑz=XçÀ9z½ÎzJ)å5ÍpçÎµ8«Qy(YkYùü8Õ*
zù\ZêÉ9÷´ÖC °î¡Úø'ò'¶oß>eöâ8½$7+[[T*  Î9A°Ô°\f(¥K/½z°EEaYµZmüò/ÿò!ÄÑ 7o^\³fÍJ¥ÒÉó<·ÖZÏó°×¦Éüò±¤»4W»ÝîêJ¥²&MÓµ_üâ/úó?ÿó5EQÏÏÏWÆÆÆ\ß÷Ýn·ëI)"rc ¢(Bk­H80pã7[·nozÓ
km¢Ê1RJ§iår)êÆ:Ûàx;ÿ½­µV§i¿å-oYh4³ív;Ü¿¿???¯c<"Ñn·¡¬¤BÀë_ÿzØ¼y3|îs( Ýn£µ/»ì2çyìºîÑÁÁÁÆ¶mÛ*ßþö·Îððp§^¯ÏµÖ.pÎÛ
!)ñGÖ{÷dE& {8Â±²oEQQEâû~+IÙÉÉÉC6lßµk×(ç¼Ç± ÖÛÑ LMMÁøø8lÛ¶î¹ç¸áø«^õ*911á9r¤>:::Öh4Òññq£µÖûöí3CCCzõêÕ¦(
 ¥DèU-0¯]_¨Ê±ìqÒrmo©VÞl:ãããqµZÕq¥¶Z-(wÊ+±eSìÉÉIð<öîÝZk8rä,,,À¦M ^¯ÃÅ_ívÆÆÆØÕW_Í¤¢(
^¾Å+íþÖÈÏ÷,MSÆ9ç¾ï+!Çqs>à8Îµ¶¾{÷n?c÷}-..jµZ ¢(`||:®ë.ýº^¯câ8^ªæY\\d###|nnNH)E¯ïÝ» °ì)¥rz&Q½Äz¹Ó¯ÐZ» 0Áú'|rÃ¾ô¥u{÷î[¦i-Ipff&ô<¯²¸¸è´Ûm¾jÕ*600À¢(Ïó R©ÖºÝ.´Z-hµZ$	! R©@Ç¬(
TJ1Dä1¦¤Þââ¢ïº®ã8è½Xª*Ç{BNW|Ó÷bõÎ~¦ûöí|ë[ß:µ¸¸¸*ÃZ½^w¢iòr_ ^²fff R©ÀÄÄÄÒ}Ð«ÁÁA¸îºëÀuÝ2þ±Zëb×®]Ýë¯¿þð?üá'8ç»à( ´ `¡(# °ÈËz+.ÐZe¾q°o·_®µ±s>¬ºôÑG½â=ïyÏE>úèÔÈÈÈ*ÇqÂM6¹FCKk-WJ±0àX»f³iã8ö¦¦¦\×uÅ[Þòâé§nMOOÏ*¥ó¤ÜP°·ó,¦iJÙ½øD 2Æ"¦óù}èCÏJ)5 tyäû¿ùÎüc§^¯Ë<ÏçyÜZË  ò<ÿÿÙûò(»ª*ý};ß7¿STªI¢ÍPiÐ¶hE[mW/lÑ¥M»zýT\¥öBTTh¥QA@pFZ	CB¦Ê@U^Õ«zÃï~äÞgQq@ä}k½Uy¨JÕ=çì½¿óíoCoo/\yåpÇwçy)öíÛn¿ýv¸è¢¢þþþøàeåüãë]vYØÕÕ5.B¸ 	!cL("¡­þ;êê£6ÚhãÏL  8#Ö!¥dRJÒ é¿ÿû¿½úê«]]×óaja`!bÉôÖçïxjµìÝ»mÞ¼oß¾][³fMÆ¶ícÌu]×	 144ÇqìH)}EQBè¨@~	ú°¥SÍ!ËÞ#B·dÉ·Ùlc1¢HUUëº21B¦	¶maÀCõz*
LNNJË²d2"±fÍ>88(EA1%ñ§jy¶ñ~/ô¬ÃÀaª¢®ëæ	!eJiwÃX|ðàÁ¢®ëz¡P õzõôô ééi¶ç¦ÞG	q®ëçyP(ZÅ¼c@)EårÕëu¬ë:¢Hñ}_5CÁÓÄE&­À2Ch·@µÑÆÎyëÂ$ýSÂR}î¹çºoºé¦%_þòÑíy^b
!Ô|>¯pÎi1öìÙE8¦	q¢( ªjËk	!B¢LÓß÷[$Iúßôööîîî~ÝBõ[Õ:m´ñ>Ï»<äcMÓèe]¦H)Qgg'GÅ1E°,KbQªvWUæææÀó<xÍk^«W¯ïÿûP¯×!ð<Å"ôööÂÉ'¹\NîÛ·O>úè£r÷îÝ|ûöíáÛÞö¶Zc °Ë4ÍÉ c1æ$ªLL/;Ûø÷H×uÇ±I)í|î¹çþùÇSJ¬_¿¾<==m»®«L&EÁRJÍfÁqäyDQ]]]drryÇ7lØÐyÛm·õ\}õÕe 8êÚ    IDATuÎy¤(H.DÚSÎ¤@Éï)ýe	 õ8!À0 ¯¯OîØ»wo Î9IñmÛ`Û6ìØ±Í&\vÙe022º®£»îº0ÆhÇø¡_|qRZ}×»Þ5ñÆ7¾"ëºsó DRîº®ÌårÇ\ÊÑ¬|%íÅv~ÔÆQA ¾ØyaJMÓ¸"Æ»Ù×¿þõ«¯¾ºîy^)Íêq(d:õiåÊÐ××,Y"·oß<òüìg?Ã6l FC±×®]7#;==`çòù|UQF2ìcåÂw´ôégH´Ó7ñ÷RJ§5ÿñÿqöóÿ|sH)MÆMHDQçyÒqC-eËA:=¶\.Ëf³)öîÝËÇ	çææ¼ññqwxxØg±ÄP­Æºg¬[$ÀçQÛ¶MÇqºlÛ¨×ëãããO<ñDßÃ?Ü766Ö£(=33C9çØq@A­Vkµ=¦	Õjµµ7RO$ÎyK%4ÏÏ1Æh³ÙÔ5MË¸®Ã×B,c)¥RÿhgÇm´ñ)¨Q®ë"Ë¡\.g¸®QU5Íf5ß÷iØ÷}ÜÑÑç½©J7QÀ@¢oM÷}â8Û¶ÁqãTUBaÓ4-âó¤ëQ*"	©àXíxÐÆ­yë½åm|xKÈØ0÷ë_ÿúô;äóyiÛ6ûö·¿M~ùË_ÒJ¥BTUEe5¯ñðð0wÞy°ÿ~ØµkT«Up]ÒÍ©©)(°xñbØ»w/lÝºURJÅÚµk#±1®Åq<£(J BUUcv­.hã%ÏmS[äû>!¨qg¿ýíowFQÔ]*Ê9 ÐÃ º®#ÆÒu<ÏCsssP,Á0tÒ3är94==B¥P(è£££ÙGy¤,è BCcîyÂ¥´ÕæÝz~äý» F	ÈB~²7¥çymÛË²sssQGGO<4er	¢(Ç{nºé&¸à ££N=õT¹sçNØ´i?ü0\~ùå x]]]ëº¤T*	ÇqÍf±eYÈq0ã&üü?åÏðÇ~íöÐÆÑò±}ì·.tJ)4ù-:ÌE5ÉdyæòÎ;sRÃó<
 HUU	 òôÓO'|²¬ÕjÏç!É@ÇðØcÉ_ýêWRÓ4îºn1öûûû===3¦dU  I¤b!ùw4mÊûYRÖö,¥$RJ½««+óôÓOvíÚCBÊÃÉ<ËåØ%K¸mÛ¼££Cf³Y (¥pèÐ!¨T*RÇqìU*ÚèèèLEBaôÄOÜoÛö(Æx!ä#)Ï?ásF	HlÛ6Â0,
!<ñÄÇð\uåW.¿ç{{ì±]×AQÑÎÎN<334Ml6Íf³õµÓÛlÆ(¦A©	%­P1&zzzâþþ~ÃMBH!RJË²ªª"!¥ly
¶ÑF|ÿsHüö (¹\Î:åS«W¯îÞ½{wqrrÒò<OA8qâûjµZËK0}1Æ ca¤V1Öú¦!¤ ëº4#f¹^xáÔ9ç³W1Î9oJ)c±?àiþEÛ^m´ñûÄ?1Jý*®®®øäOvV®\éáÿøÇöÓO?mRJMÓaÈu]¤i®ëBGGlØ°¢(Û¶ahh(¥0==FÅ"¬X±P¿Ìf³,Ïûë×¯íéé9`Æx³QyB(é8R^¶}ÿtÅxb/¬ªª¢hÑw¾óû÷ïà¢(Ô0<111Æ(éJAL!P½^Gã b±RÛ Z­RQ­VÃË.»¬Ëå* ÐÀcÎ9O½²ÑÂöö|ÌS­·òL1BI1A cRªkVÚ»wïâÍ7wqÎ-ÆXË«s2aO>ù$ôööÂUW]RJùì³Ï2UUÃ646lØP]´hÑ,!ÄQU?üpö[ßúÇ±8ñÄFÃ³,+&8Ü|Ô7/äÅØÆç÷ßÎ}Ú8Z@ççZÔq·D!Ä)¥AµZ­J¥Éw¼ã?üáû¢(ÊªªJ	!R*{zzäÌÌÜ¿?^·nÑu÷õõá+VÀÎ;¥®ëbïÞ½â¹ç=ô]µjºråJ|ÁÈ|>/0Ær¾ÙÂi¿íßüJLôùÔwoÞ¡#BB!DÍ÷ýn¸a|Û¶m=###¹¡¡!Õ¶mÔl6QOOO¼zõêPQF)Ùl¡ J¥Bt]BH,pu]Ù¸qãÁ3Î8cüâ/>X*£>'¨ oüäüýv úÃwÚ'ÀAÎ¹>55=çsJB"!¤ È¦¢H/
¤Z­âééiÏçÁqÀmÛàº.pÎ[Sóù<xA´Úÿ¤à8PJ±¢(´R©×]w]ÇØØØò+¯¼ôööZ¦if 8 ¥´,K @Ül6ùÑ~ÃÚF/×¶&ÖÂ¥ã8n.:;;Ù¡C¤ªª (
ã%í½(<_õÛh4Z*¥ù@æÇz½!Èd2@ÏóPOO>ã3¨R¢HS%%Yj@é×i£*¿9ì$#!ÉaZ­VËår1!ïû]»wï7MSÎo]'@@½{÷ÂC=Xºt)C.ç{&''¡R©¢("×¬YË-#»víRÇÆÆìã;®`YVFUU5!¢dÇRQÉ9©½Æ¢²?r¼Å Â£f³u]'Ï<óeÑ:>>]×E¢ \. ¢(B¤Åèìì¹¹9Èf³ÍfåóybÛ¶:::+õôôäB6çÜR2]×¥Ë6©òûïç7¼¢(BQæ8N¤iZÔÛÛ¥µad2 ÂììlD¼í¶ÛÀ4M8ã3äÙg-ÿîïþrUU¡Ùlja*¶m{¶m÷Þ{¯:00¯Y³Èd2rþ Ã6Úh£6þ ðÅ^Ú:E  ß÷£b±èø¾_9ë¬³.^¼x V«¢-_¾<>õÔSÙ©§*cs®MOO«FC	 Û¶Í<èú¾_m6ï|ç;'Ï9çBÈ ¸¢DRJ¡¯[Hú{¾ä~þGB`e¢øB ÎùTÿØ=÷Ü³èo|cGoo¯yþùçÓO?]Ú¶ícëãxÓÓÓ<CRjA`U*­³³3333_|ñ¾/|á[mÛÞÏ9gM)REÍ	!ZÊÁ¯Úöùïy`BÁcÁððpý?üáeYùéééÌÝwß]¸ë®»@Â0Da@³ÙÆX«¸Oi ®ëEhFÂ0)%Ôëu ¢( ¥Äa(ãØßüæ7»o¹åtùåýèGí¥K8#!DÇ1·,K$
ÀöC>JÎgèïð§ÄUªMÏdÎù1_4ý¶ù¿Sc¬õç¹¹9¤ª*Öu]Ö?øÁjÕj¦=ÏCRD)f³ÙòòLü¯ V« @`Û6¤­Á¥R	ÇÏó )!!0ÆÆ×j5u×®]óÎ;¯1.qÎç!!çY%£(éÅ_[ÜÆ»?æ«é8ç@)!Àól6J)EQL!D¼mÛ6urrRÕ4f³YìyÄqeã8 ª*###pß}÷ÁßøF8áÀó¼Öp¬C¦iÐl6aÏ=066:;;q¡PP]×µÇÇÇKe4M3¥4!QÇRUÕVgÑÆë¤ç çEI­c1Æ0ÆBÈªU«È¡Cðèè(ÊçóÈ0T¯×A4M0Aa´ZËÓ6Ðt¨]&Ac´ÿ~Å4Mcll,òÉ'e |ßG¶m{B  ¥TÌÏiÖíý+kNLÇqØÓÓÄqB8¥TbeµZEc(!,]ºÇ[n¹yä´bÅ
EÍfõB¡`E @UU_Ó4÷ÆoôTUõ²Ùì´ã8uÆXËå8cL¾Ð3;:Ä^©kóþÝ¢@Jî§µnQº8Ú{;¿qË"'=wx§¹pÎ[uSz±¾pêÂïõr¬³VðþI¤(¥c¬ZewÜq¥üà¹¾¾>|ê©§:oxÃfÎ=÷Ü©é|>ß°,+°,QJ¥çy,zzzfÝºu{î½÷Þg_ó×l_¶lÙl6;V(&  A:m>q´¾Ô´=C¢(½ÕF	(ÆXRæºººº¾þõ¯wlÝºÕ~â'è³Ï>Ë^õªW9'tÒÌàà`¥§§§bÛvsî{Ç ¾ïÇº®×Ï<óÌøÄ'vÅ­Ý p ¢iUURJ_JÉ àyíaÇÂ³x9`2 EÎÎÎåËÇ-i>Ï}ík_³UUÕ  ¢`J)ã¸ðvuuÁÚµksõzr¹ÜóÌÿO9å1|ßaFË-sëõz!?ýôÓò_ü¢¸üòË½b±8'¥t¶p±Ð³Wfþ»´ßä18µÏ#©nD©(¥sN¥ºa%ÆØ;wíµ×.áBzERÇA)±O)Ë²ZäFWWèºA@ÇP.azzºEÜ¥AR0 aÐh4Äèè(Ç6lðB>c, Ä®ër]×eÛÿ¬2Ö-TAb¡ª*
ÃI)íY~×]wd³Ù<ÆXB´õsÞhoY¦ipÊ)§@¡PZ­púé§Ã ««æææ 1{öìwïÞíÆq\íìì´m»1n"¢dà\;Öý	@)0R
äû>2MDQD5M30ÆqßÎ;üã÷d2LÇªK)Q.C©â+UA¦	Íf,ËÃËå2DQ2$êQæºnøæ7¿ÙÓ4M2ÆH6ERJéº.Ïd2B!ÆºvLûÝBÞ¼D¡aÓu½û«_ýj7Æ8G)ÕcÔ²,tçÎ?ÿ|tÅWH mÛ¶A½^¾ïsÏóÂ\.×à»¹\.Þ¼y3ëéé©"ªªªÖ!B'Sºeû½²ò¤¯ùBTùK¾t4Ú$ùuó:øZ1)!÷Rk/$¥DRJÄKù2^ZÍ_?ó;æï-6ÿ.>U©ª
cÉ9FB<BHýÂ/¬]ýõÍ7«¯¾ºiÛöTÇË£®ë¥eË²:z{{­ÎÎN~î¹çúøÇ?þl6}ÖqªªÎE 8})%B¤cÞY¤·ÑcÐ4Bàº.`X¥Äq¬îÚµKU\×ÅãàZ­û·«^|ñÅúW^IN>ùdß¶íjwwwµR©43LiffFÝ·o_ýýïÿÈððð×u÷RJÇcL&¸®Ë4MãpØôW.,þÛ7!t0Rîy¯iÚ¬¨ªJ=ÏëøÉO~âÁE©×ïûÏ»]xë[ß
ýýýpÛm·AµZm%ÚAÀI'ï{ßû \.Ã¡C`ïÞ½°mÛ6{ì1oxxxúñÇÝ½{wíÿþïÿYMÓ¼8!D`¥ªªÇÜµ£z¡Äe~@z¡¢=/´Ú82ù7ÿ}:´@×u@!1  4ÍÍf³Édº§§§;J©1& í1EQõz|ßN8Þÿþ÷Ãèè(<ðÀðäOBµZmyõRJÁqRB6EQ`ffI)I&Ñ}öÙâÇ>ö±¥6mòn½õÖ(¢X×õ8cE0ÿ%'âm¼2ª:+Hß÷e2uxffF¢àÃfmHJ	qëº`&èº1°m4Mgy>õ©OÁÒ¥K¡££J¥äóyÈf³055¦A©TË²ÄÈÈH<;;ë7-Ër1Æ üÆ%s/â8qëüR"J)RR)¥mYV6ÃLOO®(
Íd2hzzÅbËÖ õ7Eµü1ÆP¯×!Íc&&&P¿l4(cËå¬;wvò\Ù××gqÆCCCyUUGÿ:±ÀG®½~wH @AHÛ¶yA6­K)§ë»ví
\Ó4áyÊf³hnnr¹("!ÉÀ½÷Þ¶mÛÃ0T|ß·'''Kg}¶»|ùòB(­(ÒÔ4-tÇ+
!Çq,MÓlYDµñÊÍRßòt§éû6Úøsa¡Î1Z`Ïæûñ§¯4N|øS>G¦ªÀ?òïw& ç³ ©ºHQ¤(
2!Èää$ýÀ>  òÔSO©·ÝvÎår!ÆxÆ²,_Ó´Có\E=år¹´dÉÁ¤eYÏBÆ(¥B1J)#)%3C,,6EÂ)UÿiRJE¢MÓTÆ)(":¯½öÚb³Ù4¥ªiÄ÷}277g|ë[ß*<øàâýïüîw¿åóy_×õ)Ó4Ý(W^yåÌàààÎz½¾7ËM:SBBfYHdörá&h/<Ï¦ièð(N?ñRA?øÁ°EQRAJ	¦iÂìì,
xÃÞ Bî¼óN   Ã0 »»V¯^Çw\:XÎÍÍÉñÃþ0nwÞyãB«V­:´jÕªFÇMUUgcUPE'È6ð
ÏÒ°O¥9Ò?¯'kA.lmòïÈÐu8ç!É^&RJ5CSÓ´eY½;wîøÌg>Ó©iZ&Í*Fçóy¤iß÷Á²,h4@]×áÃþ0\zé¥ðÏÿüÏP«ÕZêl6ÕjÖ­[ýýýEaÕjÒ	âÆt§óöÛo¶,+üÜç>ç5¦mÛç¹®+çÿm´ñïíóoÒ	!Ï0Bù|aéÐH¼Á !Ô*;;;SBFGGattV¯^ÀF£!óù¼TUUËevægzK,©®X±âªªS®ë6EàðçónßÛm /Å1Ø¶ú7bÓ4Î¹eYVsÞéºn?!¤WÓ´R;tèÑu	!ïûh¾:­C<Ïk­ß÷A×u0MSV*0MEQã8VÃ°n½õÖr½^gº®£Õ«WËÿ÷gë×¯oDQä@úüåï7Ûx>lÛa
Ó4ãZ­æ¦9·~ýúÆ¶mÛ]×YB×u\­Ve&¢¤ë ¢ÓO?¢(B÷ß?Ùµk699¢Ëåx``f³YºråÊQ!hÆBÓ4	 ²|i~>¹Pi£?;8¿ÎIâ¯@rQ~H?X]È8[Þ©I))!1ó/7·ò¢`úÁaB`r¸U¢ÈÂg¿ýíoç§¦¦2¢d6oÞ¬÷ôôÈøÃücûãOêº^Ã°:88X±m»°wï^Ã÷ýÆx"ã*!¤)¥ô±®ë"ñDâ}Ìði<4Ð4kFc¦çy¦i.þô§?=xÛm·u	!lÛ¶  ¬ZcÁèè(¾ækÈ-[ô«®ºjöN¨
ÙW¿úÕQ¡Pò}Ì4Í)ß÷ f³Y¡p]W&Á¶?!LÓDÓÓÓ¨\.£8eYæÄÄD¾ÙlÚQ©¦á8Qêí  äóy`i°aÃ8åSàÁ-[¶@jb^( X,Â¶mÛà¾ûî=ô÷</|Õ«^U»àéº¾¯Ùl>gYVÝu]cìÅqìBBB'HÙÎ_ñìÉ÷hÑ
ö[P$óËã<æÿ^àà°á=QE  
 ÐÃ[|ýõ×÷ÿêW¿*)baHÃ@Ùl4MÇqÒ>­¯](àÌ3Ï±±1PáÀÇ1LMMÁòåËá½ï}/lØ°öìÙ###r×®] D½^ç£££Ì÷}iYañ«_ýê¢K.¹dêì³Ï>1u]×Ïd2Ü÷ýçµ0·ÑÆrþÌoY¸GRkERÓ4iYV+ANÿÿìI[áEr¹ÝÝÝ055zÊ®ë022çAgg'ËeÈårP,E±Â³,kVQ)×ugB Äó v¬û=1ÒuaH 09ç%Jé"Ã0<óÌ3Ë~ô£ÿûßï ¥R {¯iJû¾ß²AAA`$È(À0iYäó©©©xppÐ[³fM J%h6 ¤çy2m!nø&àðàÒ|Ýë^×¸óÎ;}!Ã8¹¦iB×uaYCÍfO?ýtÄÃÛ·oGããã´^¯ë?þx¡^¯ó7¢3Ï<Sd³Y16^(jµMÓÛ¶¡Ùliíð
'S¥ h©~6?Ç6^yHf/¤]w©â%õ&` r.Ã PÚ\¸K)¥Äd
=RrøµBÎçÚæ{ÿEa¦·°cL2Çq¢çóÿ|Ù0¬ïû!¤ª7Þx£þo|ÃüÅ/~]±bÅ~ w]w¼««kòµ¯}-½óÎ;# R¥1ñü_JE2õ0:Ö,!8ç °¦iÄ÷}=ãmÛxâeßøÆ7!Êù|Þ¬Õj4ËáÄ
)DAo»í6}Ï=Ö'?ùIeãÆK,iÖjµÙ®®®¹0] LÓäç	?ïHw;Yzñ ÷[Z¦eRB{§	!rÅÉÉI TUU±¦i¨^¯·´)¥077?úÑà=ïy~úéÏç¡³³öìÙµZüq8pà tuuÉeËÉÕ«WÇpÂ	þÿûÿo¶»»ûcl\×õÉF£Ñ,
¡"¦ÆcNóð´ñÊÄ¼ç}iB _¿Ö_-PüÎoÿOÁóÉ¿cú8	ØòQ'g°Ç± %BHo+&''»óÎ;ûMÓÌ%q!ã8¨ÑhiEQKýëy`allFGG¡··.¼ðB(ðï|Â0+WÂ'¶mmÛ2ËÉB¡ êõzÔh4¼¿þë¿öFFFü­[· BðöíÛµW¿úÕçy¤P( !Dª^lo¢6^8øü·ß§URIá¦iÆarJ©BÈ @UUãlÛÃmõ¦A&UU¡^¯Ãôô4pÎ[Ä@2cèîîRáºn Í8gâ8®"¦iFq?OýÕÎg^ZDQ¹\ ò}cÓ4m èÚ¶mÛÏ~ö³÷ßÿ¢J¥R6ÃJ,m0!©ª
¦¢(ß÷[m©'jP,¥çyc,N:é$Ùl6%BÒI'U¯½öÚ½eí2Mó¥´Çñt£ÑÍåraRµúEQ¤Rú¾ÏÃ	!Íµk×¦ÃC)¥æû>+Q¹\×¯_ÏûûûÑää¤ÒÙÙI1Æ
crÎqZçT«UºeËcçÎÙüä'ù/¾8{é¥Z¢(Ùl¶Ud'­ßíg÷
Ë^ \g´ó6þRÖkòjyû!B  å+m.¥TcéöIí%	!2¦EQ!BH¤iZÇ±HHÅß»½üÊ	! HÇº"oYV/clø[ní¡f À  B¡ NMMi³³³Æúõëí{î¹G=í´Ód&y®ÙlVþßüæ2 LUÕß_ªüÃÿÇÃ±v# i0Æ\÷·    IDATPR@eÙÙl¶s¾øÚk¯]¼k×®nÃ02ç)B×j5¤(
¨ª(¥HQT¯×ñ¢Eè¦M÷¾÷½ä[n't³xñbq¸ûTaÈu]°,«å%§ªêîÛøã¢´%CjÛ¶-¥,}ík_Ë!Ìl6K9çØ0Ð4(¥ ë:`¡V«Áý÷ß_|1pÂ	­©h6P©T Ùlªª°lÙ28ï¼ód6åQ½½½Ã0f9çJ©£iW¯×ãd²¢H!ÛSp~Å¨Ñ0 à$äýóÀùû;¹KÕ  ¸!8!DË$àÂ©ô	éÌ"ªª±EFÉ(Ò	 Q÷Å/~qy]cË4Mªª*:pà PJÁ0¨×ëøUµ¼ÏÊå2lÚ´	`ÃðÚ×¾áÁ±±18xð Ôj5Ðu6mÚ<òØ»wo´gÏæi§V¹æk*RÊÆ/~ñPUÕøÐ¡CõsÎ9gÎ¶m?Cæû¾PUµUd·ÑÆãæ%ÓóÛg°sÎQâÅlÛöW­ZÞÿýLJ)Ç¥R	¥Sï3ôööB©T]×a`` vïÞQªª099	®ëÊ+WB©T!9==ÍþÒ¥KëË-«H)ç\×õ±¦imõß²ÀHÎ  !t]ÇqÓ(ßûÞ÷ëºìu¯{¯ªªÿÈ#Ä{öìù|^º®QA&iÅb2¸®333`Û6Äq,@¬\¹_rÉ%Æ!ÐÌÌÛ³g;555ÝÙÙ¹!´ÓuÝC¦Õ)¥N6uÃ0	!Gôl+^<ü¹®,Ëf³)ÃÍ¦[.kwÜqóÖ·¾5ü«¿ú«ðmo{ïêêjf³Ùf­Vón&CaV«Ub*¢%Rq¥RñºººÑÑÑFO>Ùw]k¦iB077×"Ûxå"õN½^!?è·XÌ´Ïé6^Öõ9¯6" @	!BHR!!d@ LB(Qªî#BH/Eæâ8®qÎë¾ï;Ò(¾µÖö_T°i x§*Q¥ÇuÝe?ýéOWýÓ?ýÓ¥´,¥4u]W ÀÓÓÓÔ0jYâ8vÁÐn¸®¼òJN)MÓl
!ÜjµËeE  É98eJv¼Áë±B@)EªªÒ( (I)î¸ã¡ÿüç4MË#tÃ¥R	cHÉô4ËåÐÄÄRUá+®¸BüÇüGxÆgÌA0eYVÃó¼@Á8çc,(¥­6¿ù2}màBò<X¥có·Ýv[×M7ÝTTÅªªfff@×uBHß÷clÛjµ
O<ñ¬\¹|ß©©)ÃTUË² "8åºuëd__R¹\ÎuÇ3M3¬Õj,Ë±dÐ4M"dÛÏ÷¤õ¥ìpØ"T Ð @ u!	8¿hO¦K!RFã@J
!"BHÚB×¢¨+¥8õúcéc3mÛ]óÁýû÷/ðÁ¿õ­oüìg?ë*J9J©633CÎ:ë,ô¦7½	ýçþ'8ÅbÇß÷[*ÀJ¥¿üå/áæonMþH7M @.¥RIìÙ³xgyfå£ýèÎ+WîfUV¬X4MAÜÑÑ1EÑ4 xcFí[ø6þhà×ùÚ|b<±ËÁD¡ ±1Fë×¯ÿõ_ÿ5:tèRb±O?ý4ÑºìêêÛ¶R
ªªB¹\J¥1ÏçÁó<ùì³ÏÊ Æ¦ÅP×uWÑ@yB!R@ú²²íøÒõz]êºº®ÎyE³téÒ©|ä#2¢¦®ëM!\sÍ5/}éKÙ(4Î9Ñ4ù¾Q®ëpÚi§Aoo/lÚ´)&	!Òq~öÙg^z©»ÿþè©§¢;vìà÷Üsó¹Ï}®Æ9`*ÍV8çç<RÆ±ô«ýÿÀxgYJÚ³ç%F÷üÑGå³³³|||íÞ½;¸øâ«FcjÕªU³±èÀzmÛù\.WzÍk^ûêW¿ªxç17<<<~ë­·>·dÉ½ªªîgM"Ïób±ÈårRJ)ÛÉ^yñ`>Ò!AcE¦	q£´õòEo{ß¶ñ'Æ8¿Q)¥
 6 ä¤ÎyYQb³Ù,wç*V©TÈÄÄªV«ÍfeWW_ºti0<<<700p(Ï¤`c\R!ä/ë¦/¶IÉ¢HÓ4ªëºÉ+ÀàæÍ÷»ß½Ò1Î"´(H>Gqã8ñìì,Îf³!>ðÀÌÌ¼ækx1¥4,Ëç(}ß¦ÉôÆ0UÿÍW ,<<F2p¡avE1lÛ&B1Ëd2½SSSKo¹å%ãt
s®0Æp¢A©!|¹\FsssÀ9ÇLF	 I)Q¥Rþðùç>÷¹ð¼óÎÓJa&ÃPèº!øÂ	5óÿÜ¾/´N¬  J)J¼jPH×uÇ±Çqöæo."ìl6«Öj5¨0¥"mB¾ïËááaT*à;î8á@×u¸æk`jj
úûûahh|ßf³	BÁãÑÀÀ@H)QIÓ4eÇ2H,2ý÷¶ï+ ?Âù7¯EER*MQ3¢LEy]×R+cEJUUEa¶®8A×uÉ9a¾Ë9ºªªB+,"¡i?¹ürÞiï.>Òó/ÙÓ(UjBÆ*¢	!¬jµ·,«Ïç{ggg¶mÛ¶ìnXz÷Ýww¦YÌår6cL *@;vì@o~óáË_þ2¼ï}ïZ­Öx¹råJX¶lãÀÝwßoyË[ ¢I1¾¾>ÈårÒ4M¹téR¹hÑ"¶oß>çCúÐÄÆwÀVMÓ&Çñóù|Z 7¥sB 8c,=Ú¬ß°²H÷ !c  J)`!ñJ)$E
ÃXQ1&!%UQ1ñ}¿CÓ´ 2[¶lQ9çø²Ë.CguÜu×]°}ûvã,ËÃ0 P( !FGGÁu](JòàÁÒ4MLvûöícÆÇÇýã?Þïíí!cEQ$R¯Á#Ó·Õ_/MþcÛ6! C!¥	!nB~ÒRÕ÷È#DªªrÎyËzÄ÷}ÈçóuÖYpâ'Â;`Ñ¢E022er¹Ì1Æªªõã?ÞýÕ¯~¥>ùä044ÔØ¸qcSárÎ=Î¹Ï9(¥qÇ\×u)³Ñ¿Wl=÷ýA`­ÏyE!qk `Yk4¹o¼ÑÌårÊSO=E÷îÝ«~ï{ß3þû¿ÿ[UU5$L-Z´È¥¢éééÜ	'Ð÷Àô¬_¿^§6.¹äCçþs]]]ÏI)2Æ¦MÓ¬I)Ý(âT^v¿PmØÆ_N~µÐC:Í)¨HUUð<BëºÈ¶mäyPJAQHýÏ=Ï)¥´,Kú¾/aLúõZgùüï1ßçÏ9mµ¿ìõ9oJ×M2p ¢H§æ èReã86mÚÔ÷Ýww>ñÄÅýû÷Ã°0Æªëº8Ø*	!ÍfyQoooãÜsÏxÏ{ÞóÜòåËíÄÓk&¢(R+Ô3á¼ìàüó_4M£FCÓ4-Gé¾êª«jµZoGGG!¤7B)Å®ëBâÝ5MSjµ¢B>ë®»|ß×\sPJQ³ÙÄ©²))eÒ)u]QÒ± 9ç RJË4ÍrÇÿë¿þkéc=ÖÊz§B¥qÎQzp2Æ1ÖjK¢B¨®ë(xöÙgáºë®C³³³ô´ÓNÓ8 Äü0k%@ÛVöüíÂ?§­ì ¶)¡8Á0ìy¶,Kñ}_ÓuÝÜÚµk3=ö^¯×©¢((iÛ¶pÍ&*Ë(ÔÙÙ_ýêWÃää$ UUaõêÕ°~ýz1ÌÌÌÀÌÌLËGlçÎ055Û¶mÃCCCôox	Ã°=ÊõùÍõ  1 0ÆT± ù Jº®÷ÄqÜ399Ù·uëÖüþýûõ§z$U«U(EÌd2rxx/Z´(8é¤æ/^<N9áxÓ¢ÔTUõÂ09çR*9çi÷$P´¯çÿ}Ò¶B(¤ª*&Ææû~FJYêìììãxÉØØØð}÷Ý·øßþíßaØ¹xñâ¬RG©µZ ahrrn¸áøÂ¾ 7Ýt|êS]»v¢(1ã;V¬X¢Àw¿û]Ë/¿6lØ ¯ýëa÷îÝpúé§ Àøø8¸®+úúúâÓN;Í?þøãg	!|ß?EÑd.óÃ0É­c$¥¥5g» ncáz_ù¾ß2âOTY ëzkë$C!AÍ¦EQ*,Ã0ì83" ,9îöÛo_úå/¹T©TK.¹¬_¿uttÀc=h}1LLL@½^0%BHñ}ûö±0ãL&û¾rÎ½_üâÎSO=URÖ/¹ä ««#d¢GÚçíñ%ÍÒóD @*@Ã0¥â;ßù¶eËUAs¹ÃcP*Àó<ð}&&&à¢.%K´¦ß{ï½È÷}xøáÑE]ëÖ­_÷º×1P´|ùò¹(¡c,V,áº®ÀË¼nãÅóô9ÎË7©ªJc¥4a7BhðCúÐbÆXIJi¡»®«lÙ²E¬Y³éK_
6nÜØÌçóÎùlgg'VUujíÚµ=0®¿þúÙr¹|  8SY pc! ÄRJìÝc~@ä+iWÂBò/1nu¦BAïdÄ9tlÛB1;;Ëu]R;SdÚ2*¨Ò÷/³téÛÆ±4Ì¹@AsÜh4Ôl6å/2MsÅõ×_ÜW¾òÅJ¥G×õ¼Ââ®ëªqc6¤ÀãÈ8ÙÖ­[ýü£>¹å[`ùòå¢(NE¡ªª<íFPE¦^ÿN@XUUÍfm èB,¹ì²Ë~úé>Ã0
acÊ9Ç	aÊÀ eY(	à(CôÙÏ~K)éu×]ghN:ô<¯nÛ¶äóÕÇ ®ë °çyÆ8«ªjïC=´ôk_ûZ%J©U¥¬qÚãy^+`BPcUUäæî¿ÿ~Ø²eÜ|óÍb`` á8NÓ0ß÷ýXUU1OÚÎÿÄR
¯"JÄC1bê8iÛv¾Ñhtd2Î.º(ÿ/|A?þøãñ5kÄæÍÙÈÈHÆÓ	²|ùrzî¹ç¡¡!|ÆgÀîÝ»Ñ;`jj
ªÕ*Xs(J²R©Èr¹,<Ïãq¹\Î»ôÒKÍf³jÆä\KÄúQs@¼ é<ÿüÖu;£nñïû×^{í'x¢OJÙ¹oß¾eYê¡CZmW333ÍfÁu] Èr¹ÌÃÖ­[×\³fÍäÚµkþù{,ËÚ[¯×G1ÆÒ0A  ªªô}Ö!2i;#ç¦£("  ÔëuÝ4Í¬iãÔëõÁÿüçË®»îºÁG}´Ë¶íBWW-¥T]×¥!lÛ6ª×ë( ÀÎ;áþçà³ý,¬[·¾ÿýïÃO>	RJÈçó ë:ÁÞô&Ø½{7lß¾-Zó7*® iRJqÊ)§°µk×zeÕ}ß3£1nAàÃ¯[· ´.~Úg@é:!ulúJoÌÓi¾ªªA B¤(
6pÎiÇº®ë¶a%Îyçy%ß÷Kao¿ýöÏ|æ3KöïßßÓÝÝ]èííÕzè!R­VÑâÅmÛ°}ûvL&»wï0¡££Cær9977Ç¢(
}ßwcnµZõÃhÚ¶=ÛÛÛ[[±bEõ¤NíèèB9óc,Úëüe# Óµ#@`9BHÄqcêÔÔ)¥ÔLÓ$ã !Êd2A«ÿÙÏ~ýýý`Û6sÎ9°qãFxöÙgÑÈ¾}ûÔ­[·]]]Q6õßùÎwúe¹¡1Fs¹Äq2pÎ¡=äìw#pÒ=?O³`,P¤6Æ¸+Ãáx`åw¿ûÝA]×Kº®ç©i"À{ßû^þ| øøÇ?^RÎFQ4£ëúì¥^:qÎ9ç¨eÕ¤]×«a6-Ëò1Æ±sÎ!¤«" ãßÈ^à"´?c~º°"µ¥! ö}_±,K =1 Zëõ:2M0Æ ëºh6e³Ù1+{ÇTURX:Àü¡
óÛS5àü÷í6Þ
4M(ZkR0ÆÔ¶mcÜÁ[vÅWxÿý÷711Ñ[(ò!1¦aHUU%)iLGO×¼TEd2½Ùl*>ú(ºñÆ×]wÝ¸aB ¡Ôö7³0Ù¿ >33Ëår}·ÞzëÒ­[· @1fú¾¯  N<ûP¢à1ãXÆqs¹J|Bä+_ùºgÏìÒ¥KÿøÇMUUQ&÷\È9aÂüv²#½GûÏ9ÇsJ1t]/9³è;îèß½{wG&±¤jÇXJÒ1ÕéLÛpÒÃ1â8dÊ¦©û¾/+¼é¦âþþþúºuëêA4B!¥sÎeR¶qiaÿ1dY8[Ej¶eYÅZ­Ö§ªê²;v}ä#éBcccøÂ/ä7ß|³÷Ï|¦¹eË"ÕjU]³f¹råJ£X,*£££dbbfff`ddúûû! iÌf³Â;;;Ã64Ãêèè8¤(JEQ1z¸ÉÛ  |¡¿@ÑuÝFu»®»òG?úÑñ×]wÝRß÷ûæææJÓÓÓl6«sÎIÇ-ñÒ¥K!"ÀC6¾ïËF£Áï»ï¾à'?ùI¹¯¯¯ã+®È½ýío7òù¼ô}?Îd2R*â8æªªBÚbw´þê ¦  ®ëê¥RÉÊd2!DwEK§§§úÓ^òÍo~³ßuÝR©-
úØØÒÑÑABXQà£R©¦iã8-ußªU«à_þå_à-oywÞy°sçNÐ4ÃM6A¡P¡¡¡ÖÔO>\×]»v¥fÚ2CÑÑÑ¯ZµÊ/JMA@)Â0dR¿ê,Sò¯M´±LcÝüB;-ªB¤NØ4MÂ9§ajcSJRvj¶d|||ðÁìùéOZØ¼ysndd¤Íf}}}6çÜð<OÙ³g~àÐk_ûZÈårÐÛÛ333077ãBªª*BBUUëoûÛ'úûû§ ¨Î¬[·n2ÏÏ@RBAPG¢$¿iO~Ó¼ß3¥ÝÝÝêÀÀÆSBÄ0 Ðh4ZCÏÃ]»vÁÿþïÿÂ»Þõ.èëëzù¾ÝÝÝÄ¶mÍ4ÍëºDÓ4¿V«)a")¥×ÑÑQv'Ífg2n6HQÐu½­ ü
ãù~ßi7B#Î¹iF1ÃZ­¶âª«®6£ 2®ëªB\¢¤_ùÊWïûÁ'>ñ	Rê+2C)­ær9Ñl6ãfÇ>B(¢©ªÊ£(qüÿÙûÒ Ëª*ë}¦;¾ùå<Ô5fMA@+¢MË Ñ!h¶ÑF;@mAÛ6ÐÝ¨h+
ÈÐ% R5d9Oo¼÷{Ïðý¨{¯Òm?ü>(ßÈÈL2©Ì|÷}öY{íµº·Æô	ÈÒ;açüzííç1Më'¢µ¶(¥jµ·m»a±\.ûaZ¶mãÔ M;#mÛæe5  V­VeçsEQBRiYþ­çÝ¯Ð0ïÄñ5 ÆÉqHk `®ëf´Ö}wÞyçï|ç;kcËûúúJso~~Ëeâ8â#)%8Ì( lÛDQ¤J¥RB___ò­o}kà.:ñÄ÷2ÆfÂ0\×  $Ë²´É½Ê ]vÙ+]p0!Ä
 [($Ywþùço]á8NQábÖBP¼RÊ¼ (ýã!	!0!%Iâ¹;wît×¯_6oÞV«ÕcEºqµé.¿ x¬_0Rcì Ê±U=öØk®¹f]½^ïRfBü¶iXf&Ñ¶fÛÆ!Får91Æ;wîÄ¶mëN8!ò}¿nYVS)¥à_§Mò 0KÁ?H»\Qaß÷	ÆqÎ-¥ÇqR:Áçyë|ðÁMçsÎöc3qã;vÄ[·n]ü×ý×ñ÷¼ç=ÓË-_¹re³§§GËe200@Óg>ú(DQL&ÅbÇQLFÚ¶?õÔSÕÛo¿}â´ÓNÛU,Ãð`$RÃðõ]`-y3 GQB¬ªV«Ç¿ï}ïÛ<==½ªZ­
c,Ç±[¯×ír¹lQJY¥Raig!ã8çù¾oåóycìÌÌÌ¸Ï?ÿ¼=??guV@©¦X"¥TBmÛök¾ÃúJëþÆûÃæ3Çq\JiAJ9À[U«ÕÖÿô§?ÝüÏ|fôöÛo_Q*úòù|¾Z­º®ëZ¾ïÙÙY 
H¤%Û$	<ûì³°aÃ8ñÄÁó<(JÐÓÓçAWW<ùäðÀÀÄÄ s333P­Vu>×J)µcÇä{î	&&&æ»»»ôööîYPà8N"¥lx8B­sêDÛhÕïh'µé8  )%ÂJ) Ká @Ö²¬²Öz2B)]ÿàn¾øâ7^yå#FcHJÙ«*Û¶õ<ÏA1!F¡|>ïxÇ;@J	1ÇBÍf!Ïëdvv¶Þ××7þ©O}êù7¿ùÍÏlØ°á¹uëÖíR¾dYÖb\J9$IÅ¶íR*¤ªÓôúÓç×£ H8½üÛ¾ïç$¸ë®»VïØ±£_k Ë²,¬B¹\U«ÕÖÙ¶ÿ~\.sèéé7½éMèo|#Ú´i)ËsNä×¿þµ¼õÖ[kJeúoxÃïûBÈqiÎ:c¤¿?ìdÀ?+(B$}ßûÞ·ijjje¥RéÊçó^­Vc¶m£$IeYXJéá>ùä´T*ÁI'Äã8®!ª±JÇuqEQËåÖZ1Æ hqË !ÔÒÿëQ¯< éè8 `a2àûþ*¥Ôè/¾¸ùÖ[oÝxûí·¯è¡Ö¾øâ««Õêêéééjµ: =ÒB&É%Iâ7MÛu]jÛ6JõòY6í5¨ÿØFÏÑX¦x}G;Q*e#ÖZÇq\¥TÖzÕE]´yÿþý«º»»{FbqÎ©ëº!ÍDÑ]Ç#£nÌÏ`Û¶®V«q±X¬¾õ­o$,H)CB@é6üìOôÀ' ÀZkË÷ýl½^ï½ç{ONNö!òQ9LpÎ~¶,«Åi3?@@aÛ¶)ÆaÃ0Äs|ÕUWñÓN;­Ïçë @R1-8jögÔ¥E©`¶£*Äq<pï½÷ìÞ½»ÉdÜ(h8Õ\DÆhÂ°ÿø·ô5KY' ¥ÄÍfXå8ûÆ7¾Ñ¿jÕªO}êS3|ÔÒ    IDATsss]]]!D2]yIò8Ê!Ú4Ø0cU¯×|>ï	!
±>­õñññ5W\qÅòo¾ymÛ}Zë|©T²RþÛ¿ý[øáxnõêÕã}}}Çq¼íÛ·/\Ùh4 P(dúúúØàà 2è===°jÕ*­Ò;wî»ººù5kÖt]w¯b1Veq!¡wë1@·åpbY#¥,h­®½öÚîïïïae¦§§­l6K-ËBZk477c(
 ¥£çZ¯×Á÷}ÐZëZ­F8ç¤P(àuË-·\pÁÌqÇw I9H]dËA¼ÖÕR`ãhçK;¨¿uKfiPÔZ¹®»flllÝ%\²òÎ;ï&ô,_¾<W©TJ)s]LOOãB¡Ð c0;;µZÅ"A   ãããð£ý¶lÙ¹\öíÛ<ð lÜ¸¶nÝ
guÂK/½õzyæØ´ib±¨	!2ËÅ]]]Í0«óÖ:r]WÄq¬â8n×QÒ(0Ú?Ïüb.Næ½9ç(­ó 0­µ­òâ8Îe³Ù2 ôa8´}ûößøÆ7ñ_RJ»O8á¥Ô§ªµ¦R\×EaÂ£>
;wîuëÖçy°nÝ:Ø³g,..jß÷5ç\e2d÷îÝMÐLooïn)åó±0«Æ¤PJB Bi­;:bÿ×ÒouÎµÖZmÛ!Äî¼óNzøq`¤µùùyÃH ¶,Y«W¯Àu×]?üáaõêÕpÒI'¡B¡ 7nÜi¡P Î¹¤O<ñz×»ÞÕ8åS³Ùl½Z­rÇqd$Úó¼ÿ'#VÇø×öìB§÷F!Tô<o°V«­ýìg?»þÑG]V.KÙlÖ£ÝÝÝhaa9F¹®KSÝÛçyê²Ë.S===âÌ3Ï{zzB¥TÓ¶m*055RSId¨\Fj ­/:çÔëà~ÔÞ H×ÒZ3¥T&Ï÷Àè}÷Ý·ák®YñÜsÏõK)sB1F¤¡RÊb±ÈGFFê6mZ8ùäN9åéL&3EÑeYÓ®ëÎ'IR I)å®ë$IÐìÔ6h´!	JM8 Ðf³é0Æòõz½ç¹çër'ES¯×Yoo/)¸Ñh@³ÙDeµLÑRÌc2²\RJ¤Ìó<÷ÈaóqgÇ©Åq  Ø¶-$Q±¹Íìï   LJé!ú´Öë?ö±mÚ»wïr (j­)%MÇNy1MRnßli·EQBØó<¬µ&eC! Po{ÛÛ¸Ö: ÉáP¶më?ÓºEãØclùÎ;7ÿû¿ÿûúôi­3)KÃa¦`ë6ì? h9óÐÏ|=Eªc¤(ËáZ­fffÔÂÑÑÑ²²F¾¿'Úèí (!ÄãØO$O)í¥4ÍÕÍfsÃÕW_½ùüäú'xbc¬7Içy ôÉÅÅE>99Y=ë¬³¦Ç`¾§§'csssÎ/ùKrèÐ!566& HjµZÒÝÝH)×u¹ëºÍ8ç»ººlÝºõB¡ðBè Rª*¥4ºCñu|©jgç ßFYRÊ|½^>tèÐæO|â£]]]F# çys¥Øu]B1$@A $IP±XDÕjÕ\ðmÛÈqD)ÅsÐZ'ù|¾òæ7¿ùcl^h­!D·ë¯ã^ß£ìm¦µvã8.º®;LÙpë­·÷ÉO~rãöíÛWJ¥¾\.WÀm4VêtM±}iqq±Õ8CµÜ|ðì³ÏÂñÇë×¯	øú×¿®{î9  pcGtûúú@J©ªÕªØµkW833³ø|àÐ9çóâèèèNÐXÇãRjôþ´¹ìµ¯§NNèÄÒC;{!iwÓÃ-t'¢¬ÖºËqÛ¶Gë¿ÿýïoþÊW¾²é?øÁºÙÙÙåÅb±_\\ô$±Çaeq+¥rr¹§z*h­Á÷}èííùùy8ëº\±xúé§ïß²eËó}iÛ¶+¡f$"Á)¥$h¥^*ßÑYïz¨ýu5`Å;BÒOúÓe×]wÝHOOOO>¥uuuá01!P¯×aíÚµèäOß÷!càÃää$# 0ú×zõêÕsPJ§¶mÛ¶ò" û¾_OìÕÑ¤:ñ»a¦¤Fb(¥!DA1¬Úð¯|eËÍ7ß¼^J9H)-ahû¾O$AR!²mR},ÄÃ©n9ýéOJÎ<óL¹lÙ² ÙlFó¸X,z½®<ÏC ¢ÛÙ\æ|ìh8¾ö÷¿©S B( ¸ZërE«¦¦¦ûÛß¾yjjj !ÊL¦àû~6Ö:[.³Íf3wðàÁü/¼Pºå[º¾ùÍov¿ôÒK] Pò]×µ¥`Y¤(s´I¤gÖïH7ýoÏÃNî8vb³92U!Ç²¬"!dùôôô¦+¯¼ríÊ+{ 4"!r]e2ÛÔu]ð<R;B@Ç­1Vó$¢àÂ/¬`e%Zk%¥ÔíõÉ:è+O mÛ^³ÙìÚ¿ÿÐ;z-ËÊ!lÎ9Á#Ë²PÆ6¹ú&ÙxaBÚÙ8	cÌã8#¥ì¹æk¢J¥ÜpÃç<´m; )PcõÛ\¢_©¸8&×¦çyTkíi­K÷ÜsO÷#<·mÛQJQ12¯³6ÔÖ³hé6ÿÝX°K)Áó<\©T øÏ?ÿ|×wÞ9tÒI'b' 
 ~ËìÄ+$8LqÇ @µÖ¶eY>ç¼äû~ïôôô°ã8ý¿üå/þùCJ¥ º\×Íxç k6XJBÐÓÓcYùö·¿Ýuê©§>øÁN0Æ<ÏJ)Çu]ï¹ç;vì°÷îÝçAú©§±±1õì³ÏÊÓN;-ü¿øÙ½QíAM(¥jJ)nô¿Ú÷Vç`{}ÅËØ1+ °\×õ÷îÝ[\\\ÌÙ¶í2ÆØüü<^¿~=:pàq»)%PJ¡^¯ã8­	!$	¤1Édp­V#årAà<óÌ3.BÈRR1N]q[ú<ÇÀ
¿]!Zk¦µv´ÖEß÷`ýM7Ý´åÊ+¯Ý³gÏ`___!c¯Ñh°(H©TÂsÏã8 8!V1!`vvººº ËAµZ[n¹N;í4X¶l^¾|¹þÿùÝl6õÚµkaxxËeT.Áu]@Ér¹UjµÚ¡ÁÁÁ]ÃÃÃ¿IdeYÍf3¤Ê8Uûª3òÛ£­ÿ¥Àí1¬¢BG)·m»×²¬¡z½¾ì©§ZqÃ7þüç?ïRóù|.CO)e3Æ(!XªÕ*2yJ)2u£ã8pðàAxòÉ'!Ý?Ç1@½^ç{ ÐaªÞÞ^õö·¿]J)ÖZÆq,BÖ:¡J±J'Ut{!Ù¾æ®ÿCìÕ ¬'ÔvÖI3Ï<3>í´Óø£>* @A ´Ö(=¥­\¹ýå_þ¥.Ë¨Z­Â¾}û V«A:Æ«/_«V­ÒeÁ'(wíÚÅþó7r¹\eÓ¦M5)eE°m[K)µã8º½QÞ£!¤¥û· d0Æ½RÊ5ÿýßÿ½é¦nZÁ Æ8/°!Rêõ:ò<2DQ:5Ì¢!c\R~ä#	zè¡F>WR ´ÖÇq1²JÍ? !¤#8*ß1yM!F"BÆØR `èª«®Z!ò<¯7ãcA§¦¦ïû@)F£¡)¥Úó<	 Ùb±XBtÝ|óÍ½wÝu×à©§:ð±}là­o}kcÌ Ð1Çqä`ÈIÕ©w:a@ºTqÎeYXAÀ¢ú³³³E (g³ÙìÄÄM!Lah¤íZX@$E@0cp8ç(Ï}@ýôV*µ}}}1 81!4Ë9¯¸®Ûã§N× ¢Iª#fl1}£ à @Ù¶í/~ñ~úéZëÆØRt¦µ#¦84ìÃ
4I;C1J)B Û¶mÛäGAïÿûEoooCJÙ[%ßqkóÝ¸ÃEA BHo£ÑXûío{ôé§DålÛ¶!Øè} ¯ýuy¹×«4®}RJp]¤P©TÄÚµkµk×VRm(cAQæà5Âc=.\Z\4ð<¢(BZkdÛ6N5/Ë¥URÊÑ±±±ÍüàG¿üå/¯NdsÞmÛv®ÙlºB$	 lYB!Î9ªT*ÉdôÃ?ÌÏ?ÿü¥´ÇqÓqõàâgy}öÙs÷w7¹qãÆÉ³Ï>{²««k²··wrnnn²R©Læóù	Îù¡}BI ¨Y§ÎYÆÏë 4L´ãÞÿmÛy)åÐÏ~ö³õ?ùÉO»»»óFÃ.Jtqq!o 8ÜñçR
lÛz½årRf¹Ã°Ùßß?sî¹çîCMca
Û¶uÇæñ;×öÎðkå¢jÖûØSªÉRH)Ó¼ëGQTrg!4zã7wùåo(¥¬y¢RJlBpÎ¡Ùl³B ¥l5ÍÌó4H$pèÐ!X³f>ùäõ3Ï<#xàdqqQLLLÈJ¥¢ Ð===Ïç5ç\õôôð\.WÙ¼yó¡sÏ=÷þþþ_ÀNÐ!P!ÄµÖ2}&z)ë¯:ñJh·Õ(.Æ¸ ËlÛÝ·oßñ_ûÚ×6]uÕUëwïÞ½Âq> (ÆqìAà ¨RH)qµZEJ)Éd!5 mÛP«ÕÀ÷}X\\N8FFFseA.ß÷a×®]Ð××'O8á1®, @ eñT119ÂÐ¤³Þÿø0£÷jòWE`Û6H)ÁÔûq[EàpÔUJå ÷¸ã¼óÎ;»Í¦"ÕjUc¥ëºJk­ûûûá]ïzêëëééiT¯×affº»»õìì¬RêÁÁAU*D!dnÙ²e»W¬Xñb²hY×ZK±î¸þ¯r Âã8ëº~Ý¶m¯8îãÿøÆùùùeã²çy¦æV¨üáº.h­çcHkM£¼ÙlZ>ú¨µmÛ6«¯¯O1Æ¸ÖZLOOkÏó$ÆX"H;¡ýîìÝÿÿgÄÒfQû=3]C!D2/¥\677·ùcûØzÇqâ8ÎSJíÔôø¾O(¥8u
'Ç±ÉBÈ±mÛÍd2;wfo¿ývõêÕ4­Pk- MÛØ8ÿþ±øAxlc¬5ú$a'³tf0Æ]¾ï¯Ø¿ÿÚë®»n0ÍfµÖV¡PÀ©©'J¤5êÛÆvÛ¶Áã  (¥-£(°mÛä^°«Õª_¯×³årÙö<bR* AQíë÷Õ6±¡KÇu&gK)©Õj]·Ýv[Éq?K)]×EAµKj~Ñ³ÙR"!RR!ÊÛ¶ÝÁT·oß>K©f2(c" ÉRôÞhIqí!{öìéÛ¹sg	 <1åcT_®ËµôÙ-asÎ!D3Æ°eYsî=ÿüóåÿøÇC§zê !d2Iºã8<iÛ¶Jýç_)á§âý¨Z­B>GZkEu]×ÅckªÕêº}èC+ï»ï¾!ß÷Kqg3²Í&µmg³Y$	A¢(Ò!ä8BØQåFÿõ×_¿xé¥ÖB9çÓ7oÖsssûßÿþ÷e[¶lI @wÞy
cõz]g2¨×ëbß¾}Z­6Ëå GQ$Û\;ñú]Rjt¸L	[E¬ÙlZRJsn ÆéA ¥R©Å>ó}Í&d³Y¢´Öàº®quÏóÚ5EÖ{GfggÆØNGºJiBÑÙlË!¤Ðe¯î|za `IxJ¥ÜÝÝ=(¥\wíµ×nþÜç>7jÛö°ïûEÎ¹åcÇqP6Es0g¥a-öª¶,R-×Ö÷3f³©yä}Î9çÙÙÙH)h­c­5:xð Ýl6­ºbÅ
¼iÓ&±råÊf±X)J»£îÔZJEÖZ:só·x¹óo©H*aèzWaÐúGydóþç®¹ÿþûûBÅ¾¾>¯^¯ÛqSÇqëº­ÚslÛ$IZÓ"RJãc`Yd³YØ¿?Üu×]pÊ)§çyæëèo|#üêW¿ÂÅbÑêîîÎwÞyý_~ùê÷½ï}uß÷yµZMlÛêphBÈc¿È«sùÇ·R ëº$	Ø¶  êõ:Êf³XAÂ0d àù¾aåggg3[¶l¡ÙlV<ã3Ç\8p  `Û¶m³à°$Ù¼y3z½õz]Û¶­ªÕªÚ»w¯Ìd2q¹\GFF&¥ÓãºÖ:6zÇ¿ï~Ò#Î>¤µF1¬µ¶$Éf³ÙþF£±òâ/^yðàÁ~Çq
'C¢Âf=´3/½ûÖ#,P&I½cÇø¿ùvÕUWÉã?¾ÙÝÝôôôp¥^ªCºÔÐ×Î=éw Ãì=Édpº6¨	!Çq²O<ñDÉ¶í|nww7¤Ø 2Sktâº.âC¡PÀs­"!6;;kY³³³ìCúxê©§ªãLJ)<ÏµÖÂìõö÷õÓÐRÈ¶mEE)u	!¾Öº1îÑZ÷Å|.³1Æ$I!ª×ë(cC 2$	Èçó  3åû>ÔëuX\\|>J +J¹;î¸Ý{ï½îêÕ«ïxÇ;Ê6l(þù¶ÖZ!$I$ ¨ô¼Ò¯ö¹üòËnÞø 9Jéðc=¶éºë®[#¥ì OJIÓ^®Cl¿Ñ3ìvÖr¹
 	!ðää$RÊ3Ï<3Ã0RFÒXk­ÞTa`Kÿ lqQk½ü¡Úø­o}k%ç¼ÄsÄÎG+ÖÆ\;rê~(¥`Y8Aèz½.ßô¦7ÃÃÃÕf³Ygq¥°,KI)u»Ëð± ^éYa²Ù¬q¸¦RJ7Rj8ËÞ}÷ÝÇ½ýíoß¸{÷î¾ï÷"
¹\ÎBØ©ÖZã$I#lÛF©n ÊårHJlÛF÷Üs>õÔS£EÐÂàààì-[&RlÛ>ÈPJM83É9´,k16íºîL6ó<o!I&ç< å8Nç|ç
BA-Ë"Â9'e1 pB9q7 ,ÿÅ/~±fûöí}CCCJ)cár¹
"@©TÇqZ=ÓÑr]R-&p À|¬}ßÍf3¢¨òÏ|f êÒ$I64 h£Cj-3q4÷×RkÆú-ËÂ @-Ërã8.BµÖë¿úÕ¯nùçþçQñ°çyÅz½îzÇºººðÌÌ dÛ6DQÔTMAk´ûÒîc«0]W3æë(äÌÌL´lÙ²Ê¶mÛÆ·nÝ:9>>¾811V*¤ÙlJ)eAT©T-[¶ÿÄOü5¥ô7BJ©Ji(¥  lÛÖ^ ù³ ZÚé¥GJ)u¤$ImÛ½í¶Û»þúëG·oß¾ º´ÖÙ¹¹9sÎr¹õ}GQjµCJ)Èd2°ô¢gòÉAJ sÏ=Ð¶ù:¥¾÷½ï¡ýû÷ã}ûöáÿøÇôï|'d³Yáû~R	BH Ð°Ò^kùçõRJ°m»+Ú¡#¢{G8çV­Vsc9ß÷»ÆÖzíSO=5zÑE­|ì±Çº-Ër.¾øbqÁÔ¶lÙ2ÖYgÕV­ZÅO>ùdÝÕÕq½^G©iêïï333R*ÞµkBDB¡Ïç'³ÙìÏóöaç  ÐZËTÇüå¾È¶m\«Õçy>!¤ojjjÝÔÔÔæOúÓk]×íËçóÙ$I¬F£	! PÇ@)m±Û>V
º£B" @§¦¦p£ÑïyÏ{jI,"ê¡!$BÊä Î}} Fï8%2 `õzÝfy¶m$¾ùæ×?þøãCår9Ç±­"Æ/Àu]1FJ©ª¹ÔZ£$IP.ÃÙlîînT«ÕïûSO=uÜ÷ýy­µ µÉKí òûwvÖà±Sß`¦9sÇ/QJû,ËYXXX;??¿þ'?ùÉ»ï¾»Ç±ã8A¡ùùydï¦ïû>8ÓÒNeç¼Ý$ xgÆ	!:t=òÈ#ìÙgÅJ©ð¤NZRÖ	!ÜYæÞôj¹üòËÇá0uz²   C·ÜrËÇ|EE%±ÒxØüËj. }Ã,=8çÈ÷}ìyÃ<üðÃdÕªU°iÓ&îy^Ól`8lB¡Û7àÁø¯1.!Fî½÷ÞÑ»îºkRÓZ3 ÀR:m¾ìë±´Ë}4-£¨B®ë")%ÌÍÍ)JiüÖ·¾µN)­ÇqX#¤aÿµÓñu p	ÚÞbib1!!aC!3ÌèW\qÜG?úÑQ-+Ë]RÊ,cÌ®×ë,ÝC8_y=ÍØ_Ú0!CÄ\.§ï¸ãäóÿ|M±(¥cÍcµÖÕz>¯ÕëõëºuBH#: 4(¥Í8BHìº®¤ê$I:ðë<W4MÍf)Bi­Yªi6%ÏózBË´Ö«_xáÕwß}wwww·Ç1õ}»®êõ:T«U0Ú;QA@)#Þl6[ RÊH>h×u5 ®®®èø@H)¥£Ë²PzÙVãË´Yãæ,x­äÿîcÌI¤1vgô¿þë¿¶\vÙeëóùü0B¨¨rcs'''Qoo/BA£Ñh½æ o£¥´}Üø|ã8a¨gggB¡ÐøÜç>7þ¶·½í7ï|ç;w]xá6lØ°¸°°ÐãF#<xð`ubbbfÝºuc6múb¯r65ØJBÊ<?ýÒ)t;»6×ßÖ(< X¡< º®;z×]w÷¹Ï}nôÅ_\&¥,Ù¶í'Ibi­IÇ¢(BJI)s®ë¶$b ØãyT*8é¤ ¿¿ßhÁý÷ßÆÆÆ Í¢={öàJ¥Bòù<»þúëÙ¶mÛÐòåËcJ©©!ÆÒZkóó:ëûÕ©Lsßäô¶{RJa!Ã; M]¡Æ*¥ÔúOúÓ¾øÅ/®}ñÅr¹\.¢
Î>ûìéSN9å@ww÷d±X¬år9Y(Rýò¿ÄÐZkQ­VC)em~~¾ µ]»vUö³-MÙ¶½óæÍãZëE !ÒHµÕyþ¯¼ý-ËËå¬0s¡Á(6\~ùå£cccCRÊÆØ1{<Í¶YÇ$IhúµÝ91ÆØ¶mlYzñÅå¶mÛ
Æ¸
 !B(9Ì59,ßùrxíæKåþ0B8ee ÇqÒÁùY3??ß$IsÎR851Aëy=5Ë²ã8Ðl6çËe¨T*
 Â8çÎ?ÿü±$If0ÆM­ub&PÚÏ Ø8Q:­ÃÚ[YÏóúRkvíÚµénýøÇ?>òü¤/Éd 05{ñ¿    IDATEdf:ÊV3s×	Ã
 ÚGµRQJ bBHP«Õ<ðÀÂ'?ùÉIß÷R!BH¦Uûý«´}bÉBG ã8f{öì±ëõº 8eD Ý?*øgÞ·_0^6R)¥ Ñhàr¹l[R\xáÑqÇ×X·nÝ"c¬©	BH¥?O/Ep;MfjµZyß¾}9 0à+6íÉèh&)KK¿Ç0P  	! V«aBEQþ¶ÛnzÛÛÞ¶æÜsÏ­ @=I(IºÔHË²ZÖcýp[je>¢Q$IlÆX!IaË²Öä#Ùrã7ööö)¥ÕjÕåÓ2[ëß0R ¢(2"èH)3á»Íf³ÈüÇüÇ/|áÕ(ªóïûÂ3L¬J\×UirÑLRm Jk­8ç!¤CQ'^·Ëå0çV*'ÍÚãL$¥\.× sss+î»ï¾µ÷ß¯RÊ¯Õj´Ñhà$I Cð}Â0f³ÙÒüKÍdp7ãªÆt( cï¿äKÄYgUÞ¼yóÄÐÐÐ~¥Ô)åAË²¦R5ã8Ý~±­QFø<câ!z]×]óànúÒ¾´.¢aq1æ¦ ,ÆC.CµZÍtÀÁ²¬ÖÇaNe1ÒÔ&IÕjÅ¢®T*rjj*ºã8ÍfsB¨~Þyçygyf×Þ½{{|ðÁÜ;p©Tjüñ(¥¢(Zt'ä'q«4×·@¸¯f¶f ¨RÊã¸ìyÞò§~zô+®X·ÿþáb^¥R¡®ëâ|>jµ¤S$	är¹V^i6­sÞ:L=eÄÃââ"<ýôÓð·¼ðØcÁ¾ðxË[ÞÎ:ë,¸í¶ÛH¥Rqz{{+V¬×^{m¼víÚÆÐÐÐ¥´$I¨µFOÚÉøß&c-¸RªÅêâcJ)aQJ© Y¥TwC®ëßtÓM+¿ð/OMMçr¹¾¾¾,çÜª×ëò»ßý.~úéÉyç·èºîÄªU«ã8ùùy299Éc0::öíÛ:thaÍ5Sgyf%Í§zj411ÑÀOrÊ)J© Ä°@ÐÉ{xSJe8çÝû÷ïïÿîw¿ÛÝßßå[I`Ãö4/B8qÿ¤p  2Ä¬ÔºëË_þòÐ[Þò¥ÔÆ¸  ÈÎ3{mÞ^Æ RÒf³éú¾_ª×ëeË²rÙl¶A$+ÆÆÆÊ®ëºQQÏóP(Í¢výhÃ¢ò}¿UÆq®ë"J©ã5Mìy¢T«UÊk,Ò·#´#2Û;ñçé n6Rêc{~úéçsÎªjµ:ÇqRêº®Kóù<ªV«Ëå!NÄq1²IhN\×7½éM°qãFh4 ¥ÉÉI]©T¤R*ªV«Õ­[·Îd³ÙqBÈ¡mÛ¶Í@S!4¤NÖfí¾ñ ô@p_zé%g Z]?ä =ÚØ©ùCRæÒZãùùyÍfmPsÞÿWõW{÷îRÎ*¥Zë!$Õow¬>FÇÍ{ 6B(777WÞ¹sg.ÕÙ"cÓ=;¢«¶TÛæhyi´woÓ)¦²L&ãONNvõ«_Ù²eKeddd>ÃB(b T
 Ó§òRº¸aÐââ¢×9)åPÇëÏ;ï¼-?ÿùÏGRÃãggg]Ë²¨ïû8Ç1Êf³F#§((¥-Ûp!A qCÇxÅ¬R©øav_ýõ+Ï=÷ÜúÚµk«ù|>J²Ùlèº®TJIÆLuRª9çÆðE§cùÚ¸v¯ï¢  õöö²(
Ò!Çq?÷Üs+ï¸ã¡þðýýI»ºº\ÆUJ¡¹¹9äû>(¥À²¬Öiêüa\²Ú*¥J	ÃÐq§tÓM7ýèGÅO>¹ÿÌ3Ïì;ýôÓ{]BÒZ)¥_oÝÀ_ T[­ÅÄö<ÏI¤äûþðþýû×]}õÕk<8800PB¸ ÀpOODQÇjµ
årÚÙvóÁAÇ­a=µk&µ_ l6öíÛ~ô£¡.ºH:SÃOA \×u6mÚÛ¸q£ÂRJ1®H)'RUP1VZkMÑÆñ¹Ý¸x¥ú-5
CclvÊ)¥úgggG.¹ä§~z ¿¿¿$ Ôu]lYªÕjÈÂ@sÞ1AÓ 3ûÀÄï3ûç'jµ
  óóó0110;;©.­ÕjnE§~ºï¼óÎ[öîw¿û`¡P@UµÖ<=»õË]^;ñÇÕHæ0 8IfY­ò(z}ßyì±ÇÖüýßÿýò±±±0»²Ùl¡X,zÖJ%Ñl6íùq·nÝÊFGGÃÙÙÙÊôô´5??ßU(ò===dbbBmÞ¼yqåÊû>ÿùÏ¿ÀÃ°F)¢(
-Ëª93-×ZGRÃÀNüÞú
¡ãºnsÞ{Í5×ô:ç;!ªµÆ¶m!ù$	LOOëº`î*æÌ7MÃMG;	cÌö</·cÇ¾íÛ·/?ùäÇÇ@)%àp  Ò×æ±æY v>ÏÇq<¼¸¸¸*Ëõ~ç;ßé'ôÜÿýý Ð ~6¥qcÛ¶Ûu^ö_ë<h¯Í&  ¸®AqÎñÆq£ÑÀ!dÛ62Óæ}»D':! Çq!DQdÍÎÎº^x¡W­VY.C¥Òaj­5Ø¶Ý °,2pÂ	011Fó»^¯ïû°|ùrøèG?
ýýý°ÿ~]©TôîÝ»åÃ?QJç¯¹æ}£££{×®]»·V«r]wR:Ní}Yð'ÉwäòË/_
@ð@2pé¥®ãx@J%°$I°ÖQJQ{gçhãÀíÛdjOþQïû ¥(¥a¤jxx8Ü´iSE)U n´ Z-ÜcÞn Â  OÜ½{÷n¸ay³Ù,Bl  fÇªíÔÐ¥4åÓg0ÏCJi#2ìË²PÇh||cñé§^cU   ±ÖÚkÓÉ¡ýÐi µÖ cÌÅçCQ­?ÿüó·lß¾}Ôqá|>_sã8f¾ïãf³R1Öú÷n[$-V¦§IõÔ IT,QÇè¶Ûn_|qØh4R©ÔàIÄ®ëÊZ­¦]×36aYV+Y`Ð°: ×w® à(ÖÚo4}ë¯¹æÑË.»lÍ/~ñá={öôZUL:S*²,AJ	ù|¾Å<ÃÚuûLád:÷æB HJ	LÛ¶MçççÙ®]»;î¸Ã¦Ë-Kzzzj PGq8ÜÅ×¯Uù¶ß©µÇ	!!¤ ¢hÃ7Ü°éÛßþöÊr¹ÜÇ±ÇqK!u?Miö)ZmÛn±ec­b4ã#RÚÏÔTGIqÎÅÁ³Ï>{Á÷ýÉf³9cÛö¢Öºáb$seMcg¢(SJU B	­µbé¥"ØKT'~ßH× Jc,1Hdý×¿þõÍ7ÞxãZß÷{Â0Ìah¥º¶04BÛ­=`ö²5ß}L8|À¶ÆÀjµqÆ°|ùòV·}ùòå°ÿ~ô«_ý
  ¹®lÛ­µ®T*ñi§V)Ó)ÎÍ8M@øßÇÑj´ÆG) $¡RJ[kÅwi­¢(ÑO|â/½ôÒããã+ ¯\.µÖ~ªýE	!8½P©ùùy>88XÙºuë$Bh¾P($BRêöôôàÆøøøøßþíßîÌår¿¦î¢hÌ÷ýq×u§0Æ3a.RJ é¡£ÕÇxÅ»RÚÒBhù3Ï<³ùK_úÒÚ\.×1ö)¥,óFíúífßÒYG1SO­AÃTóóóü]ïzW1VA5B±ÖZA¦¯©©='	 r9çå[n¹eä³ýì.ºhôÉ'\}÷Ýw/ß³gO¯¢r¢BP¥RË²Z£¿ægi£1ø,ËR¾ï'Õjµyî¹çNqÆ{´ÖS¡Æ8IDéÓúcÖQ'w{Kc(Õd·»»Û]¶l:ñÄõ¶mÛðîÝ»«P(Ð$IPE`d<ÏU«VÁG>ò  Ø¹s'¤þÏçaãÆpÎ9çëº ßüæ7ê{îIÆÆÆjÙlöÐ¿üågz{{R¾`YÖ~JéRªÚl6#×uejþ¡^?¿xg""¨T*È¶·7·_\Ú#ÕjæssÄC­VC <ÏÃI°ÁÁARÚuñÅcc{1ÆY±j®!1:Æ F[Î¢J)pF×ï-ÜÛGLñ³t¢=¡B cÄ9§ç¹ãn¼ñÆÁñññåã~!D."ËqÌkÑ«Õh_Û!ceB!d»®Kd²þ3ùÌÿøÇ£Lf¸Z­Ã0tèbL>2h­!cÃ°%l>7¶áãêRÐ[EëõºË+a8üáxm³Ù\A ×u	çe³Y3¶  ¥cÅ­$b.WItÒÿëüN Ú÷}r¹L|ðAûþéÜ^zÉ'1¼¸¸ À!EFfí¹®ÛùUJA½^1A )¸×*Ú1Æ-æZ.CL¦e2;;BàJ©ó½ï}ÏÿèG?o6Y¥CÐ%©=úZ½è¦E,¥zõz½c<òÐC­ùú×¿>,(9ã1Æ(!M­5LNNmÛËåÀu]¨×ëakô×üÛÞ3{³}$ØK)	cÌÚ½{wöê«¯.SJKÙlÖ Å9oB!33J©YBÈ"¥4t]WÖ¥iö´¿çòw´·NüEÚ @1Ä#K)k4sss«¾ño¬ t!|J)3çN&1N¿­f¯©WÖ÷ýÛÝ4ãòæ²fÅÆL'I®®.X\\ééiEâã8iöüü¼_­VsJ)k*#2Fæ×ÿ}R¢ô\!IXcR²m{s>Á¾ûÝï¾iõêÕqçw1éêêêâôô´W«Õ,  A`J)ªT*xnnJ)íÛ·gµÖmÛÖzºX,î+8çã®ëmÝºug¹\~Þ²¬ÝÍfó@&WJMrÎgêõúB&1C¢Ó·öß½óOPJ±!| (=øàÝZë¼ÒãrÎQ{ãÊÔ¶Bð!¤eÜc^ÿöæïû(m0L&cas÷Ýw_ß¾}û@ ä´Ö&¦p©óp^9B;£ÿú¯ÿþã?þÃ»þúë»  /î$I
'I1Æ1$	d2 UzÔ²¬Ûx­fQÇ
ÃQJñÚµk	 XZkcÌ!!~Ñ¾;ñg`k¥¶,KaÈkµZÕuÝï~÷»ýÊW¾òË+¯¼òéO}êS{ÞûÞ÷Î#¢F£!º««¤Éââ"4MX³f¼ñoR©CCC`YÌÎÎÂ¯~õ++WêÞÞ^Ýl6õÁ%!øÃ®83Á~¥Ô!­õTj2ÆR½vÓ¾WÁN² vÉVT;ÄËÄïcµNæûÛ7c*ô8c2;;kk­óõz}èÚk¯]óéOºÂ9¯sÎ#×uÆXA =Ï£9¾ÚBÿÀ?dº)I)%F!3Bã8ÎnvKÍWþ¿éØ°qWJ 0 Ð0=×uKW]uÕÐµ×^; µ÷}¿$Ñe<æªèö×ÍHrÎÍ?RRBK)ÍW«ÕÆØº+®¸bË×¾öµÑáz½^d¹ZkFÁéh2®»ei.äf¿Åq|Ä>1Î9ò<OÇqS¡\1ÖõÍo~sïû«¯¾zÒ¶í¹f³ÙÌårR
æææ »»[§Àk1.Ì³î ¾.¨£®ÍTY¥¥2InYVý3Î¹õÖ[³Q©ÉÉÉ ^¯'Ö÷¿ÿ};cây.f¤¯¥WQ¯×Áu] ZúsfËe @¿ÃµB;#Ã0ä®ëVW­Zµ¨µ£(jBõz]RJYF×ë5Ì>E)ÐO´Ö¶R* ³³³«/½ôÒãããÝë×¯÷'''¤à
 òù<J%h6-_kõzÚ_ë(ÿ Èf³-ð?"B@.z½ÒQ~lÛ6÷ðtÿÃ?üCWW×AÎùçyq¢!Í9×®ëj!â·.¾æÀC$-æx[2­¿é+¥4 hË²L¯u6ÃÑ>ï,¯üòrr!Æ
³IÇv$L&3påWOOO÷Äq±,ËbJ)2 »ÍyA«±Õ.­WLqÛ~.°p~~,ËZ­»víB¡ Ï?ÿ<h­!Ï·jUJ©°9¢±ôìë¬Ïß5µ&cÌhÅ" ÀJ)EU(Ü òQäóùÕ?üðºË/¿|ùÎ;9ç]ãäB>BÈ²,Z	!È0Î¥¨X,â$I¨ÖÚ{â'?þx÷'xP1ÏçÇçççÝF£Q­üñ/¹®»K1á8NE)Å@aïû:IRi§Þs: ÀïÇùz½^BôÜvÛmeÛ¶}Kó¹.Õo_?õkj\sîPJ[ga$sN1ÆÆ¸|É%ýð?Êf³SJ©ZE±ã8Rk-£(Ji§}ï:G{vK'ËJÚkö}æ­RB¡µN6oÞ¬¿óïXcÇó<!d!¨K)çyæ¾eÍ&X¹\®Å 4fL¸T*çÍ&Îd2äoxÛh4rçå9çÏóx$J)¥3ãXãþx§ýó´ÐJ)åyÀ7Ó5-8çaÚlì{é¥¸BÚ¶­)¥EQ6µõþýû!ÍÂ¶mÛ`ÕªUðäOÂí·ßqÃ½÷Þ[¶lÑÑQxï{ßLFïÞ½[¾ãïH  LnAè8N1c xÔx5Ö/}÷ÃÖwFFF`ß¾}­Ú<þ>§£PþNâis>\.÷Øûò ËÊòü÷[ÏzÏ½·÷mvEÀÜXÜMc4Zjª²*)1QóSM©Æ¨\5Ees@gdöîéÞû®g?ß÷ýþèó]Ï\»2CU·zúÎíÛ}Ïù÷}Þç}Ül6ÙØØS«Õú¯¼òÊÍ_~yýì³Ï^$4 ªÕjYµZù{«À¯î¬s7I!  Òµ"²ûsë	YÔê¾¿ÝPñk!1MÓX\\ô¾÷½ïîÝ»wÝÖ­[ÇRóJ)_JQJõ/8%@Ã0ôÒ4EiÇqøüü|É¶í!ÏóNÿüç?ÎW^yæºuëÆ¦¦¦ªsË4MëPt4Ó4 ÆNN4ÛO¿F¿^'àüEá,Ë8!Äõ<¯ÿë_ÿúèG?úÑu 0 ÍZ­8õ÷÷Ë ÔX¢kãäÐºV«¥8çã8AEs®ëâW¿úÕ¥ÔQß÷GLÓÜúßÿýßæ¿øE«¿¿µZ-e*Ja¶mC»ÝóÏ?.½ôR¸é¦`vvÃv»cK/½ªÕ*4M$j·Û"MÓäç?ÿyó.¼öÚk'êõzSÑtg¶R©UJMqÎ¡R*1ÆJ·Û V»Ý®Z5ö/ÿò/ëzè¡Áõë×{SSSÆdYÇAº}WïÍZßL''y;~ñë8`;×^_Êéöÿ  cy[1¢RÎ¹S¯×ûÿßÿû®¾úêé4M0Æ­z½sÎ¥mÛ2CÕn·ëºóQ·`ÙúüÈJ(×bBAÆVJÎ9Ê²LQJRJ¶Z-iYäïû`¦*:¸ê ØÒ¹6NÎýà@I 4M	¥Ôâ÷;vlt×®]q{®ë¦i!ÒEOÏiý¾Åµ¢éÕþV«¥R	²,0ajj
011ûöí/¾J¥(¥´[¹2C%I=ëYÏ
ûûûÛ )¥²<PT  ²,{ÊtuN¥QJ)¥!äÅE j¦Y©TÜz½ÞcÆ0cì´ú§Úöoÿöo§eY6ìºn5C§T*ÍfÍÍÍá¡¡!äû>
Ãé÷¢Haµ¼Ñl6½ï~÷»ý/~ñ«IÌ¥iº°iÓ&È²l~ÝºuÒÃ 0 u @À²ÙG1]Cxÿwç6q`y÷ÕÀÝwß=¶ÿþ^Î¹3ëbÑªâ
ÎÝmØº.ÿ7ásÇq¼íÛ·Ýÿý.¿üòÉv»½X*0³àv»­Ö À_8òdÏî\»xæ÷üâ}&`Û¶Ù·¾õ-ëÆo´Â04L)Eò¸£Ó}¢ÃIëº`&Ap\,Ôl6;zéc´¸¸¹k06Ã+W*Q×u9çq«ÕÊ,Ë!Ùl6UNêÈ¡¬S;¾9 Øµ/I!D¦
BclaÓÉÉIöðÃ3)%É»!ãNÌe<öØcpÓM7ÁÞô&8÷ÜsÁq8ï¼óàæo£GÂ>­V*
lÛ¶úúúÐââ¢Ì`B®ëRFQôkÉÝñJà_ñ{J)lÚ´é¸À^#§Ý^±Õ·¤hÃ)BgYZ­27 ¥ÅÅÅÁë¯¿~=Æx¥´clW«UV¯×±QNr¶ß	G$#ë¯úZkz}±»H]­Ò©OÓ´c&¢ßKoìyÐOÀ:tèPåÛßþö B¨¯Ýn»1ÂÒte:Æ²mdYfJ¥acßûÞ÷ÎøË¿üËÓ-ËmµZUky°v»ssT4QÐÆ:)*éúúK);à-crM#}Øb)%É²Ì4£Üh4Fÿùÿyçy-Ëê¯V«YV-UÚñs->¹°ö·|ý*Ã0ÆXH)¥T qc| ··÷ Ôzè¡8MS!Py3??A@»Ýz½JÎ8ãxÁ^ ccc!,--uô	!0447nJ¥¾ï«ÙÙYñ³ý,Yüíßþíç=466vÿ¦Mîxs¾Ç0)!D3ãTe'MîÙEV ëºë¯¿þú×u«s3Ë2b&Ò-RÝl6;nu¦ivô9çÀ9ïªhv Àñ}mí7Ê²aÆq\ýú×¿¾îðáÃ]×n6eYÜ¶m³µû·ZAZHÎP®÷$CnY1öB½B¾,ËzÃ0ôR¶ëº\A$!ã ¥TG£hJµÆþ;¹öÕâ R
å0MÓÔTJy?ûÙÏz'&&Ê9FQ$ARJ¤ñô\&tØ:EÝ¦"ð×-£zþç¸033³³³055eçyÑª¤1¦\×ÍÃO;í´zooï\e!D,¥ ÐÖÀ'è¢¿ïû`Y8¤cL¢º°°°¾R©EÑ¹\rÉùÿðÿð¬,Ë6û¾?´´´T©T*v<Ë2R.ñÂÂJÓiBÃ@i"Çq0 p{Ûm·õ:th!dçf³ÒÃ¥Ré0!d °ìåàêz<) cm¬x)¥!¥,co¸áa ¨4M£\.¼þb"¸W0:N°;ÇÔya8Cª²½W_}õXc±^¥mYB`Ý!³6úóa%Ð¤va<ò¶[¦©Esíµ×ºaLJâé{ú    IDAT-ËÂI ÏóP©Tê)¶mCeÐjµ`ii©ÓUÌ(¥Ç1´Z-p]ò¢6mµZÖå_ÞõÕWo8'¢­ã¤iê /JXIºxm<³bº´Î^®3aSJ©  ùùycnnËeEJÓi²!J¥  ìØ±â8·¾õ­pùåC__ô÷÷Ã¶mÛ`tt´Ó¦+á±±1ÞÛÛë¦iÚK)íQJ9RJ
 ¸(µ÷k WtEW/Îbëo1XÓÏi@O?Vÿ7@"0Æ:eY(Ck·T®½öÚÑïÿû$NÓÔ;ÃèèAª|·nQw±h&±R ]¼§'zè.:?âcÓ4ÒýÏÿüÏÞAÃ0* `fYFOE °Àhöa(Ë2bI¸ 6\qÅ æW0ÆmÛ´Õj¡@cÐ&ZÏOfÝ-Øô+jÑa)¥PLaB8B¾«®ºjÓäääéaJ)ËiòF£±¦|
ÍÅnð¦ð
 ïûÂ¶íØqv$LÇÇÇÙí·ßÎc´Ñh`k£ÍpÍ²L3h`ýúõ°uëVxÉK^ch40;;Î9 ¥T=úè£Ù={Â¼ä%o~óÇöÅqüxÇ{Ûíöx«ÕVJ5òÖ¬¢cJßO·=[ïy @òö ¾ùÍoOLLô¬[·Î^\\d¶mã,ËÆX³³;zGº@S\ßÍ«üV«¥Û£uË°9ç`Û6  ò<åNeLJé4þ«®ºj16Ê«a
!iÉ-1 ¹®âÒmcB)e1!TÎ²l0ãYm³mÛÞjYÖ,ËBÆeãÀr`ÒÍÀ?Y°gÒþ²{'9Ïã8duÇBxÛ·o÷öíÛg¹®Ë0Æ8×Çq:ga¹ý;ô§5Á´;p±øXCºÕKÿMµZöïßaÂ³ýlî¼6è­V+­T*ÁÐÐPÍ0¥,ËÚqÙóïÉ$ës-gIØ÷}J±-Ëê¢h}¹\ÞvóÍ7?ïÅ/~ñówíÚõ¬ÞÞÞÍf³Ïó<×¶m£ÕjQß÷	,·#Ë²c¬³ê¹Ç¢ ã8æ¡CÊ÷ÜsORªÌ£ Ô ¨!Ú Ã2óoEàomü¯¿Î9H)µÂ0ìYXXÝ±cÇ Æ¸ÔßßÏã8îhL¯§¿®PxêüÄR"Ã0!øàà ÷Ãþpø;îØ`YÖpEe±A!a¢ü÷¯ßÐ9¡ã
-í,¥DyRBÒ45R. ôìß¿¿Üßßo BàF£!XZZv»årÒ4f³	a@?lÙ²tAI3$éèk³@BbYû±}løÕ¯~õi;vì83MÓõeU$1R¹£ª×Æ3w÷¢T¹¬ ÆÓ(H$1ÖqÖ¦  ¦iÂ#Gà£ý(\}õÕðàÂÐÐ\qÅðÞ÷¾^÷º×A³Ù¹¹9X\\Dä;î0¯¿þúÊM7Ý4:555*K)B¶,ë×¢QO´Ø1ÆÇ1$IÒ	ÜVªàvÿLwKÇJzèV©( I°,ÕëuWèèè¨aïç?ÿùQJéXe=¶m[cß_³N¥à®»m«û -¯Ý¨ö´ ¶nó)oBa/÷ì1J©}ðàÁ¾ï|ç;£ó0KÏ¡V þ  [ópe4Ë2 úR¿ô¥/þÈ#¬è·B¬V«a×uµ mGïKÏÿ"KS;þêQdujæ èqC)Õ­À%Jéà{Þóõ®ë¥iÚc¦U.	ç|-@:Å¯öTJ©BÉ$IDEieIeB£(2ggg9B(¥çy(CèééÑ¬(ËÌÌÌÀÄÄ!à¬³Î7¼áðÒ¾|ßF£`:÷ÜsÕ+^ñ
õìg?[¦\rïyÞëº±!ÄiÛ¶}!DLÉcªè¾YÔyº ¬ùuÕí¿ ¾ò¯ô;Sj4cs¦
ämHÐn·!®ëçÚí6ÔjµÎÖA«^×ú¬XnøÓ87aê¸ív»cÐ$	R)¥¦iùk®>tèÐ:JiNeÌ²,,èH¬$÷PØ¯qÇ!dBF£ÑCYÏ;Û4ÍçMMMýöÄÄÄKöìÙsñâââó9çÛ²,ÛeÙ aå¼@Ç²,ÃY¡\]'p2t=ÓÀÕFî²,#Yq p[­VõÈ#%Î¹'ëHÍ  ¾ïw ï¢¦t1Ø^)>)v!hpHë<Ù¶18|ø0<öØcÇ1A¹\8!"Rª,ËÄ±cÇ-[¶´.¼ðÂE ¨)¥BÎy ²»x½6N<ô=¬×ëAQE¤T*¾ïWâ8^$ÉÙ×]wÝsßô¦7=§^¯ÑÓÓ3fYVÕ¶mknnç	Ø4M ¨V«u
¡RJð}!¯­VröKÄÙ¹sgBhRÚçû~i®mÛR®Ã¬ÿ3s Æ´,ËûÁ~ÐÓl6=Ã0Ì0InürÜ¹²Û|%ÃÁî\MË è³Ó¶mL)eAØ±OúÓcµZmsÞM¡ãàµõû:Æ`G=o,û1ÒûàaXm·ÛV³Ù¤¥R	¦¢(B9â8ÞÞ^¢Êå2¼áo¡¡¡NÇ!  ÆlØ°¶mÛç) PårY!RBH¦iR*ðôôtéþàú¯ºêªÁ8=Ó4v»mÛFyÛÚ]ÏÇuÜéQd£FQÔ1ÓløR©qCÇ1¦	§v$IßøÆ7à;ßùdY6mÁÁAX¿~=(¥`qqccÆÇÇñý÷ßÏ¦§§¥Ó·E<à©OhbYV§¬xtp¿Ý[ÿüjÅß÷ñwaµ! ëºdjjÊòn¼ñÆá+¯¼rÃúõë'}ß_t' hÚ?À
U¿S! ÏéÏªxííÖOÄ~ìÖlèº'~Ñ^=·²F116MÓ,_sÍ5CoyË[1ÆGB5Xn¿pV]1Æ11ÆBi£ûöí;ýãÿø&BÈ@E. 0!& (çy'«bÒ¡}]Q/®´)¦âFSìi¹\6Ûívå[n_¿eË#õz}¡R©øAdóU×ÇÚ89¨ÕUúù(4»Lai*cdrrÏÌÌP!.JHoÝ®xäG \.Ãg	ÕjÃ XfLNNú7oÞïxÇ;à9Ïy,Ë²Ñh¤år9)#±R*MÓT ÊJÕmñ4: VÄrPiaa¡wß¾}J¥bA@1Æ875AÝ]}Mua&ãÎ¦µ­[PôW­ySpï xsHÓ	!ëºRJ[­$IåK_úÒàßÿýß÷QJ=)eS)$I"\×Uqc¬ówBnûUJá,Ë¨eY<Ë2×÷ýj¥RRJm:|øðé×]wÝº[o½µß¾}Æg¿êU¯Z|Õ«^uìsÎ(Ë 01R¶Ra¦ç\!¤ÞãcjT;9ºU´P$ÚQFQdBªSSSCµZ­Ú××gú¾O)¥XJ @ÒVË]hã8ÍðÒ»Ö¥,Æ+IÄãÃ}ûöÁ®]» cJ,Ë4MU$
 ¤eYÙÒÒRpÆg,yæÓi.)¥ ÈR2oóYÓûüZiçdÂ97  lÛö!äÌÿú¯ÿzö»Þõ®³6mÚ4:;;[áÛívYEÃÀ³Á0èééz½~6dAzåg fsß}÷õOOOo_øÂ2zï{ßkQJc¥T )ü¢ý÷	<kãIb´Z-÷þûï/å'J)ÅA Çq°èÎûVÊ'W[Ú1R
ívJ%Râ4Mòý÷ß?rï½÷n|ík_{LJ¹$`¹£`-¶}jb¡ÎîòâÒÿw<a¥Í²ÌHÓÔ¢¨"è¿ækúÃð0Æ¥§i4ó;¢ÎW}6¼îu¯?ÿó?ßû½ßë¥aÁó<Ø¼y3¼ñoì»wïÍf3õÃ/ËsÍf³M)}ß>ñO¤ú§*$Qº`¤Ï£5Àµøg5É:ý¼.â! ··Â0ß÷Á¶mð<]tsÎ9pàÀp¦§§AJ	ÕjµSÔ èééQÕjU¾üå/Ï6mÚ\vÙeµ%¥T!äRIê×¡Oà2©MÔèè¨ ÕmþQdp[O»_WÛTt2ª[ÐÃ­V¤¸\.Ó¹¹9Òó|`2bf%IS³ZºßÿdjAZmþÅGQÊ²,RÝÁº®Ûg÷®û¯d¯¦OzD)Eiâ,ËXÇ¥G}tàg?ûÙ¨i½Q9 Àà$f®t®¹ÖæS¥$IBhìª«®ZôèÑABH©ÙlrÏó²SÓ×P/zý½néînË+¹E O¿^oùýAq!s]×²m»ºsçÎÁùùùþJ¥âú¾ÏÃ8å5IÁØJÿWÔZÓ­§A 4Mq¦´ÕjÑ,ËçyHï«eAÇ`äÀàº.ÌÏÏÃîÝ»all.ºè"ð<<¥R	Àu]ã9GÓO?½öµ¯Å¶mÆ 1Û¶%cLrÎ!¤Ó¥>~ëäïix­1 P 0xà7MSÂ(¥8CTl6M³£ççû>¤i
¦ivd30Æ@½î,8I÷¬¨û©Û´µ¦Z£Ñ@Aà4McÌýÂ¾Ð×h4c}q»lyà4MaÇéùH)YeFen¦½¡uó³Z­Ös¿üå/?ÿ}ï{ßy7ÜpÃ¶Z­vi'''O¿êª«õÆ7¾ñ¿û»¿»pçÎ/Ãð9óÍJ©!JiU)å $I(¥H)QehÄá¤]o§êþr"¼c!Ô²,RÚ³wïÞÞÇ¼477gB0¥Ï¯R©¶mwkÝ¥ ç~ñÜ+ÆúyÛèõEQ§PV«Õà±ÇxI@Ç`Û6pÎeeYooopúé§/	!r)$Ë2kv¡úÚÑ¼R©@¦ ¨ÒiµZÓ¿ùÍosÅWÙßß¿nnn®×u]cl0Æ(c3Æ´|  ÝnwZür"`²£;Â"¥1Ã8pà@ù§?ýé  ÝqÇ[n¼ñÆ­ÞB>} x¦Æ¸ú£ý¨ÔÛÛk&IBrÝØÎ:íN W+*¬ôzÍÖë]ÇÇI`Û¶i¦ ô|ñ_3£*¥41Msm?EgA!DJ)$¥Ôñe2¢¢!¦âBS)e#\q!Ô CåryL)5vçwÄqìpÎ!'IEvÎy§ eLOOÃÜÜÀYgRXZZêtFþù°eËµiÓ&É9Ççæææÿâ/þbïO~ò]úé½÷Þû³Ûo¿ýñÉÉÉÃ¦iÖc±RämkÏ o5ønfòqàÆ*"911!$¶m+­ó­ãß÷¡Ýnçyðüç?^øÂv;vì]»vÁøø8C¦ªR©(±ZZZ³³³ÑÆë7n<&I¤1Æ²(ýöTºÊÐÑÒHÓTå»
c¬tà¦+7«®vt_d­¤+Iº1²,r¹Lâ8æey_ûÚ×ßó÷uÖY¤s¶mû¹Åx0;ª}t¦i
,~>­ä´¸Ò÷+¡ÛEÚ¢fc¡µPß#\.i³Ù4]×­ÜtÓMý/zÑzÇ±ºC¬ÃJÉ>ü¢(B¥R	aÈ8ç®²Ï=ë¾üå/1Æ*¦iBEJ¤#`«(@®ëvÚ^tK`î¾y\â¯×^Bã48s H8ç¨V«aJ)KÄùÜç>×óÆ7¾±/I²Rj>Ë²0gÉ®8(ëfOçi¦`YA R1Fiâr¹Ìâ86Í&[f!Ò¦It1Ó4sçÁ¡CànèhwmÛ¶sã@e°´´²,C¦i"ÇqH©T2[­Ë3$!qã<¸SãmÅçÉnfwÝuGQBÎ²Ñ$´Öf²ëGänsEm«ãôÑ0ÆGmË` !¤ã
¬õ ¥i
Ü××ÇÍ¦;555¸}ûöÍ]vÙçyõ8ÆX·CÊ¼röNÓ¥ij`ÆX%MÓ!ÆØ¦cÇmýð?¼ñá^·¸¸8ÐÛÛ[ª×ëÆúõëq«ÕRe$)_ýõÕíÛ·÷½ýío¯¼å-o©Ø¶}16eÙ" 4³,lÛ RJBÌA@u¢3êé°¾ÉÕb!åB1 wii©wçÎÕ©©)Ûó<!ÖgnÑÒçþZdñé5¯ãÈ¢¤^':®)þ[¯;BÔjµÖàÁáØ±c`¦ 9;;lÝºµ}öÙg/"jó  RÍL-ÆMÏô{ÿdeY B¾ï#Ã0aFi£=ôÐÖ÷¿ÿý§OOO­[·®
 ¶rÎ1c-.."'è_RÐn·sÞÙKu,¡~=¦ËÂüùÏî½áo¨R533c Ðe-Àµñ«;	 Òò±cÇúF1f:Cã8ÆÔjµÎV3,ôú+æ$iç¼[3åÌx2ªÕjéöÛoØ¿ÿhooo/cl&Ë²¶2- ¾k,ÀÿãPø¾x3ÅC­ûHRT)EcLJÉ¤T)e`- (a{Bý¾ïµZ­3)¥ÃBRÇL)]×E9éGå{ Ò]J$Ø²e¼ä%/[o½n¼ñF |ßuëÖÁ={àÎ;ïT;wîÌ þèþhöOþäOöº®ûhEéèèh¦ébÑqHá!iOµñëÉïWq]vy;ÒØKfflÛvæº®hµZ
 :{ÆC?T*èëësÏ=æææàGé´	oÜ¸±ãqAQG}4>ÿüóÛ9«¹nYV(¥Ì²,s%xÊ÷4ÚMÙîÚdebdd$ÅgRJ©:øt3úð/^übà¥_§õÍtXJ)GeQ×uÍZ­V¾ñÆû?ô¡õ¦é4ÍºmÛ	BH½niIÇÆÆb Hã8jYÉºu;þvkëhút±åo¥öìn¡f¥hÇÊV«9çLaßtÓM=üàûÃ(a óø¤;WkO/)(bÛ¶$IÙqþ[o½u0I* XIPÎ9" !ÒÞ\ôu-¶jöAÑ%Ô÷}  ¨Û5BÎõz<ÏÆ
 Êå2ãahïØ±£÷;îyÁ^0P.g³,k+¥t{LþqÕªÚZ÷×X¿ÙQdÊ¬´OkdÝ.¥Ä1Em¦ç8-¥d9( @¨T*A$»R©£££!<þøãðÏ|Ö¯_[¶l½ìeÄ RªªÕªzøáÕøø8(¥ðe]f\zé¥1F´X³ûÅv»¢9Q7è7µþµ®^:ÈÅÓÃS¢ió R©av >­¹§*Ý	v;×ë}Á0Î^a§0£_StåÖL*¥´0Æ½W^yåÆç>÷¹KCCCó¡"RJesÕn·çy h«ÕâJ)Çq2c¬O)5Â9ßð¾÷½ïô»ï¾{óÄÄÄB¨
 n­Vã1Ç1Z\\T¥RòóñÇwþöoÿ¶´sçÎÞ×¿þõ£\rÉëºQM±a |)ebF¦¾ïC©TÒíà8NA¹R«ûZ-{²óg5=ÜÕ0n@åS w_ç"Í?HÞqQüþ÷¿ßC)µLÓ¤õz¦Ã@At@m}­5VÛz?(Êèºþj&´Ûí_Ò>¶,«Ã²Ý°aØ¶Gf³	RÅçE®ëÖ/ºè¢YñR¦!ä±$:µ¢ªÄI&ÇAi,Ë)e5Ã±w¿ûÝffflÛ®´ÛmË0
 8Ë2ÒÅPß÷;l4M5Ã¯3t%mt\';pàÕh4Ü7¿ùÍf½^Ç»wïî;ï¼óúR%Ð¢  *ý³¿ªSø+Ê`0)¥½gÏ2cÌfË
øX)EAwÌX»Y©Ý®ØÙ¢ÏýU)$! `RJË×_}ï¶mÛª===¶R	!bûÈ,í>GzÏÕbü¢Ba@e(fqEsNcTArãG»¿ÍfÓªT*v¦çyn­V+!z¿ýíoïÞ½»ÿÐ¡Cõz}Ø÷ýÇqì ¨ëº(ã{;!¤c&¥DcØ³güô§?Ë.»Î9çxôÑG±ÆÇÇÕ^ðõ|DI)Åâ¿þë¿n1-¥RÎRJ#!D1Ã²,KBRªtqimúàv·iñûbÜ¯ÉÚÓ4ø3ÎhoÚ´)|ôÑG³ÞÞ^IQóóóHÇ6}}}ðüç?8ç°´´aÀ³ýlXXX={öhEåº®B©,ËÔØØxá_Ú¶bÓ4#!Ds¦ißyJÀâüI¥°,+:óÌ3}PLÉ²,ÓN¨»Õt%«åÕ<xéj`1-Ò2mÛFs|ìØ1Î9wn¾ùæ~ð}A¸çq!D¸Ãà$ý:à ¤Ió&ç<H$eÉ\ë[ÉV(EÇæ¡àÝa1@ãå	<¦Ò,ËìÃ÷ÜsÏ=C\rI LXf¦ â¤¹'H(Q¾`Û¶YEç¼¯^¯ÿà?è7Ã-J|ii0ÆPQkK¿GÑÌCëúg4H¯¢6£Ntò¯J)ÍD1"¥4}ß/úÓ¾ì²ËÍæd©TªgY¦]òVVª<nËÚxú  wEF¦ImÛ6 ð=Úwß}÷y®ëQa @eum]µ,BP­VaÛ¶m!,..vZë´ÆEooogOQóì±ÇûûûãvÇ1ç¼ås_­º?õâ¹£e½_Â²,3RcLB8wÍíì§:hÕÀ^gp$I'ÈÖkY¯ï\ïVÂõ¦Á~té§¡ü½±a,¢ÒÎ;¿ûÝï®ç;ßyÔ÷ýiÃ0Ò4Cpâ8fRÓ¶íRe±1!Äºx`Óg?ûÙuwÝu×ØÑ£Gû«ÕªÇ±)`yÐÒ4EJEQJñôô4ÁÓÍ7óÅÅEó+_ù÷£ýhðK.ýÃ?üÃÉ¿øÅ¶m`RJ9oYV!aJ%EÊTPÔZI0¾F¾§m1LÌJ)D)EabË² ØÓÓÓåÙÙYÇ¶mÇ1ñ<¯È{×aÀê¥bsÏÎy¨cnGp]tÔç¤ôß§±sí?SA(ÇqT$²Ñh¤çe5 ÀWJ%  VÓ\'ÍþÃsÇ±1îùÚ×¾6zß}÷VÒ454cAÆc}­¸»Ñ¹ÌJÇpD¡÷-d©×ë|bbÂ1M³²mÛ6~Ï=÷ào¼±ï²Ë.,#Xf%­ÝÜ_-R,Ë2#IF!!TÔ©-qtÇÅó°óç@·¬T·AH¦Ø4Mæº®}Ï=÷ô ú|ß÷LÓ\ã8äwbÛÕrÙµ±ò^¯ïO³ÙD¹j61-ËÂaRBSJiZRJcl2Æ\ ¨
!¼J¥â=z´Ò××gíÙ³§:==]þÇüÇÊÞ½{{+³Y^    IDATjµgYÓjµJãØ===<C¼´´J¥Ê²LZ%ó=·ÛmÔßßRJT«Õ`zz^ùÊWÂüü<ìÛ·¯3×Çjµ
Íf®¸â
õ±}LnØ°!BDeùB¦mÛP-ÿ~¬	þ­_Çóî$¥v»!H»ýÆq_|ñÅüãþ»ßýîdÿþýòÒK/Uçwìß¿ÇuëÖ¥ô¸"HÔ¦fff cÕn·åÌÌ¼è¢²Ô²¬xnn.e!$¤ªÛD÷) »6m6¡rÁäRÚÞºuëR¥RiµÛíD!²,£Ý¦Ý àJA÷ÁßÍ¾*&bkq¨Õj¸R©Ð ìêììì`%"sÞÎ«Si³Wù¡@³T*Í»®ÛXXXÃq+ÍFé¬}@¯$r¹fâJhe²,#1Ç±{ï½÷V_úÒ!,·`8óÉr þ2>H$sîÍÌÌÕëõußÿþ÷û«ÕªÓh4çK)nÖ"è:Ñ/&özÃ)êd[êíú^iqäB®ó¹?¤iùò(ÝvÛmG³m{!4§òBV	íÄúdAÑ'2 XK¨~³Ã²,Ç1Äq<ÏÃJ)Òn·¹ëºö£>ê>øà¦Ú¶C4cÐ²¬°Z­Â¦M`xxjµÌÍÍA½^Ý»wÃ-[:Ú,ëÖ­Ë²¤ã8Y¹\ßö¶·-uÖYG{zz&cµ4M£\oKêõ°Ò¼y9æ Ø­VË¢È¦2NåìTlaÖú|:Ù)¶;i-?­Vtù^ÉX«h&±~_ýf)rÎ©eYF»Ý.ö³zÙË^¶î´ÓN@-$I%I8çÄ0»ÕjUÇ²,kó#<²õ«_ýêÛn»mdzzº/2¥Ô1M'IB-ËÂ9(¥(ch6!¤lÛfB288HBæôôtéË_þrÏ<0ôö·¿}øu¯{Ýèi§¶!t(MÓ4Mkãv¦	ç<ÃKÍó}_å÷nfà°kãWjË²p®ýÅÍ¡¡!vàÀb*J¨Ñh@e`æqb×óÎCz.ë¶Í×îÅÖÁÜ¸Ó/Z­aÂ]wÝ¥êT³Ù£££âÂ/L$!iGu4Wc¬Áà^+j·ÛÄu]3Ioûöí½J¥,¥´R,:|¹N,¤A`]0Ñ1JÑ!Ø¶â8Æ¾ï\Z¢ràÀFÁSSSbÇñÞ½{«CCCÆ!p/<é8gm<áYÃÀÚÅY)-ý:]ÍRþ«í×Ý"!7åÇq0Æ	!ìÉÉÉýû÷wÞyý 0K)õaxtþº>ù\'/D"ÇqPÇHAr-s!Ã¡  1æ7??ß³gÏV>\zøáÝÇ{ÌPJ9¾ïÛRJ+Ë2«¯¯ÏR2J)ãÓ}ûöár¹0Æj``@PJÓ¦QáÞÞ^$	µm~úéÇ1züñÇá­o}+\zé¥pÎ9ç@£ÑÀðð0ÌÌÌÀââ"!à­o}«±¬Õj%ãÔq´Ýn'¦ijàoÍ0fmü2 ¶ 4MçQJiBÈF9J)S)Î<óLuöÙg«½{÷ª]»vÁ^ô"øä'?©Ù}Z	0Æ099	¥¥%599©\×Uív[=zTT«Õ ¢ Ú###6Ô!ïÁË'"ÎýÊ?ÿ*¿DåÔêD)ÕªT*ç{nã®»îLÓÌ¢(âB¥/^wÐP<º]f­_'
ò»B1M7gvv¶<<<l+¥Bçv;U RBoÛv£Z­ú	üÂqW»j¢'ÚäOv­ä$\¼79%\æsN	!æ¡C\)e	 4 xò:®¬ìØsÒjµøàà ûÉO~²Â9wZ­¼ê\dYY>Eæe1É->EM¢b«¤Öý*&BºVl«È1L!a¾ïo¸áþ÷¾÷½=Q9c¦Â!Ù¯ ­Ü¯¤A·V]}Úé`Ê+ó$cÃP!ö}aårÍfMea¦iÆ`ãÆ¤Íó<½{÷B«Õ±±1¢HaÕÐÐ¢(k6A³Ù\(ËGcÇ¢(j!bÎ¹x"Ø§KÞÕ¬õm)¥777×ßjµ< 0¤$C¤¼E Ã8ÎP Èþ-÷5ôÿ1ÆÀ÷ýã Aý÷Û5p«/ @¹| Ê²V«Uk÷îÝ|p`ëÖ­½izRÊÈó<E¦iëº£M7ß|óÿüç7?òÈ#CÓÓÓË²¥Q©TX»ÝÆibLD)R©BÔn·¥U«Ueo6ÖÏþóÒûßÿþÊ-·ÜÒû¾÷½¯rÉ%Ã ãx1ÖJ$B¤¶m8¥i­V+0¬Vh\¿ú³o¥5Ï_, e±$IX¦$¯C»Ýî vZÏÒ0`A«Õêì1z)2»ÍË
IiçßEÝPÝÚl6aïÞ½!ÌÍÍmÛÇ1X¥$I¤ó4I±ýÏçBñÏH)MÓdIXaz1/Â§	FEW*VZ· Ôìg-PÔ×ÅË²pElvvÖyàØ\ |ßO(¥æþýûÍ/¾Ã²F%ZÛ~µqä.àBÀtÀún½êîyÓýµ{??i¤X' $I0!Äà¿ô¥/<ëYÏê#xzîÝmä5õ8K³es-gB)¥IívÛ$8a8ãr á©©©Ñ|°÷Ç?þqi×®]Þ#G*¾ï;sRjA£(bJ)F¡1Újµ0¥+¥p¦È4MdÛ¶¾ï§×^{m{×®]íO~ò8{óæÍöÀÀqÁÏó`ß¾}hjj
=
gusÎ9 Ïó ÝnÃÒÒzè¡¤ëºYoooJIJ¥R¡BÇqD®ýºþ­­X)÷Í²Lëã0 ãxaö[5EÑ4M>ûÙÏºßüæ7y¹\Æ¾ï£}ìcÀ9¿ú«¿¾¾>XZZ0Áó< ,ËRa(ÏóÄÜÜ\æºn¦itàÀ`rrÒß¿íw÷w'Ï=÷Ü)!DMJBD>WÕ²ö¯Øu±: 2 Ô_ó×4~øÃó,ï£'Ý	ÔjýÖ'º)Ý¬ÀnàAs!2MgYÆ§§§ç>÷¹»iÿ§	@%¡`ãÆÑÁÓ,Ë$Æ¸ãªYÔþÓ Sñ¹n§æ'£©T|n9ÕÚQqìØ±R¦Ó4 àð¶j=ø'ë8cR*Ì0Ýo¾Ù 3wFZ¯K·ñu¾´¶M÷}): ¢¢cQø¼Ø*Ï9ï0t0å8aÓ4ee9_ûÚ×z®¸âþ,Ë<Ã0L¥T¨E`ý¢õtqÉAºR
¥i1Æ´^¯ÓJ¥ÂúûûIehÓ¦Mâ¯|¥Ø·oÃ8ç022R8zôhÇÝR
årÃ Î9T«UpaµZ­Ô;£LÓSSSiëºK ° ¥¬aCqV¯ÕE¢'­ñöòä±£}3Zì/MS[ÁÒ4ÅºýIú³i­©b¿fHÝOµ[pqê¶7m¤Á¢Deu[e$A1$	Rº;vìè}ùË_>T*!ïûsÞcYÖú©©©Ón¸áMÿñÿ±áØ±cÕjÕëïï7£(biåQn((¥¿WïOAtÀäv»M(¥Øu]ÿó(Ì{ï½×yüñÇK¯yÍkªög6xÁT9çãAÌØ¶]o·ÛA$±"¥J]õÌç²*^éó­í=¿úu°B1aq½^'®ëò8Ó4ÙÞ½{I¹\F1´°° ¦iëºP¯	köÌ2}Vjö_wqRÇ5ZÿIFããã ¤A@ÎNI¤wÞyg$HÃ0®ëª|¬O2*\#ÍvÆ¦iÒ8­4M½r¹Ü;>>îeYf¦I¤ÇiãÇ¢ª:&ÕzÇZ{I ¦©AP$`iµZhjj¼ìe/IHÓ4é~ô#úw¼çóý:\i£ÈÀí)jöuÇzë¢V±ë¥;ÏXIºø½pÎ¹RÊùáØ×l6*FcÞ²¬!­Ç¬­uXéº ÈI3aÐZ­Æ1Æã8eÓ4«¡>!Do­V¸í¶ÛÆ¶oß>|ï½÷ÌÏÏ{1Ë²,Ó0Âc4c!vAó¼£üâç .¸®KKKª\.gKKKa»Ý^ú¿ùé/¼ýû¿ÿ{ÏÜÜ\ßÅ_ìmÞ¼ÙXXX [·n­[·¢jµ
¶mCoo/´Z-h4Jkª¥i}å+_Ï<óÌÖÄÄDëÿø£R©%I"@1ÆÔø·6NPäÀ¦i,Ëa6Æ¸,VJmÞÁ|ä#ëo¸áÁÞÞ^RJÓ4E¾ïÃ§>õ)·¼å-$IoV6lPãããÂuÝxrrÒ?zôhcëÖ­µ·½ímÛ¶m«!6oÞ<éºîA¥Ô",û(dð.ÜUµ±¥ à	~L)b/ùË  aJR$	*þ+i «>Ýþ*AGçû"Ý<wEÄÕjOMM1Î²å¬Sr¯eáêLJ]xááöíÛ0µÆ_PßW³Vscîü»QÚ¹ÎPJqeTaÎÎÎVÍf©T*ÃIÌ\¥e]_W1& `dYVªÕj½ûöí+sÎM)%B`J)¢"¼èùª#ðè ¸èGÑ©PëäÅà2Êó°aÌ0gÿþý}wß}÷èÅ_< ¥6,·J<a%¬[j$aí0ýÍ\ °,çÛ¦i§iZã¸bY344Ä^ÿú×ã[n¹íß¿ªÕ*lÙ²~ÿ÷a÷îÝP«ÕRÚq^«V«V«¶mC­VBj6ÀSJEBÄCCC­3Î8cÑ4Í¥(|Jiiªâ\}:áE-#­¸ü4f­VË 2¥åv¨ã4:5(¯!½Ì?Ý¶¨. ¿`Çh b[6ûÐ þ?¯Ù9×ëuÆ9wî»ï¾þñññõÏ{Þó`¹mÇn6CßúÖ·6ãßØ¸k×®áF£Ñr[­A¡QaÓ4ïûÀCE}CýrÇq(Jº@Z­T«Uèëë#iâZ­FLÓ¤^¯×¯~õ«îüãêë_ÿúò>ðmÛG$¢.*¥aYÅÒTJ)åNÝ®Ù­ÿWÜK×À§ô<ì¸>æmY&B¨d7;;k%IB±NêôÖ1=_´tÛÅvvmnÓÍ./ê­ä¬_733ÓYa(Î¹L$¥¯~õ«[Ð0ãtgÛà8ç;=sß÷K}}};wî}ðÁ{FFFì8iÎî´ßvï¯úÞ­$WÇqE¦MÏ4àk$I*
ÌÍÍáÂÄÄLNNbÆò}eY(¥Z§zµxemüÏs  Å9WJE¦©
ùÀqßÕâè'c WÔ,Jßh  1$!¶m[ÓÓÓ=;wî~Å+^ÑgvÆ°Ì®sdíN®°·çû{GßÑ²¬2ç| c<ÖjµF8°îÛßþöÀ7¾ñ^)e_$)eÉ²,SAÍ&EÃ0p³ÙÄY¡\W)¥PÎèEZ6Æ÷}R: Arçw6/¿üò©ßú­ß
ûúúú9"+
Âi¢¹¹9<77BEç>hfÔeYïûñæÍë/|á§+Ê´çyq1ÖìïµM`m¬C! ÀdÙØÂRºÒÞ F `Ë±cÇÎºîºë6_}õÕCÒ ¨DQd2ÆH>·Ñôô4|êSmÛ¶Ásû\XZZÝ»w«(T$"ãx`` aÛöÌùç?ù;¿ó;§~úÑÞÞÞE ¨À¢bFJ¹1`ð¥Ô/ô~= `×A©¹Ì½!Tß²eËÜÆRÊRêÔã6í ©"­[v5§?} pÎ5øÃù¾  QJ;­Pÿ[wÀ§óá B)`ýË.»¬~Í5×´ HR"×å8îð\éóè:ëx¥ë¯ñ¢CNÞ
R,;2 Ø°¬ë¤ºÛÖñR
B0 p!óØcÀf±4MR
é6¶b2cÆq fûéêwqÁ¿îõTdê¿µÈ,ÒÏå4b±!¥,æ3¾ðÂ	!G &¥õóDàR¼×mõúyÕä­®¿!à/0B Û÷ýR©TêÆØPeî¾ûîÏ}îs^eÜó<Ün·ÑÎ;áòË/·¿ýí055?ùÉO`qq$Ë²sQÁââ"ä,0U«Õã8`zäG$¥4ííímÛ®y7+¨)¥Ji&1RE0üéÚ¾¹fâV«E¤8!DÇ©T¯WÆØq^_xEí»òÅN¢ôz×ç6IÐ ]P(Ê´Ûmä8AÕz½¾ ¥T<99Ùsíµ×}ë[ßìÃ{«§§eYFæææciIý;5kC3r4Q( "ð}a¡T*û¾Ïrj"0&&&ìO}êS¥{î¹§÷CúÐè¥^:¡RN!Ó4m(¥|¥T¢Ò`ÒûBHe Bw¹ìýß×A1fÈY]!dQÃpØ÷ýá|ä#B$	iµZ¸\.£<&ëÌ}¨Ý5§çV1¦ïq±¸Ø*Xl£×¯_XXr¹¬÷EÀÇã4ßõ®w-H)Ûã"¸ÜI×æÊY!Î9ñ}ßèëëó¢(úð?<¤*7B¨x§E'Ã¢nªv;×æz¯áw
L®×ë(I GQ$Q$¨Õj¡"k´û¾vkã(!´,K`¥BÛ÷uAlµ}¤xÏWÃ),Q=r³($ 1#÷_übÏó÷¼¡¡!'Ë²Nî¡¾kküÄÀG^Ðä `QJ+qpÎOßzÝu×m¸ýöÛÍfEJé¦iê(¥¥'16CëA"J%¤c#  Ë²@JÂ0ìÄJRäû¾ªT*!!Ô­·Þ*®¼òÊs~lË-MB­ÕjV¹\æaÏó`||ÃÑ£GÁ¶m8÷Üss®Ç 
!Zç{îôg¹1v ¢9BH ÊÃyn´§¬nðäø$gÛö  l`óW¿úÕ­üà7/--÷ôô	!eYF$´Õjá$IP__0Æà¡}èCðO|6lØ Êå²ZZZRÊÄ0&!äØ;ßùÎ½Ï{Þó~^.'$ã¸
c¡Rª­
BRJbÕ¯Ó7Ë@ ©RÊ·m»~öÙg·§¦¦´H1 BEp%}_º«°»Ùú Ñ-ÚV³&º]LO!  "Ic\Îs3kÆÆx!äÁòº£×ôDf'2 é¾EW¾"Ks®u²Xn RÿNþÝáø¹¢(ÒÕÚ±c F¦$Ë2ä8´Z­ÎÕ­EÆnÖÁNw»oÑ	Qÿl0,®¢¹ÖZã!¨R©@E8w--ÝrË-ýsssÃÃÃÃÚ©ÙïÔ
À_ð+¶Eêê¾Êq@WâdA2`m<õà_øeÖ­¦©ê)JÃB~xÝwÜ1tÏ=÷îÝ»w´V«U9ç¥Ø¶æççÑ¿þë¿ÂÙg/}éK¡¯¯¶oßFòöOh6P«ÕÆÊå²LÓTÕëuIQqgi&QýýýñB¨mF"¥¾ï+Û¶R
a>éóà754¨¯«âú@¾ï£v»0ÆÀ9ïèJ%  h·ÛÇ1üt+¯n·¶mû8nRB$u8aØi-þÿì}yfUyþ{¶»k/3Ý=3Ì0=²¹1?XIP&©(U)?(KJâ{L,)ÔÆrCÒ2ÄBe"©aQ@GGDauÖîîo½û½çüþèûÞ¾|((Ìr«¦¦ûû¾î{ÏyÏû>ïó>ç¼,ñÜC`Qû,bY¸®KçææÛ¶ëRÊuqÓ½{÷+®¸¢uË-·4}ßo¹IÁ/--Ñ<Ïã8@!A±Þ VhÆqRÊòçWJA¯×J)xGÇÆD)EMÓdJ)¡²víÚU¿äKÖ}öÙ3_~ùþW½êUý Àÿ@ä:XSm&­VÐ÷úõÏ»êWäLJi:ÓèõzÓIò|`Óí·ß>Î³Pâûþ
sfô3YCØ³,«ãÕA ]ñxVâÿp]WB¥T1Æòýû÷'ÿò/ÿâÛ¶=XXX&''³(Ô(vá	v<%U(CÚl6 Øq·wïÞ=ýË_þr2MS¯Ñh(¨£#sj]Ï>×ua82	ý~¿dAãø©ëº°gÏ¸í¶Ûà'8áÀ+>«ÃÏ¹þBÔuÝXfYußzM'"T«Ï¤ÊôCÐ¿+08SÆ¥Á`À<Ï³î»ï¾z½^oôz=Çó<¬?F_±i| àÀXÇSJ©-W_}õé_üâOÙ¿ÿ¢I)µ-Ë2¤Âò<§$)4AKæn¦D×hÅ\Ý"Ï,Ë`8cz'Í={ö[¶llÛÍfóGìõzõGyÏÏÏ,Ëh³Ù$Búãÿ  N9å¥Ê]×MvïÞ=<räÈü+^ñ}ÒB.¥4Îó'QNúã<¿YeJ)'MÓã8SIrï½÷n½òÊ+7ÝxãëÇlµZuÛ¶­8y·Û¥BÚh4HE0??XÜxã°mÛ6øÐ>Û¶mSJ©ôá `ñ¼óÎ{üüóÏ¿Ï0û£(:`YÖ I¤YeRÊßj¹ _ô Giøéa¹2áþáÆÛ·oÏAé,&=pëÿ¯òJØugÆ×áøGe`fY´ÛmHÓ}5
¸zäæ¨9ÃHÒ4±ð§ú§_ýêWq7 0Rè|¶âþÒ¿Xí>è7=aÓ_·Ä!UJ1Îy9þ¡'yGKÅÈvä `EQäýä'?q!eY,cRÀwø¾£ôNôB^_ïºÞ×(glÜ#XsÎK]°4MÁq°,ÄqÌ,Ë2úý¾÷ãÿ¸yñÅ;°Ì£BRÖÊ0úKsy¦a%°"P2(FM¹2#dQeçeIH¥ Ö:¿2ÆJqï×êWu÷\)%¡Ë+R à@Ã²¬1!ÄrÝ7ÞxÒ¿øÅ|pM­n·[cÕÚí¶ãû¾hµZ4C"¥Ý»wÃ?ÿó?Ã-[`ÝºupÖYgÁîÝ»¡ÕjÁüü<<ðÀ*MSÇ±eÖhÖn·³ápw:ôÐ¡CÃ;î¸£aç¥/}iRqÎ3 ¶m¿UOs ¿àa%«<ºúý>	 Çß÷Ë³õÌ<Ï+¿?"¨×ë¥+pçÁ
 ²ÙÑ1~QAeàºn'F	.Vã¸ïûåHn¿ßápH'''Åüü¼÷ü`!ÄýÔ§>Eï¼óN{rrÒn·Û¦RsÎ<«¢dýáóB7V47ÁsV× ÄßB¥´Z-0Y$$cFá1R»ûî»Û^xáÚK.¹dê#ùÈÌæÍ÷Äqü¨RjN)Õ¥8ÏóL)%cÒ0&³tÃä(0Ï2Í4eÕØ3Ugs¦¾ØÖûÓýÌ:5CRÔu]¡ò:Î(YÖT    IDATD½^ßô·¼åk¯½výØØX3C³ÓéÐZ­F  ¦iim%£Ç4y×A<{ñÜÃ=$IéL0Î9A ¦i |ÁBRaæµZ-¹ðÂý0ccca$)!DÂ²©Ýª&Ç{¤KàÈ6ÞwÛ¶I¯×ãFÃêt:õÇ{¬½´´T#Xq³(®[¬çþØÅæ}1N\ á¨øp8ÂqA'±)?ç¾}ûà»ßý.DQ PZé¹~¯Þ@=qýJ5GY{ @eY`Ûv¿ÕjJ	!R)¥(¥¥þ5®=_Õ'^ªxÕ	/}ÒEgb­ç9¸®KBXa6î»ï¾ñ3Î8£¦2A# <ýùãéB$I(çqÎí ®ë®¢è$ÆØ¦}ìc³×]wÝÎù4c¬á8ç9/È´È?	ýEN0·ÇÑ}]6 V4ñÉ²  uu:óî»ï¶Ï9çc¬¡¿k×®`çÎL9rfYÆ,ËbcccdÏ=$"É9O=Ï¶nÝÚ=ë¬³æÁaKÒP)ä?w8qõUE`&ãÚý& Ô¤±07ßtÓMÛ>ð²wïÞ©ÉÉÉ6 xaa2Û¶iA"8ý"µk×Âp80áË_þ²:í´ÓÔ%\sÎ9ñ>Ø;ï¼ó^tÑEäy¾7I'	!G`ñU
!pêE½q?Cr 
·¾Ô0èÌ3Ï9çRê j®£\~«gÀÃÃÇR0J:1ÕqâcðY¥aøY-þå_þåánºéÈ={ZJ)«×Y+¿òýÕ!Ór|~ºÖR
Â0$Q±êÏp4&ÂäH))¥ÔÈóÜÃ°ý³ý¬V«ÕÌ8mÛÄ÷}Â+ÇfG­GL0¡©êé3~]/^uÀPgab£¾ïn°I0J)ÿùÏÎ/¼ðB^õL±B$	0ÆheÔ0d:rß÷Æç¹iYè÷ûF«ÕâéòFqãøý~?¨ÕjIe9ÊTE O\ÏqWâÊz$ @1+1fI)ë±	!Äºáp¸þnØxõÕWÏ<ôÐCSi¥iZ°Í¦qäÈ1x­Vcý~ V«YÁ~ô#øÒ¾ûØÇà¤NÁ` >ø `×Ôó<iÛvòà=ö/¥7nÜÎÌÌÄÍf³ßn·÷}öÙKóRº¤JJ©öÜaQ¢p@(àÈ#¥)~ÎáÔ{x^UãhUûLÖ_âÂøzÌ(mÛ!k4æu×]G¿ñoØY5kÖÓ4y¦E8£"B `ða¦)ÃÒ¤×)680>AeDQ¿YþvE£("I©©)~äÈRj'IR»æk·Þzëøûßÿþæÿù7ÛíöRÊq/åyÞ÷</Ì²,R¦YåI)XPbî9BµÉñgÒÁýU ¼£1×xºf\EhÆ@1]ÂãyÛÃá°åºîºzèÿýßÿÝ¸fÍ<ÏÇqDZºÙ.ú?ªÏJk>­ p/èÒ8ÏC×$(¹|e®ëBRj 2£b}ö,r}½BaÌ4M#ÏsÇ¶íúÞ½{ëiÚ¼×ëÑ¢°*[lxà~D¶ãàß¸?ðÁ×@É.Ìç Ð ß÷Ë­k²ý|ÞÀ bÆXßó¼5kÖôçççc]ãwÔ¤QuU%ªy°®¯þà{£ôÓ`0 çÑáp(â8¶~øáÚgi)¥8!B1V|îoMCëÅ~ûØ¶Í¢(²)¥M¥Ôº,ËNÝ³gÏÖË/¿üä»ï¾{CekRF£av»]Î£yÌ^À½ÍM;$Yâb£Sßã¨ÕYhW?þñ­¿ú«¿â¶mç<ð@øýï¸sçÎÞp8Lu]I)ùp84{½xüñÇI§ÓQ³³³ñ©§Ú=óÌ3ç7oÞ|ÀuÝ#Q	!BÆq¬|ßWhdvâ:>¯¢HÒ4¥¦iò¢qÕLdºV«m?å³ýì/|á'K)§ÆÇÇë¦iÚaRJJ¡EÓ4 ø?óªn·ÒÒæ{ßû|õ«_nØ°a¸~ýúÃÍfóv»ý°iûò<_Ì²leYB)Í9çR$º,©äÕ ]é)X¦&¦ ÎÎÎÃ Ð;«DOîF±ÀVcÒ¥ãd¦iBçep5Ý»c¨'Ri¾eYó[·n}ì£ýè¿ÿû¿[XXp£(§8!ÿ*÷Cw^íYTÙãQºÒ M+CJiPJk÷Þ{ïØ¾}ûjFÃ`±8^ÜWGª£F£pð¿õN:¾²ý°8/@»2¹ÖAtÆ2Cåy.ñÜÜ²¬<cEQ«^)- s®2RVeY®¢&hB¼0mÓ4íG}ÔX»vmhæÀ¶í¥$Iæ=Ï[PJõó<¤y¤¨Q¿ïë×Îä-Ö!R²4MMÃ0¼<ÏÛ±µRÊÿë¿þkË¿þë¿nØ³gÏL»ÝcÕiF·ÛåèÐ¦)ÅumY(¥ ÝnÃÜÜ|óßsÏ=ÞøÆ7Â-[`nnî¿ÿ~h42ÃdaaaøÆ7¾q^1OéÍÎÎív;èMMMÜeÙ!Jéñê)àÖùÂ}T-bLã|ß<Ï¡ÕjA£Ñ~¿¢ò<Ë²J¶î\>ôf ~62 åÔØYÇÓñiÂ`0 Û¶IÁâaÃáDQÄÕË9§Ãá°wpDGÿ¹ÐmÙÜÇqAFzGGõ0ÉB~ÁÔ'ÃZ­A@=ÏãçaZO<ñû¡}¨öÝï~wìmo{ÛÌýÙ=Q¯×ax8I®ÒÏóÜ7#RQJ%¥T"³@ýÔ¨3ïÖá¯»>Wc¾ØãÌ¨ßÝq¢XRJeÏ²Ìºçykc/»ì²RóZ¿ß7<Ï£çÁ`@tÖ¬ä­6$®epqáÈ'qcÎ¡}Åû+BH ÉôôôÐqEÃ0ú±0ÏóóT½9uæÏy]TB!1EÈóÜ¡¶mÛ¸é¦R+cË8X:äêÀø7ÄzÄXkóâø0Æ­[·®
4¸sý! M$Bô''')eÊÆFM+äª ^èÓXzªÊæ®æÄøY®ëÒ0yÂ4Meº@¯ÅUýìãt_Á`@lÛfY P§Îx7û_üâ¬w¼ã³ûöíQJµ^¿ß71ò?ã¾z÷ie_ÝèÜ18ÅMR|×®]ÆáÃy«Õ·nÝº8??¿ii)~Ýë^Gëõº:rä½ÿþû­Ç{¬N)u$áÅtJÜjµfggJ)çR½$I"BH&P¦i@Íëøîo IÓåyn@KJ¹¾V«ÍîÝ»÷´+¯¼róÕW_½Î²¬Z­V'¾ïsX6!sÒívËélUàû>Ôëu%¥TÛ·oÏ/ºè¢è-oyKçäO~rrrrâ1 X 	!$WJI-ö½ ¯&U&¥T¦iLOOãhEÆ°ð}=á[þ=jÌ±P0 ó8Wh§­¦iw,Äq!D¾¬q-ZµïíoûÔ;6|ûÛßçÛy?§KÝO³FÝS ÀK	q±¨R3Æì;vx `ÿOAi ¢|ºÞ~ªÚ'Õ=f_5ÿÐ?¿ã:Á Dg)BHÇqð×¼¦$	º!ª,ËHaj@¿aY¦i çaØ¢hüÖ[o]³cÇV§ÓqöíÛgîÛ·¿ò¯Þð7ô^ýêWö<ïBÈ¥Ôþ,Ë!$BRJáÁ{BûÙUB¥Ü0ÒHd­ëºë6}úÓ>õk_ûÚ¦µ333ÍÅÅEÇ¶m x$¬Ùl<ÏïûÄ²,ÒëõÀq0z½4h·ÛðÄOÀ7¿ùMØ¼y3lÛ¶^õªW© ä<A®]»vþK.Ù}ægîÎóücl ¡2PJu$9B)]TJJ©¬(
Ôj¤/Öu}s'tRDâïcÛvÄâÄBA
ìt#¸¯7XôÑUÜï~ôû}p]·úU7ª	ÄØØ"¤ ä¥A ÓÓÓ¤æ&úY¬ÓÈàB6º®«tv>K!é÷û+Îs}ì¹0Û¶	ê!Öëuç9 Faç `ÝqÇõ»ï¾{Í7Ü°î=ïyÏóÎ;o¿b¾XWG$éRJûRÊ0Ë²DJ@^4RQJIqOKæÎü{>@c\1\ºÈÛ¶Í£(2-ËªA°1vò×¾öµSwíÚµ>IV$¶R§iJc×©.Þ¯|Õñk©Ï§ÊvÇ=£élNM6Cb)J©ÉÉ'<(É¥TLÉOh@=óºµ¶ÆçÛQÙ¶½á²Ë.ÛøÓþt¢Ýn»Ãáû¾Ot½RÌÙõç©øÓC¶m¯Èýñyëg®k+Ih6OYcÇàólãÎoà÷VEM9çñäädZ0±6­)ðTÉ¬C:S»ú* ¨³ß}ßÇq Ë2h·ÛeE$9ÞÏHd0rÎ$I<Ë²Öa¸¹Óé¼äï|ç¶ýû÷op]·¦©Ç±`1¥-7D7ð©U÷ªþ<õ1n½*L$QcrÎy¦ã8¦a	!äÐÆ³÷½ï}OvÚiQ»ÝN(¥dqqÑÛ¹sçøÎ;ë;vì0
WáôÀý~¿ÿdÇÆÀó¼1&³,SÅØçúã8ÿsÙ¶m¤iZgÍ0Æ¶îÚµë¬+®¸bö;ßùÎL»ÝnQJÝÂqÎI!TîøÑÁol·Ûj~~>ÿ·û·ä¯xEÃó<?È[Rc	¥4$¡Rºà 
ú¿aâ¦)¢  Uó§;VëºVõÑFèÚ$BrÄjÄ¨Ü±¨ù »1§ äyÞB,
!Y%BcwÚ=
Ð}Úâ·ª1JËCïà£8ó¨1ð£± Zez¡I)Å}÷Ýg0Æ2j,Ð?=q]Íü úïÄ ¸Â¢ºN2*tÆ!P¡bñ}öEçõÏ9ç#R*IÌqÇ±¦©]«ÕêÁ í8ÎclzçÎë®¾úêx }øðáöââ¢«2=ÏãRº}ûöäÆo6Íù«¯¾ºvþùçJiLIÏMQT778q=kÀ ®²ûý~«^¯¯Bl)F66ÝpÃëÇÆÆ&£(ªR*X»Ý¦®ëß÷Ë±>WG®Ãä8Üzë­ð×¼N?ýtåy:ã3Ô¾}ûÒÁ`à¿ìe/Þ ÷J)H)ó8Ïó$Ë²HJ)#)eJz±}´ÄctG_ÜWSSSÐh4 µ>ã8.¸ Ë8¦n¨_UmèúX8Ò_méÝrÐÑÝ.qï@ÉF, ;âºî
CJié²I)E¾nÃÍf³,Æuýb©$I¤¦uH|ß§RJeYA.ÝuË²À4Mè÷û%C±Ð/¥q `BÎ9·8çõo¼qìÎ;ïùÛ¿ýÛ/¸àÅéééùý±ÒCY-I)û±À0d9tæ²Ð UÚØåLùkjQñ[ýîßÈù¦ë£RJÂ­v»]'¬q]wÓc=¶õ+®8Ù0É0])¥BP\Gx>Qê=éõúx=zqì?üL²û¬ªíXeqÎeÙ¦MbXÖØÒ4ÍRs®% ÷7	k9dé¦©ç8Î{ï½wÓ·¾õ­Ýn·=>>nI)Y$ÆP|ÒaÎRt0¯G#U-8ÔD3^¯§ëµ*\_«5Ö·<âyþç\*¥òf³)¥*Ë2<VìO¼ÒÏ*ýëçb5_®æÇú ±²,K)¥¤ã8éæÍÆX&ÐÈ=~<<ÿgøa¼ßïÛ±v¦'õz½m\rÉìáÃ×!ÆÂ0t8çÂqÖëõcH)Á²¬rR@ÅËqÜ_CtÍÝì§
ÞA)¥Æââ¢777W/ò+¯¼r^)%MÓ»ÝnJ!FÃºàj^x¡ó×ý×1F
}êÈ4Íçy¢(êA¦ µBpæÄuü^Å"Rº±IÆØ)ûöí{ÉG>òm7ÝtÓúV«ÕRJ9IÎy)©& A<sÂFy¡yamÛpÇw¨o¾.½ôRåe®BãÒõ¶_P p°hàåó0íG}´¾´´dHÓrÎ.ô<
[-hbêÚ=ú$
KcºÏÌ"ÀÞ¤fyGBðÀG;WãøµÂQ`õ)Ã0|ÔÅ0B¥ñØc	B´0A ÊÎwõþ PZF%«è£SÕ}¢k! Xýàya¨8ç1&Ó4M^ûÚ×úçÃÃ¡"Î¹¡ 5Û¶ÇÃáZÏóÖÝsÏ='}å+_ùÞ÷¾·frr²1Ýn·ë¦i²ápHMÓ$B¬ÕjEAxñA¶oßÌÎÎ.0ÆziJ©¼`äRé:'®§/Ð5Í?ªbJ) Z®ën`ëÂÂÂùÌg¶|÷»ßnµZm ðcÆp8ä¦iÒf³I bÛ6t:2f"S;Ôµk4pðàA¸í¶Ûào|#¬[·<ÏiÇã8ñññQ ¤úa¦B\@VßÉê>Òûûý×÷>bK)U¨AeÛöQG=ñEÖ ¾:x§Ç=1ÆqYsÔP<Ï+_[uLÄî# #x·°° ­V´Z-8|øpù¾ø:8C)Û¶KÎA¨
,ØçïûÒqb1V@NX¹Î°y=váC!!!ÄqL [e6gqq±yùåO\uÕUþùçß}ík_»ñüóÏ?055õÄØØØ~ 8<¢(êB" È,ËÊR2WJåÅSús]->Ý²À­èG+«¬
þÅã3ÆìV«Õ © 693{Ùemît:SaÖgffÌ((êÞrÎ!ã2_CS*ÜóXêz~úç#p Q)ºoúyû'Bô¢T)%7nÜ¦B2d+ ÿ¹2BJ)RÊÊó¼$ÉäöíÛ§Æ'&&Ü~¿/$)M`4Iq
'xªçBUÓã(Ñ~½óRrÁq@µÛmE)UËþXËûòñÇó_H)U»ÝFðo¶{­©ýUó;Ä¡kãê öùe½WHÛ¤Ò`ll¬a`YVZ$°ó£~ÍgúúQ
"¢KÓÔ¬×ë¥ÔÔÂÂÂæ«®ºêGyd]³Ùl÷û}GJiBheD)E f³¹bWgùa<Ç¸¯7#«Ï¼*ß[è
RBHÓÔ^ZZªmÙ²EDQä3Æ:RÊ¨×ëÅ®ëf92Óëº´lçåQEyû¨^¯gs	 
×Í	¢ã·´e ËóÜLÓ´aYÖÌ¡C¶üÓ?ýÓ;î¸c¦Ýn·Ãpúý¾h4t0ÇqêZ·Z­,²zNRJ¤Ñh°0Ío¼±vÆgL¼üå/7M³F)]RúTÊ(» \Eg§	c[e=òÈ#i!aú+ÕN£@¦ªnx w1iÈ²,ËùùùâmÊÞ:ô§m&PÃáPz@V¸±*Æz>Þ__£#Z³f´mu´ ¢ùLJiäyn/,,à%Á1½S]Ý?O÷ï£Ö(¨Ø)Ãn:209FPAg¡aJJçy¾éMo  ív»Ä4MÛ²,S)åBZaL---ÍìÜ¹ó¤Ë/¿|ÝO>¹ÖuÝ¶aõ0­(Z­Æ£(bt:0Cöû}1>>NÂO}êSÓ_ûÚ×&Ã8@)íI)]?qðþj `aÌº& 4	!ë(¥[o¾ùæ³>òlÝ½{÷ºfNe"fe'pÒh4@J	N§\SèÆçyÉbCöMEÐjµ`Çðï|þîïþN:ÍÍÍ%RJff¦ BHÏ4ÍaçAúI)¥JÓT¦¹êÞ?Öæ¶\2iq^¯*Ë2U0hW¸Cð<8ç`Û6¦YvÍC {õDFª¢ÚJ©2Á@ÀOg"çû~ÙBcË(¯Ë6`ìBfïûåïÔh4L'	!i·Û\×»Ýn¦)eYV³Ù4eY,0K#$IÊ):Æq1À×pÎ¡Õj±4Mi¯×£J)î8ç¹Óét×_}{ûöí§zêÔk_ûÚuo~ó÷}öÙOxw æR})eHò<!¡R*¦æ¨ûVÍª`à*ù	OþÏÀòèFËâø°,}¬V@R¬!ç¹RÚ Ð¤®Rnév»Û.½ôÒ-×]wÝ¦v»=ÖjµìN§ÃÇ¡1¢ÔQÅÊSèc{øÙ:`P5ÆÑ#«LwÂ³ö,W®ëJ)¥Z¶U'PÏrm÷B(!%¥¬+¥& ¾òÊ+'MÓ¬[eöû}¦"Áà)ZoÈE «ÞÒGÀ«AU`¦ÐjµJIÇq¢ò<çw^¾¼d¤Òb÷qÿ,ÏÚÒ'|²Bi)%8³b"K×üÔÙíU¢ÎÓsd¨×#se*rÛs­_¿¾799¹  =¥T\ÄäãRãsÄï\_J)1Vó}RºéöÛo?åª«®Z¿fÍ±(¥ Ò~¿Oâ8&F£d8ð<o9zl¯ÆóêÔÖ-:±§ø:5Mu»]óöÛowO?ýtÇ0ÇqX¸¸'iæ½^OÙ¶M#CÊ9'ã|ß1©J9ç9 È$IW¨Cïþc+¥Ë²Æó<ßpÍ5×lúú×¿>mFËq;C! "Íft:p]êõ:,,,mÛ+ÈXcÓRÖßJ)Úh4Ìûî»¯ñ¥/}iú=ïyÏ½ìeOÚ¶}RH)³å){y«H©`³mdYFÃ0ä÷Üs¢#ûÙOÕ>¦Q[Íñ·ÚIBf&(`N)%sss$ÏsB)%£>ãX»ñ2ç¹Z\\TA( PºîÑ¨CïÙÜ]gµ{YcSJ©Ü¶í bXOG+ 8Êºøw*¥48ç^­<ÏÝ,Ë!CÀÅ0ëO×þÂ$¨ªL 4¯j&éºkàQúY¦)£(ÊÓ4MÎ;ï¼ÂÃðlÛ}ß?=Iýë_Õÿñÿî»ßýîWÌÍÍîûþ¦8§Ò4mu»ÝZ$vç&çî8Ku»].0yä{zzº~çwNA°&MÓ Ø°,)@t½Î×³ Ñm*¥)eM)µ²åG?úÑùÌg¶>úè£&''Çâ8ö±´´Ä  FJéDA	èAPêÌéZZÄÇq®ëÂ#GÔ~ðõÄOäç%>úè`||¼³mÛ¶4M;B?Ïó8ãÔ4Í¬püÍ]×-YQ«4
ý1  ËTA×ÏÇÉR9 ¨8ËïÑðôî6&ºÈlÑµ«`fÇq\±øs pH¯×[èM4M!"HF9NúLÈBÊÑeátùAsÇ±ZZZÁ Í²Ì·m{þõ¯ý£?ûÙÏvÿÉüÉ^¥Ô4M»sssA³ÙLR¡(¥*Ïs¥9¹'©    IDATúèï­¯IB:é÷ûsÎÃà1#Ïs{llÌk4-JéÚ{ï½wÓ¿üåÓ/½ôÒW¼óïü×^{íÿ;räÈ+	!/ËóüL ¥®#´cvAODPü×éÓ¢1jGiBÚ ÐÀ§í×£²@,Ö<UJ,ËlÛ¶[RÊ pÚÞ½{_úw¼ã¬ï}ï{[ÃX3<ÆPJÑ¹¹¹Òõ¸ (×{UkÏ=½ù¥;IêZ4ÆÑë*SHs0ñgRÅ¸¯ãXáù3tâZ	9Yp%RjBêiÏó6¿ímo;%¢µµZ­Öï÷ëº4Ë2" ÕÁZ×5âpäcWõûªÌ!!¨/Z4ITe¹"=ë¬³b¥TZª«£Iwö7ì?¯osÎÕÔÔ¢ªêùÏÙzM§ç«U¯:ò«¾HÁ³ª5Rû¾oÛ¶m`fsî@r4×ÏG|ã¥\)e'I2fÛöÆ^¯wê§?ýéMë×¯$xQB¦"®ëf³	N§¬[,Ë0Wªz@¯\£µ(¥HçsÎ!Ö=÷ÜÓcIx>66&AªJëõzÊ9¥QÇ¡2ã8 eEóßRJùÎ?qÛs9B!¥¬çy>õðÃoúÜç>·N)Õ6ÃÎ²Lª"ccc$Ip]·tøÅ	*lêëSzzÃ+ÏsÂ#¾ïSÆÏóÜ¹ùæÛ^£§ºQh`?¥¦!/>J/G¿Î+ ²{÷nJ)%ÔaG¶ê~ªk<¬ÖÐ»ÂzÀOÓ´LÓ,0¡Õj¥¥%òðÃSË²X´':æy]OL]P÷¹$«¨fP¡(¥2Ë²´ÙlçõR ¤RI7x±'cú8ã^ÅbC)Uët:cQÕ)¥F¡ÏFÇY±®ñ>ê ®ã7ª;Ï-gØYÅ"»r:Ë÷Îð2MSÅq½ýíoO¶lÙ>|ØXÇ±HÓ´}Çw¬ûÄ'>1ýè£Ny×v§Þï÷4M4M9çáa%ÃöñÇJ)¸®i²z½nìÝ»×¸õÖ[×_tÑEOpÎçMÓô$ImÛ.NOð>}Q®	¦)¥ÈóÜ¦¶	!>¼õsûÜþðëÆÆÆZQ9Bn&ã4MEQ	 EQ´E¡3-ð0CÑõ$I¦(¥ê?üa~Ã7¤ïz×»/}éKò<ß·aÃ'Ó4=R0ÿR]s´Õêh^× Ì9çÉI'NMM%¹ã8s®Ã!ÁñW×u!¢§0#s½:
¥ÇÆ(Êqþ^¯W²5kµt»]À·>ZÌ(VÄ<ÏÁuÝrMÙ¶Á êõz	Ü j¢¡BQËZ­¦iêA°pî¹ç>zÍ5×ìã¸óùÏÞ²,kÝõ×_¿q~~~j~~¾Q«ÕlÎ¹ ²Z­F4à preºQµZ­,2  Q![Çh$L)ÅÛí¶Aqzè¡ÆîÝ»Çîºë®u³³³\pAÿÔSOímØ°aî%/yÉ£RÊ½¦i*BH>mÛy1n¬ð9èúD¸G8çÈv yS¥BaÖm)e3ÏsfÛö0ã¹0»Íf3LÓ4/b»z1Åê8§ÅB¨a¢×ëÙã´ò<_ï8Î¶þô§gþÃ?üÃÖïÿûëÍfKá¤ij*(ÇcªºÚàÕumõõfVúYÀ8kT#»]g¿"+«9çÐétÔÌÌ4# iÌó\a·ýÄy3ZãRpÎIÇå}<Ë²Ö(¥Nùö·¿}ÚÝwß½ybbb|8:±r
ï¿0g¨h4® ðÙ#;Hw	Fh\;¸
Ö§
@64`ff¦Ç9Ð
S ÜÕÑæc¹>Xí÷|ºxJ¡Â0RÊ<CãÖ¾ï¯`¡þü±`Ö×®¦¡]ýþ¢Q¦òåb'~ÙË^6TJÑèç¹Äà£4ÆQû¦b¤iZ3MsêàÁ§^qÅ[æææf8MÎ9+¤Æ[Çq 'å©éõJ>`Q¯wtír<çQ7M7ã;cÝzë­Í7¼áSwÜqÇ¸eY+&(T¦Hv)¶mç6± ´UB_ì±ù·ùÚc©¥OV@pf MÆØô?øÁuÁ`|jjÊ3(¥TQ6q² sQL=·X&gÕj5¬µ °0MÛ¶k÷ÜsÏøüÁLÆqÜä/¦eYBr-'9mùÛK|5§¼.JDMMMIÛ¶e¦j5
¿¸« Rµk¡ «P8RThË²h¿ßRJ1&qR=Ü÷&IRÌÓ4Ñ£tôó×ùEÚ¼RJåÒØuÝ~­V[ >,3r¥Ïh¥Ô:|ø°ee`Ñ$Iü<ÝÆÕ~í£ë!kdË²V)c§¯±.Ô  äMoz;rä½víÚé~¿¿æßøFóóÿüD¯×[cÛvëSN©3ÆÃirBK&IBlÛF  ¨aàº.CRÒ	N±;Nó[ßúÖôk^óéf³¹/MÓN$ç<7MSé@æ	ÀFù¢(§IpÃ0LÃ0Ò) ØôÁ~pÓõ×_?½qãÆf¦6!Û¶MÃ!±mÄq¼=SEH7@6~6M$¼óÎ;ã/¾¸÷GôG$y<I}Ò DÅþ>fÆý+Ï§L"ñ× |ÎywÃþ<dY&u/ÜênE%èª7ª)%t»Ýr÷¼eYðò¿(¥pçw®3ú¸$ãç!+vdÑcâqÈq2Ø¶É¾Ë8ç!c¬S¯×÷ýû¿ÿûCJ©û-Ë:bYøô§?}xzzzxÕUWYM1ÆÚI¸Ë½:eYFó<'®ëÅ@­V#ê®UeRR3Ó0BLMMÝn×év»Í[n¹eòÞ{ïÆ@)5?;;kÿã?þc4;;ÛãØ·,+ã8÷<¯,NôDßYZ­YQ¥'ØQ5mÛÎ²lã;¦<È^õªWÞ¼y34Í¤Ûí¦RY¯×_Ô1Y{Å-Bv«ÕjÃõ¦inÛ±cÇYøÄ'¶þâ¿X¿aÃV¦6cL*¥$¶m|lÛ( Ùl#êzãKwuÕtÕ]:¤á:ÇQv 0K²BßR1Æòééétll,vü{ú<LQ×uE6ç¼eÙÎ~øÃÞÂ9"Ô)¥eYl8:0P-FiÄéFºôÞÐÖ¿§XCªÛíªz½®lÛÎÂ0fgg»ÍfsA)ÕÃÑý\:Áþy~Ne15ÍÄuÝR+¥J'à*{·
Hêø|uÍO8Ö§ð-Ø6Ê4M)¥L Àå+_ÙMd`f,¥|ññtáý¢¨l¨Á²,39çuÆØÛn»mýÿ÷O3ÆRJRÊÑ 
£~&ë{§õ9Jc:"X³ nô£PnÀ¢Èu]·yøðáúää¤U«ÕX$¤×ëã8%uÔB¨Q¯ªyÉÑÓ¯=j«J}¥ùwRe#â'Ö?øàk9çõN§c66®Ã±H×&ëº×i0h³Ùäe¹Û·o?÷Üs×½ùÍo~LJ9Ëeiç² ÇÞ@{!FÖùjh£V¤¨$I$¥4Ù²eKäû~â8N$	ÎÛ©êïU
á¢ðýI$Ôó<áû¾ÓívëµZÍ!(Äºá¤cñvÖã°ÉÉIZ Ü¤ê$ù«ÕÀÊsSæRJIJijYVày^ 8ÊÇ¤11??odYÆ]×¥J)ZUÜQZ×þª¸ëÔ¨ÄGO«¦8ø3 ANÇÐl6i·Û5&''kç­»úê«'>ñO¾ï×RõñññRÊ>tèÁ9ÅïGã8&} ç9°,c°´´Tjx-..RÛ¶ÅØØXí¶Ûn¢hJ)Õ$Xó!®ËÐéé°¯c  1&0 h83$É÷½ï}³ÿùÿ¹¡Ùl¶³,s|ßJ)Úï÷I³Ù$A@z÷idWLO!åèáèeüÉO~ßtÓMá[ßúÖ¥a.PJÅþÎQðOÿ[@®J  oæN:©çy\LHÃ0R
\×%q÷SïbÂrÆ½¦k2RJáì³Ïw¿ûÝðÕ¯~uÓ^Õ=ÍDÂ0,Ùº6)4è 25°XeY&ó<ÏlÛ\×íÀþ/|áOOO?$ÉÃQu(¥Ôó¼ÎÇ?þqãÆ+¯¼²wèÐ¡õÒ~¿_7-ËI°8©æy^²¹"èL°<Ï+GÓ4]6Öï÷i$sÎ	 Îp8LÝ4MÉþýûç¿ò¯X1êyÊ2B®àÈ4hn8
[d4Ïs.¥´)¥­,ËÖEQ4»sçÎÙZ­¶faa!¥R)åþ4Mf³É¤ïûSNï¨`8Á0êû¾BØ¦i¶Â0\ïyÞ¶[n¹å¬}èCÛvïÞ½¾^¯·¢(²ëõ:?xð u]¦IæææÀq0KV)®o¹ÒtpGÃtiõQz5ñ	\}¤cç\¢ïéºuë> Q s1ë×YOÓð%£A`ÆqÜlµZSanzç;ß¹©ßïOµÛíf·ÛµRèH¤³ìªcÖU=·ÇïÇøñ³Ú Á­o1Ãø´ÓN´Z­nÇ>!$)7'*âçyùBrÆXìy^Ðl6ãÁ`3ÆT!AÑ«zc§ª/®ã¿ë ±ã¹U<×<MÓx||¼÷¼d>ÏónÑÌ´¼ä¸|þÅ#I2ÆD®eYã3W_}õÚ4M[ãØQ4MiÁ¨#_õ\ß§JôýÍÎªæ¿>é¤é nV (;@O9åº~ýz	Ë:~2Ë2h4å¹½02Jæãh>;q= à]^rÜö5×\3±¸¸Ø0MÓ¢sÎi$Ë2ùÆ0Ì¡«µë(²æã 7BðáphíÛ·¯yýõ×O½îu¯2Msc¬¬eS¨^ý¶A@¾Ê¢¦BH HÃ~÷w· CÇqâ,Ë¥×utz·Nÿ×»ï£ÀA]P´
b"MSÂ9giúÂÂÂD­V«+¥Lx,®ñ<Ï©eY,"Ã¶m«ÙlåÛE^tþ&^ ,·e1v+¥tpàXé¼"N+ÆÃ
öëcÙ£6­ êÌÜú~ÁDÙ°³¦9ú!k&²H¦T)ÅÍ¦õ®w½«MûöíSãããÂ÷}kzzÚÀèõzÜ0
Ëc¤pÕ#qÃp8Ë² ãÒÕµäêõ:äyNò<WBbÛ6ãq{ÍV«åº®[êà ®Ís¼`£,Ø©BÐÁ` ! ¬QJmùú×¿~úµ×^»¥Õj­1MÓ;pàh41Fü¢û*Ðú®OÔ]Òl=^#Ë1Fèµ×^Ë6oÞÌ.¸àT	v~<$º ¦iö¶lÙ2¤ÆãäQ)Û¶¡ßï"èÈôC°Z)%Ãrtï¿èÚÈ¼BÀ{Þóh4p×]w­`Iàk±BGL]Xì0  ÙlB$¥c9þEbëRJ{×;tèÐo}ë[»_ÿú×ÿ2=yl6)%É²lH)õßò·tßô¦7Íô£]Ú¹sç¦;wNt:¥Ô)ÌJ)³mBhEDw-ÀO¨³_ÓÌJM)ÅÃ óóót¹>aÜó<¦©=11aLLL¨ $cL!`Ç1X¥DccbÐ,ËÐô aÛö!dëáÃ_ÁÉëÖ­s»Ýî"¥ãÓÊ²,ññÅò¬Ò"EÑF¥Âó<;Ïór½mÛÛ~ô£õñ|ÛÒÒÒú©©©Vç¶ëºâÐ¡C´À&8 àû>$IRvÌñÒ@ ËìTd
â¾°m»ÔtCæ®W}L×;®ü^<è)\I3¥TÔh4ºóRÊR*fåy¨ ~Ý$IëºbØ¶Ý é ¶¼÷½ï½ë®»64v·ÛµA xÚs®*Ï®ê$_Çf>\*B@½^^¯§¤¹mÛÑïýÞï}ß`ÏiôXib=_ËBû[I)³4Mã8Ã0âápçE)=SûôQðêÏ¦çÁÈúÓÆB«$\iJ)ezÎ9çó¾2È²,EÓ¹ãõÙë{)MS"àY9RÊ1Ã0Ö]ýõ'ýìg?<é¤¼ùùy³^¯³0IEDk¤,=ÜsØÁýYei®òêÏqDÃ{¡yý~?Ïó<R¦eIÆ
ÃPá4ÃjW5ÞTF¨§cl¸U,$T	 µ8Ç¿ýío·	!.çÜHA@ôûýÃº}5¯Ö8ú×±É!)êjaYVmaaaòñÇ9ã3Æ `^áK)Ó"Wz
ií·Î <jHEQ!¢8;Û¶m;øÒ¾t~×®]k ÀSJj	R¢£ýÕNÞý©"©ø½Xêîaè&XÌWS)¥ :½^¯Nq @­D=f9ç¤Ñ4R^çÍÅÅE J):1_ }º`³Ê!³5R)U:.£¤iJ
À¯ìÙ¶¾TUwà)÷¶z®V¼UEþ15B4cdYãããõ<Oìß¿¿Æ97Ûí6B¨û¾ÏÃ!BPË²ïûÐï÷I»ÝápB°m»Üw8ç9ÌÌÌ@·Û4M $ @}ßçe÷ß¿5;;kE2á}ñxvã%m Ë4áySløÉO~2{Ýu×mY\\ö<¯a¦¹yófeA9&ez<ÕEeõq»jÆM¢T1"ÈvíÚe>|Ø1MÓ(Æ"6¶+ÏU;K aþé§îÛ¶¦A ùàäãý×VÓÕ U6eYàû>àèì¹ç]vY©3@¾FÑß/¥8V¿! ßï£³¢Ì²,B80÷þ÷¿Ïë_ÿú_rÎw!(¥:ý~?®×ë$Içye_«Õ:ûÜç:wÝu×â÷¿ÿýÿüç÷ÜsÏX¯×kaè2Æ,Ó4ëºÜ¶m&¥¤IÐ8i`YVyëu#=ÙB´i$åº.Ñtïû,IzÉ% ¤Böû}åº.jåÒ'ÚsVhËSÌ03MÓ:¥t NÉÒÒÒ©333ã7ß|sbÛvÜl6ûBÀ0Ô÷})¥TµZ^ì2Å&5CBì,ËZq¯w]wÛöíÛÏúä'?¹í¡ZÏ9o¹®k'I"  Å¹O0¹BsåÑ0ÔªþAö)jâEö_ºD®d·ëç¦ª*J©LÓ4BÄõz}hYV7MÓ@)PJå	 ðió=Ãi¦RêÀ¤i§\~ùå§ÿÇüÇµk×®9xð gY! QÓ4	?¸gñ}Gå7ø\Gj­ ô÷Ñ¿s*Å9Ïc	¥Ô?ï¼óºRÊ!$ ÌCOÏ/!RJ©ï8Nwzzz¸ÿþ1&aYpÅ3ÖÙ}Uo]»Z@W½.ÄøCQ1ùW¼"RÆóº^0æEð|ôûDâ8&ã°(Ì,ËêÍfsêÐ¡C¾ò¯¬o4í0<Ï^Ç Æjµ>ÇØ¹þ© zcRUÛàëqºì¾ûîAäJ)YÔï
5ÙîÒÅQ¤¢£)?}¦µV%¸Vúèy]mYY5Ö9r¤¦©ÃãRJj)Hee¾¢7èqÍë7ÕÉl`Qæêf)6Õ¬F£Q¿ýöÛÇfggë `ZÅR´VX=ßqçYãKÏP +!DN)mÛîÙ¶}øüäá/¾xëº­4MÍ¢{Nª®kXV=1Ð»}º ¬¾µ`DQDÇaa0MBRRþFYÍg; ,Ë(ç\DQäy7ùØcMÿò¿lB¬8Ññð9<ÓU!»BYsu4vX~«0¿ º2¯-¨Pu¹Ö÷.>Ì<Óõ6ñgÀÄsN®Ä0(ÄóRìR¯×iÇRJÇn·KÐuäRP¯×KÖeYÐl6a8L¢8IçÂ~úÓo}ë[BãâÄ×èH©R;c÷ûý¦aÓ¾ïoúä'?¹é[nÚ°aC ÌN§Ã³,£½^$Iccce¬Ä±ÑêzÕ @/ÎñYWYE±Ï{½5??_SJ5¤!Ã±Ë®®Þ7d7çRÊ16î2Æ|ß÷8eÇ1V®oÔ¸Á}¬3öñcÕql½PJ¢(6À5×\·Þz+4ÍçaU& h½a 
jðàþÆfE`¦RJ©,Ë$!$MÓ4èt:K^zéþðr]÷á,ËPJ;Ò¨^¯gEÊ)¥y­VoFïw~çwæÏ>ûì5Ýnwê?üáô½÷Þ;yçwNìÚµ«ÑëõÜ$IË²LB ð4M(¥(! Ó ëº1AìVÃ0`0`$8exGÒ4%yÃïÿþïÆSõz¤1Æ°QAaÅWJ)¦))\Þ9!Ä ¸BIÆØæ~ø´'|òÔ4M§öìÙÃï¹çáûßÿþ®ëº]ÎyEQæº®
ÃðEþ­Æ>WJÆ%p)¥-(Á¿o¾ù¬¿ù¿ÙvèÐ¡õããã­0mß÷Ea0èæaÉ/L  Ë2ddkT7A{`YV	J£fîª®ÞNÓ´dÚërÈ:b¡H|Þh4O>Ùe |êÚÐA8&Å9gQófeën½õÖÙ«®ºêõë×O/--5êõºií÷û$Ë2bYViþèÕF½7b]®øùªÓAxëH¹®«9"gffò0Ã$Iº§vÚÜ`0èBN>CNÿ\°¥$IRBHhYÖÀó¼0Ïó4c©R14y#ºó(À·Úà©ÄºqHõu3^Åq¬Ö¯_/-ËÊÃ0ë÷q}iäe7MÓQJÀÏ~ö³üñ©z½^ÏóÜB°Á`@  ­Vz½ÞqGÌMp²	~=VkT+Ù1ªîáÙÐ
Ù¤,ËÔØØ,--) PyË±±1%¥TRþªùõÑöwYëD¼[q( 0 09çµÿüç­ÂaÚÈ²
æsÕº	×«ÎD¯Æ´j³Ó0ÒTe²N?ýt~Úi§Ù{÷î­ù¾_ãÛ|¹OªzÕsó·uñ§YDª¸±2Ë² iÎ_tÑEÏ>ûìÎ#<²6MSGüª,'ÝdÔ¦Å?ú¾n°à8NYÐaHÃ!Ë²ÅuÍA¤,Ë2Ó4ÍFekÿçþgíC=Ô`Y1Ýð\@@}Þ]ßC2)X)Dÿ÷ß`"ò]¸>°VJãu8Þ2ê¾ë@ß(³¬ ý5ºí8Aäà×pDBºÝ.4MV°·À÷}0æAyEZ¨¿cXäù¾ÈÜÑ@{"¥÷Þ{¯e+¥´0ÀE¾:ÖÂs@3í¡RJ.¥´$i¹®»Î÷ý-ï}ï{·ÞrË-&&&ÚKKK6 ×uIE0>>½^¯4tð}¿tS­êçè`Z`lÕ8.RæÔ4MF)µvìØÑ¼øâ'·nÝZRÅaJåçSRª  RFón£Ñ·m»7c!D>6 Ð ï¹Êá3A0Dï# Ç9n·85Ò    IDAT
$	x_üâËÄ\OÆ«bú¦iB+E½s¦i¹§1Ñ	@£êÿ³÷åÁUÕù{8ûÌwzsw¿î±DD0Æ¥cIL¤*&¦5X©Hò«hÊ¤ÔRVBµeQ&"¤U@%nnèáu¿ùNgÞÃï>ë¸Þá¾eîæV½jè×ï½ûÎÞ{íµ¾õ­ïSJIÛ¶åååîe]6wÅWìÃpoçRÝ0Ó8¥çyZkm<ÏÓIhÛ¶e¹1&IÓ´K)=8==Ýyë[ß:uÑEMßÿý~ô£MÞÿýcßúÖ·ÆqívÛo4NQVQç{ÇÓ4¥I 0]1):ªÑQ{yrToÜ¸QQJM¯×£ããã|0Xä»Oø¾osÎmJ)3Æ¨5Â!6çÜ¡úEQ´R{½Þ¶{î¹g[eæçç;vD¯zÕ«VN>ùäCKKKÝ6$I(Û¶µÒ@|.h_W g¦çy<Ï7;³ýî»ï~éûßÿþíBWê7²Á`@´ÖÔ¶mEQwmÚ´¬®®VîáÃá°jFÀÞÆ`¼/,a@lpý½¦iuçá¢³ÐÖq333ñÙgÝ#)¥¥TîæÇ½ÎÍQrf&¥¾ïILø¾¿åcûØVÏó6,,,´ÆÆÆååe+Ïs¦µ¦àÇ1	Ãð1yÎ¨ýkÈköGEUì¬à0ZÙ¸q£îõz²ßï§\rI8®zÃ9Ò{|ñ}êò- S5ç¼ð}?³,KBì`ÎÿzúØ| =
®MLuÂ97ccc0lð{¯3¥RÛ¶YÇN-Ë²6Þzë­']ýõ[ÆÇÇÇ¼ xçLà¼B®DÈM ñ×rL\£û¸ª) ï©ÿ{ÜX°²²BcäK.!ã$Iä6Øäh (ÞWõ?_è?ñÅZÖ,.!¤qóÍ7I¸ÍfÓÊó65y3,ÀtÈ½¦cS61Òï÷³¢Û·og_|±µuëVw÷îÝMcÌçy0¹ÉR1fêÄ·gúeáà<ªÔûÁ`5aQÝßþíß?üáç@×%?¹¥ut3Fý¢X´@Â ÁXð­Ã!¯B
!x$nlÜ±cÇT·Û]×e±4Méñß'
\ÔX´tenYkW)U¸À²,«¬èñØÃ¨qO<B]6PÐÀqAè¬×jlþ=\xÄ
>ç8NÅqR¥ÐÂÅëÁn·[É$IhIù§Að~¿o?úè£áÊÊJ'°ÙlÚä»b§ãùbBIÊ½B¸ÖÚSJulÛåúÿø/ùÖ·¾µÍ÷ýéÆÒÒ­b º ÀÄ6*NënÀ¸Ø6&0h<Ï«¾¾ìôrJ©ýÃþ0ØµkWó´ÓNóµÖØd¢âàX-@Þ  ÄN§799i­sÎ¹ZXX0¶m(H»Ý¦0Á	8«PcPôù ØsÇ1ñ<ìÛ·¯Z'`Â/ÄìÐ½MA`ÿõz=255ElÛ6%¨¢ (1ÉÒÒÒê«_ýê_~ùÛ¶mÛ$É>Îù1&N¤ð}_÷z=Óh4cÌ¸®«â86ei­µ4Æ$ó^çK±CBÖË_þò¿üåcËËËo{ÛÛ6ìß¿rÇã·ÝvÛÄBÛ¶ýrÜÔMÄRZ¾ïC3Ø¶]©y ã
²à3eÁ¡ÇQív[º®K	!"Ë2×q+Ë2»Ñhi¶¤!¥k3Æ¸"dÃá°ÇñÄÒÒÒýû÷oY\\å7î»ï>Éë¾éMo:Á>ÇqcF#Rjß÷36³£ôEËÆ OÓÔñ}¿eYÖ&Jé©wß}÷ïyÏ{NÝ½{÷æ­[·v,ËòæææmÛl||B*7A(*öäf0h,åsHÁ}îSÏó*f*¼w|Çb<ÝiJ©*"ó<¯wòÉ'/)¥ú0Zñ<ÏH)ë
pÔÞ ð¯dw{ywcöîÝ{â<°ill¬Óív½8­RB*æ_kêM.WëÇÏåYÌ |H)IÄq½¼¼¬ÍfÆN:é¤¾ëº)e
lÏõ¦Xg à)úÝM	¦ë(*%hÈzîµ7êÀ_}¸^B-È4MÜ}Ç; X/Ç±Àï÷ûcÒÙ/ùËÓ4`BQRV#üÝnLLL²á³f=1G$±~9L>`íâúZÃ]æfðux¢	¦~çw~§Êkáþx"ÍµõØïOþ8¿/46ØúCs«Ôÿ³)¥AÇí;ï¼³áº®#¥äEQ0¨°ä1°÷S1Ç,W`Â÷ ©0Ë²Ìe]FgfføáÃ,ËZ«««N<+RÂÝ÷é³â¼Þ¥ÒéWA !¹Ö:»ðÂ«®ºJ»®k  Â .8±sázøØ	
'ÊEëL¸®Kà1Ï·Ã2jñ!I+ÿdãØJ©`çÎíïÿûÇq­5çÓºÛd]gá¾Öû P2GRlqqQc\­µàWlLJ©]¬4¥Î£]"%Þ(¥H»Ý&hG*ë´w¼·q,¾uÛàÃóæmÛDn Èç£ù#Á`Íxïû  EUá:6ùÁ],Ë¨mÛ\a>|¸ñðÃ}öÙ¡ÖÚ..êy-Ás,\È¿Ì¥ ]¦7}eã8-Çq6BNýÜç>÷o|ã§A°)ÏóÖÁÛ¶Y©ùGA?Cb!Á`ã8S¦dVLN­5h(UÅ5üÅüËfàsssb08QºÒºQÓ±R\­3BbÈ«ªÜ²¬ä¬³ÎJoºé&iÑçUz§<ãsg©(j =Õ8	 þ  .gÛ¶Öºr¢BH$d||DQD\×­ôHÇ!QUq;ÃêÿÚó¼"Ïó¤ßï¯þÚ¯ýÚþ}èC»^úÒþ_¿ßs>/xÇq¬R&CFù©BsÎ!DE!	!9!$R(¥«ÆË²üv»Ý<ï¼óÆ£(¸è¢¦VVVfo¼ñÆ±k®¹¦ýÀ	!:±¦mÛ¾mÛvçV©ç²ëÂ³-ÓívÍßøF3==Í1¾eYòL° Zëé~¿¿aß¾}ãç±±±tll,VÇ$IZáÁcy·÷ìÙ,,,èÿýßÿí^yåÎ<óÌ=EQì³,kÑ ¢>;á©q¸HÆ]kÜ,;¡er`3ÆB¥Ô4ç|ÛÃ?üË/¿üÔþðÛív§(
/Ë2áº.s,,,TìK·fUcØÕ}¡°«;]C³	7¡°S<Ï«;-MS2Ör[EÇ!ã!¦¢MÇsÎÌÌô'''W´Ö)eNÑç(Zg½=×¦eJÙÁóA»ÓélÈó|ëµ×^»¥ÛíN(¥Ë²D¯×c¾ïÓ<Ï«Éïà~ÃÌ	|OàgçîCø÷seqNÕÕ9wÇÄq¬¢PafEQ(¥Kïz×»æó<ïrÎS­µDFØåû1-Çâº×uÖáÙã"õ(Í®Ç½´uáR4p~ñ´
ÇÁ@®Kp-W7©ô§ C~vv¶ÛûjBh`Ãç`¿ÒÖ^O÷¾þll,_ï|>Ñj=r;h$Ìó<[JÙtgÃ<pÂ·¿ýíB6¥Ôú,ÃJFÁu]Òëõ*Í}hÖC>RgOÃI¼Çzðl¡)§ð³ïMÓ4%IÛ¶×üü'óüX@}OmÂTWPJITJÉ¤mÛ®Rª½¸¸8}ï½÷¶)¥.!Äò<ÆqL=Ï£XzärêÓ<Æw"MTçÇqÒívÉgA&&&èC=Ä¾þõ¯n·ëyæÍ7ûsAÊ*Æ-ã5ù¬øá²IÓT!ôââ¢æWà_àÁ@OÝÅt½Nþ7øóPèÂÃdvee¥ê9òð3ÉóÚ¶Í¢°>ì&Ib{ÇR¬Ô2ZÓ]}:4`,«Ô	cyÛÖºM)mcË²bJ©5à	»?U½cÿ	RJÍ	'`!fyy¹Î iÅî|BÁZÝYß0F;_pë=5mA	þ¶føaóÐP@&¬	ï= ÊhZ]KáîÙ³'<çs¼¢(,!ÃAO"}^'çðÊó1Æ¶m»QÅ4clÛwÜñ¯~õ«§ÎÍÍÍc:¾ï{®ëò<ÏY¦×Øð¹ñ|Øw×]Ø1þÀÁr4*ç9+tàïñ¢	!1&Ý¾}{rÃ7äRE)5,°º6g<úÏ9è¢Ã
ÂÂCgb/ ás¸»Ñh(R{'ÇIVÏ<óÌýW_}õ®óÎ;ïn!Ä.cÌÛ¶{RÊL)¥mÛ6¤A2%ç1f`ÄÀI)1f9Ïó Âáp8æ8Î£ò'Ò¼ì²ËÆ¾ô¥/múìg?»iuuu#ç|r04<ÏóRVÙ@`åÝO¡p BJI)¥Ì¶m{ÿþýáÎ;§ßò·¼Âó<ï»®ëE1ñ¹Ï}nó5×\³¡Ýna(^ñW[¶l):Ä¥Áââ¢Gq|ßwî»ï>·×ëqBºûî»Û·o_8÷ÜsugÖzQ)Õ7Æd1UºÐ>c`T¼Ä¹mãÐ²cqÇqü,Ë&ÆÖ»ï¾{ûG>òo½õÖÙ­[·vÒ4õò<ðÓ4¥ØXÛ2±Àö:Ä|a&ý*¥\£w4ÇlÛ&«««ÕGyk¥ô}?=çsZë¥4BÃáP#ÂäX×(~¼»±R0bÁ@¸®ë+¥:Ng6¢¿ùÍoòñ|ö¤Njgii;ÃÒ4¥uçV¼pá_7ÂÅÎOêÍp/ã¥q§2)
 ¿²²rèSúÔ­[·îãxÑ÷ý8Ii~<!=ëciÝqcà)@ ,æeÙizÃáÐNÓÜgu°:j´cxxï×âñP(®¡)\ðsàßÀ=q	>8á÷ u]j=Fâ:uÂ3²Ç¶¶I°0­<Ï½¢(Æ ýüç??EÑ¸Â·,ËRJ±2æR¨£]×%ý~Í66uÖ!¬×/8§¯á^ÀæÇMùùùj/AÎÙÃ/¼úéå³¡eþèB?øÁ:I¶mÛeUúôpaÌO3`£Å]È  óóóä3Î ç>¹å[ÈÏ~ö3:77ÇÃ¡¸óÎ;ÝK/½ÔBÀ(>­7ÔF­ëÓ½ÖVýÕi%@9ç´LØm·ÝÆèEíÇ=õ.îy­Ï`ã3!0RJÃáóñÁ6
#ðùùyAáJ) P=¡zª&ÔySÆ'¸<ð@ç®»îÚpÎ9çLJ)ç-Ë*¥4Mu)òmê ÐsU¤uT¥L*RJoÚ´IBte Àzç»0Ô¾Q8ìÍB ÂfÄÁz)8¡ß	ºîEQTÝß÷«¤
Ññ1ÁNxïx,9Ë2ÒjµÈp8¤A°¢(¬{î¹Ç¾ôÒKEç1FA[îx¿¬c´Å¤e<Ï=Ë²Æ<ÏÛò³ýìÔ+¯¼rÛÎ;g·nÝÚIÄËóÜâ3Bõ}ÿ1ÝkìÂG¦p¹zA"Há{a³R7mÀu4±îcø?!$§Fçw^ÏuÝ¨ßïÍfSÇqlÀõ>0ò a[|ÇÁ=f¹ÃZB|À©8*¥H¿ß'A<&¦g¹vÆ÷}ç¹t'Y\\\Ý¸qãþ}èC÷wÞy?BÜ$É~BHW)$I¢,ËÒååÈ"ü\##IR¦ÑPÌ1Ö:]JéÊÄÄÄa!ç8Nó=ïyÏôýÑmþÌg>óâk®¹æE±iÎyÛ²¬Rê4¡b1VÉó2´ÜRê,//·ßÿþ÷ðå/Y¼óï}óß<¼÷Þ{½o~ó/~ñ½^¯SE`YúðáÃjß¾}ôàÁ"I«Ñhðùùy:77gz½^çù°ÝnÏ]qÅzê©PJ÷+¥VµÖ)¥TB·7uÎ¤ÞXª³9ç$"!É²äyÎ °8çc¬ã8Î¦~¿Ò×¾öµ¯¿þú³³³¥¥%Ïó<+MSVjBÑ(h¼Á=¥µ&q?¦!L\ìãØ ïÙ 3³fú²ÑM'xÞ%Ö(¥´ã89¥4ºàV¢è+¥2ß÷çyÜc!¯/)%F±ÖI)cÌBGQ4Ë9?õ;ßùÎþç¾R:­µVWWÅôô4cÀÜ	 übË¢ 'ïªÑ	l	Ë²*m[FpC!)B!N§3\^^^øøÿôOÿôþ<Ï÷4¥<ÏJ©Æ?~ð½ø)	Rª¥ëv»ã86L¥iJ9çÓ¡Çëp<¨7Ã1è3ê÷ã `Ã///-[¶PÈQ±¹VYü¼1¹¢Î Ä ä/¢!÷Ëì­QãñOdê?ýlJ¡ç±Á``»®Û´,kÃ=÷Ü³õnk¦ij+¥xeRJa 4_àb@r`ßcMb,7SÀÜi 6@±RZB³³(
rèÐ¡¹+~áõÄáãÕZÃÐZ{Ææw¾óÖÚå[1
±ËWM¿Þh­ëpsÎÉp8$RJ233CN<ñD2??On»í6²wï^" Að$I,<ïûþ¹g«²ÖjèÍP¥BpBíº®sÓM7	)%s]·Ò@ÂÉê¨zðÅm½ Åï
NHäbèÑfþIÀã,:å³<ÏyQÂ²,ÎcR
®¸þtÌ*+G9çÜÞ¿ón9çs¦µÖû$Yu]7R*Ë²èQa¸ú<Öç(?ßc´Öº°,+Be©4M$70Gê¥Þ¡5óÌBÝÌ:kF#þXÌ×qÒl6IÇk
Â0¬Æ àòÝaÍápXudsÎc|Ï=V©ÇÉ}¡ºXåzAÀz½eYëû~»Ûính·Û'~úÓ>ñöÛoß899ÙvÇû-»Ó£Îqç¼þ|HD_Àè°?Ã!H
@Ì§RJ#xLÌ:× ÀÌÓ;í´Ó7oÞÜß½{wæyÊóÜ`l¼NLc'oÚÖÏÜc õ0
Áw ü, ð±Î ^4²g\×5RJÅËæçç»BW\qÅ®/¾øî,Ëv)¥öcV9çRê#Î@²^QÀZÃÃ>!D	!
!DF)M´Ö,ËÖÚ±m{ÑuÝÅ«®ºjõ¢.ê~ä#ÙúÝï~wcEa¶)¥1ÆNÄbQ4J
¤Rj­¬¬ºcÇÿ;îØðO|"Ï²L>|ØÏó<h6®ëºÂ8`vïÞm<HVVVÀÑÔ$I¦i¯ÓéÌ½ûÝïÞ}áÞÇñ¶m/cÒ1£Ï¦sé&ü?¸å¦iJ]×eeYEQ¸óN·ÛÝ¬:õºë®ÛþÙÏ~vëÉ'<Eçyà3hâÀÈU}<wÅ1ï zã¾nLÀ4£`-aïã"FÆÀÝ@ÉÑjJíAÃósÞ=ýôÓ]JiR¤kB9\Bo0CÇ1±, ¯ÁøâââÖ±±±S®½öÚüå_þå©¾ïÏv:ÖÊÊcáBÚï÷é(Y\°Ôs:@Xª9ÏWycdY	Rª¢PBdeeeõ.8pÅW<eÙÃRÊCý~À9ÏÇKQüD¤ÄsÀê¼tÎlDQ4Þï÷a:I0Ë²h¤ 	 @Ìø­Ç¼'FBBÃ Ô­Ìgiùý)çw´Mé|n Þb0ã¸UPÂÏïhL¿§"îÿ²kksÎ9/Âm4mcÌÆ/~ñ¢(³mÛ/Â²mH$Õ(u¿ß¯j3`Tb6Îcê5þrLø^PÙ¶½¡V¬AwÇâââcôÒuöö¼^xzì¡%Fâj­[½^oü;îh¹®ëZÅ1ô±MýÞ5­q*Ü¬Èóy$qÜÿý$I2çzÇR|~~Þ¢ÈaÙ¾ïóW«jûQ^Ï( ¸Þµ,Ú¶ÍµÖN¦$IÚ÷Þ{¯O¸°²8¤tÄÄà¨EÃ¶ã¸ðÁ_iÏóª õFQÿd=í	èðäyn	!(<ß÷+í?(A .YÆ³ó<¿÷½ïM:thÓöôz½Ïóbß÷%89Ù¶mg	f iBH!c½F£§iZäy®cö;FñG%ä¸`ª'Çð#Pø`ð4êB¸3W},±î"¿:©Àî-ÐãÄ? ua4±(
ªâKKKN$®ÂVJ1¥Äc:#< ¿åç9ó&¥tc§ÓÙvõÕWòo|cëºcFÃïõz"ÏsÖjµH¦kCb÷´Q^ÿºñÌ(°Ö¸RîÊ£qs¥Å9çXðÇ ¨ï"ö}¿¿}ûöxÏ=¥TÛ¶m¦ì(>¯xL¯~æpáß!HEà9<Û *¹BÎÀÖZv»MÊñMRùÕ-ãRJ©båý~àºîá~ðüáþáÝZëûû1«e%Ò¢}ß¯LOC«¼	!ª;ÒeYV!`RJN)-Ë¦iÚß¶mÛòW¾òßüæ7OüÔ§>µå¡MdJÑd¹BËÃ$astçXsæyîDQÔºýöÛÁåWÙÙYÎ9g=ôÙ¿?É²ÌÄql\×Õ2MÓ,Is¾zÞyç¾äK|÷»ß}eY»sRÊ9b¢cFkmêÅáSYJpÆì)Ï.Ôu]¦r!­,Ë62ÆNþØÇ>vÚ5×\s1f:¢0Ïs»Ýn³Úl6)éfÞÀ¨X¢Ûa  	 ´1¤(@Ê7<à`P)e1¦Ó4Í_ó×\×]¢(j4RJB0Q·B©ZÐ4M©ã8snCÏÓRÎNNNòï|ç%_~ù©§~úlÇ¹¹97Ïs>;;Kieî,¬Cõ¼ÖBðz@RJ¹¹¹j/ÚmÆq£ÒeåI¦¦¦æ?ö±=:??ÿèôôôá4M{ãde¡ÿOÿ_$¿8ÚïRÏ+ëÌ_Rb¨eYBkí&Ij­]c¥µfZkÙ¿Xë¦pî¨ù°þfâü&½´t®¥yS¥/u¾ G!EQ(hÎ& LðlJÕ4¯ë¯Õõ
cÀMeäEâ8¸óÎ;go¸áéV«Õ,Y<IÚn·)ùA¾tA+WÃYõÃÊ:(pwÔ\\#AÃòø9J)2H$$^ ¸ÌÓc`(eQ¥3ÆØ±°(ÉÝ»woÜ»woÇqºôÌÆ<úk×s·Çuõû}Çq5õåû>å³8Å<àEÑ
À#~¿ÏÍ&-Â?ÏÔz³õ9@JËQ0»(ïû_øÂ6j­;B7Ïs@Èz °Ô0Ýwxê ¾°0K.ì
¸øóù £çH	!1æ0ÆZëÎ#<Bì8¥J)©>Ý@üÒ×    IDAT84e§EÁ1Þ#<Ò¹ñÆ§!ai
ÆX¥ÿ¶ëå)èR>-VÍ	TB2Û¶{A,xâÝ8SÆBh¥qÇàq&vãKI]¬hñ=TõÄ`!$I8Çç¨ÞAðPJIâ8^#¸¬µ&«««DA\×%Zk!ÁÉ1prÇaÛ¶i$´LÈ¥ÔîõzA$mË²­µmáGKUð%ßÔC `ç9I4c3J©m×]wÝé×]wÝ¶v»=mYVEp]¢°ÉAÇtß0sÇU<*ZïÈ×Ag¬?ûÂ»Ý®Ç±G±É·o`×qÀ*´ÖÙ©§Z!ôp8¬
 úpg»®·Ï=ÒÀ y¸pÂúXßÖî?×uÉæÍÉôôt¥÷	kÆE%ûOK)ÅÅÅ8Ïó¥÷¼ç={ÿê¯þê~ß÷ÈóüÖz¥(RbúG(|å~xÜ¢&Ü¾tòmÛZ¡R1&·m;³,kçù²ëºû[­Ö}B\|ñÅ?Ü±cÇÞö¶·ýßØØØ£Q-QJZë¬»ªl¾Àþ§EQð¢(Â¥ç5 }ß÷â8¶wíÚe=üðÃ,"¶²²Â¢(¢RJÝï÷ó<ÏEQ,{î¹^uÕU÷éK_úß÷½ï}w9sÿÒÒÒ¥Ô*c,µ,KÁÁµÁæKO}*ï¦:øQ×uYç¶R*(b:mßûÞ÷NÿøÇ?~²eYµÖÍ4M!?xð UJÑn·[}P AÎ5*æ¨À#bGàsX^ Ô]P0Àþ]qqhÛ6ñ}¿z/¥6¥ìõzÙùçæ,ÖZEapSùx+Ðþ Æêº.¢È"x¾ï·Æl§|ë[ß:ãâ/>µÝnÏ®®®vÃ¡çû¾ÕjµØÒÒ%±±±}Yå<ç<£XTa]@!îa¦(Öÿ;.edYÖâÇ?þñ=333»Ûíö£q/û¾»®[þ®7{JýÂM'zRÌ¶mÁ9·;ÐZ3!#QæuÓ-uhldVÏãÁ×SÆËóÜr]×v$L^QcÌãØ¡Z1¦)£Òr$´×|ø8å¾1-Z:yR¨;×c>[ñý|ç¹ ø¶mÿÛ¿ýÛäp8lc¼F£aqÎiç¤×ëB~nkqXï7Á@r\·Ã:Ô|-5á¼îÿp ó¼ààýãÇý«Ü3RÊµÖ1¦EÑÿþïÿÉ²¬eq1¼ü7k$zðAîº±'~á;/E1Æf³YÅ=ÊÈ²û¾ï¬®®6Á8ç¼YæiÕûõñL½¬õFKàÙÝzÇÓ¢hÃg>ó±1ÆRr!Äº e;¾¸ÅÂÂ8ÑÄ¦ðwëèçKp VPJmJi¨zè¡6|ÿûßïØ¶í¬@
l®õ~Ï§â`º+¸hºèõzá7Ü0ñw¼c²Ýn7Ó4]."µm[J)M]èù2}DÞÒhBHn|ß_}Õ«^5øÉO~qÎÔ·x¤r=Qâéõq` ðX;JETw]zÔÄF A°MRúïB§
ÝºÖPûË÷LµÖ\áôz½F$ó¦Ò)©ØôX§ñÚÓÆò<ý~ß3ÆlþÙÏ~vÊ?ÿó?o[\\Ü866Ör]×É²K)içôà@Ã
wÍq¬Ä Lö3ñ÷Â¬ëË;ç9ÓZ~¿¤iÚò}?0ÆÆ«ÇÕã 4sM)U'pv]×,.. ÞhÉ,Ö»¤¯fÿÁ×H÷¸õáõ@H ;á$I°)1ÆHÎybY}Ç;ÞqðøÀÃ±µÖs±. \eéò{|Ç-!¯³îGåðý á×Z,Ë¥T;£¢Ãá0¥Çé¯üË¿üËð¯|eò¯ÿú¯É=÷Ü³!Ë²1Jiàº®#¥%Á÷Æ±1A`Ò4¥Æâº.e^¯GlÛ6s366¦Aº´´ÔÛ²eËÂÛßþöýïz×»ö¿èE/Ú[Åþ,ËPJÍfO)pÎa$zÍï)ëuÊ;	ßç¸èNzÇz½åû¾ëyÞØ`0Ø²{÷îS®¼òÊmÍfsceí	7Ë2¾ººJ)¥0F]ípÜác¶®Xo³5º~%ã¹b±Cî+  EXÏé4M%¥4>í´Óú±a³ÙÌ!*I
 %â} øGaÁ@4Mg0´ò<ßØétNþÑ~tÆe]vêI'4«ê>|Øk4ÖàGåþOÖÇôF±RëÓ?ç`p R¹¾Æqç¹²m;ã¸ñÅ¼ðÂ°,ëaÛ¶K)IäBç¹q]×Ôëã¡AÁ6ÌÊÄûáI: (F(¥Ô¶mL¸`Ü^ÐpÆ÷Y}J	cÛúX0|FU_üâ3Çq¬^¯çöz½6¥t²"BHæºn¢J¤¹ÖZFQd´Ö&ÐÅ=Ã3X[»Û±1 úy²ú/º?ëuS âymi¦i:q÷ÝwÝnW4¶²²BFÅ¾q~È1\y!ÖlZ£Îªó4M«õÆfpæ±9%vw¿3x°þ/°ÿú½t QÄ8ç¢(R:Þív7íØ±csclJ)£?Uõ¾×ðþÅ¦®°ðµ%Ø·Æü´Óéùùyx¥ÔýÁ~^rÉ%®mÛVÙÌ¨ÌñôÌ3¹®Ö:ÀDE1¦
cÏ9¸ýöÛg<8%hE!@®nRh£cH*Ò4]CKÆI%Ö¢ÑZß÷I¦kZÜe~º`Ï(ÐlRêEÑIÓtæþçfvíÚÕ$Øç1Ð Ä £tì3À@éfJ,ËbZke¿k×®ñ{ï½wã¯þê¯û¾?¦iD)-(¥¦<dfTù\
\ë¼C)UYeóáË^ö²"5ÆH¥â©^ ×Åëf½HÆÂ·ÀÀw¬ÙÁ>øâÄ BrÉ}«Õ2¥óÉ²Ø¶Mâ8&çQøC:|ÀÄ-]jã8b0øY5KñUÁXBÄë»ÀÖ !Ac¶mÛív»$É´âÄ¿ø¿8q×®]6nÜØs¤Vl0ÐF£±f|Í@Ò]¯Å@1^ó:E=Þ5
ì?B¦iXÅR*dUhýçëH­µ±,Ë´Z-ÐÒ#±JÝ(·sì Ïahdá¢â òÐ+¥$ý~ìÝ»·búNMM$IHE¤ÑhÛ¶µRfY¤iÚ}Ë[Þrðÿñy@)u Ë²!Dl)1º,
é%ß±^ø n«V?0lbQeã$±ì²Ë.K~ý×}píµ×®ÞtÓM³÷Þ{ïDe-×uJ©cYãEQDÃ0$®ëÒr9²Ùa¤ryy9Y]]]=ï¼ó|ñ_|pÛ¶m»¢x´×ël4KåÈodÛv¦J)]_¦p=wSm|ôlX»Ý¶»ÝnS)5ãºî	þðO|è¡6AÐRºVL¬YZZª/0Á&$ÈØÍ~%£4o1kàa-@¿d&à>³LA87À¼Ï÷}¦©"d333ý³Î:k©(~çïû*CC)5RJüã¨(\»7/Ë²ã8Â0<iÏ=§½ýío?ebbbÓC=ÔÙ¼y³ç8HÓÁ¾
C2ÊEy½Ü¾®sÂ(_Ýx ÖÔCÂ0$if³IÊÜJB2Îy÷²Ë.;ÈÛgÛö|$}Çq²F£¡Ã¡	ÀGå;éhMÇ«»~©Ñ²(4T(Ü7 ÙX7þzÎ4Àî\|×ØôT)EÃ!ãã¸»wïsçD×uIe«J©hyy9Z¢hÒoµZi·ÛívÛdYfU¦lri)¥*ÙÜT r6(ñró,J©©O÷Pþh9a¹®ë'I2vÇwlxäGÆR¾Â¢aH1ÌCQÄó¼Ê¸@)E ±ÅjZrPÈ=Ö;OØ¬cÔ=UÒ"=A¨«»/¼^x=NÎ8çâk­ÇÁäüãV®1&3½¹;&ÚÔóñQ¤äÂM|ß¯ÞÇÔÔ)¬®®0eY$I2;;Kî½÷ÞJ¦+ ¾V]×»T1Ìq+Ïó@1öýï1Öb¹¾ï[Y±RyM ¯ëQm	fL@á¸Û­V«#F=´ºÈësxãâ®:PÓ1ÆRJ¶mOìÝ»wö£ýèT³Ù¢°$a¶mS äêÌIü½ª¤ÓfRsÎÎêêjó?þã?&Î9çñr«Çqæº®<× ,!Æ¢¡jc"dÁßøÆU­õPJYØ¶­¤cÖ-|á{Ç£Q\ÀP)Çq «Ftã8^ÓaÿP¨ýxô)MÓ*ÁÂâ¼B³oß>Óét´ÖZÇqlRlÓ¦M¬×ë±²x¦à`
F ?æ8Ù°aC¥wP+B<øàÎ-[lJ)7ÆP)%UDàâó=Y@.×ui)@Í1beeÅÃpRú¢«¯¾zÛ£>º2¶¸¸è$I(çaHÃaeÎRwäÜ£@äººÀ9³FëìRH°`Oú¾OWWW!Ä!¤!ð´Ö #ÕãcA)e6mÚDÚíöcàLÕM< £]«TÀ¬ìbwÌºz³,«Î¥@gâÃââ"i·ÛdbbÂ,,,èÉÉIçy¦éê¹ç»ÿøÄî-[¶Ü$ÉÆØmÛRª`i(r0ñy­§4ª	:nè>P%+PSJUÇc,çÇ333Ý¿þë¿>ôæ7¿ùE×_ýæ¯}ík³j4MÎ¹'¥e1¥)¸gçÉÚPJ)öz½ÕÓO?}ÿ'?ùÉûO8á{²,{ÀsÈqU)eÄ9Ï´ÖEçRªËgbêãw=Ug£þLëR1¦©Bø®ëNc^tã7üío{³ïûcYySSS4ÝÍ&µm¬¬¬TûLA<Ï«bÜ[y(*0ËU` ö,|Àñ ª"!ª$¸ßïWïÃu]âºîJ)°!Ä$Ibò<×Æì¢.:³J)Ú¶yf#>×ó¿§j@Ñeñ<*¥¸1ÆYXXha8e9©×ëmÿßømyoèäyî­®®Z333,IÇ1Í²âº.#÷`ýÿµBÌøÂ×u+PO  TKÆu]5Ò0W^ûÚ×$ÌK)»ã$YÊ¯¬1x®vë¹ùâ÷?*fà1ÙzØ´È¦WÒ\»í(BÀ@ @X»3Äq$ÉcæàücÖ/ü.èbYY+++Áõ×_¿q×®]dûöí.ºè¢hëÖ­±¢7??¨ÙläÏÇqÜk·Ûùp8TA<Ï1FE¡c¹1&RJß÷5ù¹}UCI)cÌø¾¯ó<WBM)Õqë4Má4ð;þ"µÍ]D°aäÈÏ»æk&²,k¸®kK)yç°°ÿ ¶Àf-Øí·ÎúÃãþxª¤®³÷	<KÐó8ççAþb°±"p£àx~=Þßñðû£*÷$¥ò$Il×uRÊ[o½uÜø¾/Rê%;a/Â²1êw 6Cî9LØØ¦©ñ}_¾õ­oÍÞö¶·ÅRÊs®ô}SjZgkM­£°Æ(!clÎy¦éÄOúÓ1cL`Y`G^ÑªÁ4êÄ;`Wè)M ±=Q«çÓÁÀIh¤cÖ:0ÆLìÜ¹s:ãvQn©­ÆJ°¡êÒü"ãMdjH8SJ	ÆXðío{üª«®lµZíáp¸aZJDÕ/ÉçjA¿§)Ace¥n/{ÙËzwÝuWJ)K-÷-­;ca=¶úH]}ì .>Hè aBÂÅkÆÝ!Q5|Ã×!i4 BÁ``!jjjª8tèPáº®Ì²ÌãØ!XIp×u°ë %ÈæyÎ~øañ×¼FxÇ¡{ûDtÄÏ/ yéRvÂn»Ýî0Æf¿úÕ¯nûÂ¾ð¢<Ï§fggÃùùy!¥dEQPceÏóÖt¥prûÆ20àã8xÄôVp|¨C£öYé,K	!leeEÄqìc9¢KG±=õ ôAv»]±ã0»ÖiÃúfXü<G+ëòõlht:Ç1É²Ì$IbZ­NÓ4ã¸wÒI'ü»¿û»Ý7o¾[k½s>ÇëEBc´ú¥Çk)][)¥ºüP¥ëî1¶pÆg¾òÊ+·nß¾ýäO~ò/Úµk×Æ$IÆ ¢°1LA²,£0:ïy0ÁÀH)µã8ù`0è}öÙ¯¹æ]/~ñïæßo9@éBJiaQÒ5Î¢ëíg"Ï¨³+ãj­©çy<MS[)ÕrgÓ®]»^üÁ~ðDË²¦!¡ëº""Æ9§À±_0øÀîò¬¢ôBN	1ÑÕ°$ÛuÉ ùð½Yw·w=`°8c\×UËËËÅYgpÎ±"uéÐR5<_PÄ{ZEµÖ1Æ¥nmß÷·ìß¿ÿ´K/½ô4¥ÔVÆØø={|Û¶­F£Á<H¢¨ÚQ­À ® ÂìOÐ`ª³¢13Tåº¶m;?åS"BÈ*!¤OI1¢A_ôùdò÷ËÊ )^<ZOëZ¿`Vôd¬åp8¬ÈÀÆÕZWÁ`@RÄ÷ý*'¼7)!÷sßn·×ì1|fÁà¨Ì9!Äíõzc;wî´o¹å¯|å+ùÄÄDFÚíöâç>÷¹¹ÓO?ý Rj¥×ë¥­VKõû}mY¶,KcRË²"Jé@keY&å4ë¥ÔE¡$)cép8Ì	!mÛã8ª,àá'ö>Y ¹¾­JI;Ë²PJ9~×]wuÇ	´Ö¢(
Öjµ*f_Ý½^{â<»â}Z?»°wëR\xJ	&ü `6ìpüæ+¥Éó¼ôÃÓ/¼ß×zSV I `8cÌ×ZÏÏÏo¸ùæÇc>èÎ'>kêz¥xB[uEÔ]«áP|JJ§i:Ü²eËªbhÉRZ)ep}ülÜgVý£K´Þ\cL{eeeúöÛo£úZkK)ÅÊOqÂGñÃÂ£"øÿ1 E,Æôì¢(*@Á÷}ÌëÏà) åó¢sÐ]l.//O~ýë_¢( Ú1fÛ6IdÍ:.ÌêTw+ÿdR!¥}ôÑ;vÌ¾óïÜkÛöBQ1¦°mnçìB%	3Gt5è vßð7~òdÆ%0À~EÃnbõä.?H°-Ëª´Â à £³& ØÂN¤±Æ$é¾ï!év»Ä²,£Òããã*Ãlnn.RJõ/¿üòü'?ù÷Ýï~·ÕétXæx.cÜ- ,`s~Ûm·ÙüÇìZeEÁtõBúézVÃP`Dcì EQÌÄq|ÂW¿úÕÃáÌÔÔTóÐ¡Cv»ÝæRJZ>£*.Â¸(±Å .H&à³NqÁáºv.ä QqI!=tèëõzØüãx2 YSàgÁ| XÓ4­Îa¬Ò÷ý5cØu3:«À`È 5ü<Ìô7½^ÏA 9çy·Û¸®;ÿÞ÷¾÷ÁßüÍßü?­õ.­õcÌªÖ:µ,KI)Í³Ëý
,SÊGhÆ:r¼²ae½V«µòû¿ÿûýSN9eðïÿþïÑ×¿þu5???!Í²Ì.ß«ïÇ14&IÇq²eËåÿ÷ÿþß3Ï<óÞ¢(våy¾s¾BI!¢Kð<á]ëü,*¥ä×²¬NÇ³W\qÅ^¯7Ýëõ¶RC!u]·bC<v1¸8ÂþÅFÀ"Á YÃþÅ_cü=òÀ¬xÆw6¨I³¢æ§vZ,HcÅ££M½ =F)w:¹Âq§É9î÷û'~à8é¡ÚB)°mÛo4sÎúý>F&¥Äq\9ÿB¾1JÞç7Ø¤Àc¬±Tg¹á{¦q4ÔgSJJiVÏ*^=ßî¡Q³O4*FmY/Á(T9#?%y7ÜQ>øàw{Ütô<´Z­Ç4!¡¾RÕÕUÒl6ÉË_þrâyÙ³g9xðàÈOÌ$ªµfAX1OJ)ÇZk½ÿ~éºn¾oß¾É¿ù¿Ùô¦7½é¤,Ë¢óÏ??_\\ÔAhß÷µïû¥4n6+­VkE)c05 O0jÑeãÄEQtRV«õz½H)çY)Ë²Ì¨úæ©G}/j1Æ¸®ë¶ï¹çé,ËÆ!1ÆR2)%-Â5¹sõÆÏ¨ú½Þ<=1|WaH±m»"­¤ij<ÏÓe©^¯WH)ó<Ïëº/¼^x=-¥èmÛ!¥tìG¸å[ãØEQTFµ¤5ÐkÇ Ú¸ÆÇDº8:+Å0EÞ·o_AZEA)U¸Qùl¾¬E7ÆØRÊ`aa¡½°°ØG8$pøñ/~(õ1¿:@Ô_xPø`7øÞÈjÜ´ÛmcÛ¶IF8=^)úZT)ÅµÖÖºµ°°0µsçÎ6!Äã[ZkV®6¸®g0¢TéQJÛÿüç7üÞïýÞÛ¶÷GQ´Ê9Ï\×U`sý\ïÒ®C16y+ÆXfÛöðµ¯}íðÃþp¦µVÀÁNÖ£|Lpòu°@.vãxÎ9q],5 ¨ÃâëÀ¢e(L£ÑPQ¥ywó×^{íá/¼p¸{÷îÎ+_ùÊ-EQLÃ°ÑhPË²0ù°VYÔUÆÖh4Äí·ßîÇqÜv]7HÄn6¼(
u´ÂåX %S&ÃÌ²,±ººO:ó¢¿ÿû¿?ùÎ;ïÜìû~Gkí2Æ¬8iÝkãà`ÁÂ	»gc.&`ëïs§P8ÂZ(;c:tDv	úó¸yaM³<ÏI¦Õ)fÆ`æ°bà9kL]Ê1|lÖ1²yp¢A¸á¢(
cLlY¹ì²ËöýÁüÁ.BÈQäw9ç0Ïú3ÆºJPÄEiçqQñ¯üÊ¯Ï9ç¨Ùl²ú§Yqc+BEÃ ¸E&F#ºà.¸à=Æ=EQÌÙ¶½ZE	þ ¨ÆåÓbIìEÂ£1¦²(¥¾eYãýèGgwîÜ¹Òtó<çÀ Ö8<Bpß`È:Ë£>º^71`ÜÃ¬v °ÑÜ3Àøçû¾!è<Ï3Î8#îÚ¶I)s¥¢#Äc§8Øe¼æ­VËMJéåååÿÙýÙ)·ÜrË	®ëNÚ¶&Ib¯¬¬°~¿OO9åÚëõÈÈª1MX¯º³+nR`¦Þ§Ø 
30»´  ûÁó<³´´¤N:é¤RZBTiÊö¼^Ô_$?>{Ù¢å9¡Rç9#P!ÃzËL)¥¥y	*Î9}² ýn·[ÅC­àW.°ÖuÉm:ÿüóÉ;Þñâû>¹ñÆÉÃ?L,ËªÌêõ#ËxC¢`yS­5ÃPpÎÍôô´ãXI)ûî»¯µ{÷î)BH~õÕWkÏót)Ñ¡Ç]5W    IDATQe¥ív{8555t]7³m[æynlÛ6%iÆÇÇÍÄÄÚ°aC633Ó;á3Æ!KÍfs^J¹çy_kyWH)×%9<wCíë¡.§e(¢(òïºë®V¦RÊfq!ãxDf¢¡B,ºOÔÁ>Ì*¬ÿ=mÛ®¦  ý~ßH)M³ÙÔRJEQÁð¬³ÎXE¡&ÏóJâ×ñû:Zø¼¤Ä±ÜÒ¨vò¶Ûn~§ÓY±úýI2u=sÜÄw^½é	¹IÍë2f³ùùyK)esÎ-rD÷ú]¶ÜaTWª| $l1ÆÜGyÄãÛ¥ bUNêìzÁ\wä.ìn]ÊàelÛÖNG	!´ÏêÃ|
}%à¬µRJoÿþý$I|×u1ðG/Îßw-v9BØqwÝu×Ôâââ¦©©©1ÇqæRQe´<ôy¼iÆBdJ©á©§Úít:Q·ÛÍ1Rjò<§ë¹äaÑÃÕC$©,^#TÚ}"4<à²®w]mÛ&QË²¥ÔlÜ¸Q8p ët:Ý,Ë¼÷½ï}ðõ¯ý^­utÆgÌ\pÁì¦nrgffìÞl6iÉò Pâ¡LØhE¼ÙlºjÿøÇ?~ÃÞ0N9,¥Êâz]#g¢~:_P$;C$¡RJfYãºnKJ9»gÏm×]wÝÒ)BHÇ±asssTJIaÝ!ÙÆF ¯çvÀ,f~Ö4±n¯ÁNXc®ÛíÐð!Üãc ÚaWCçy5bÛ a=8¯>Âóu÷Çû!¦ÀÚ3j§Óq§RÊîk_ûÚCøÀö¶Ûí½ÃápÎqnçmÛ¢Ó4%%Pö\¸÷Ö4]Ê½¦JR[%	!2IÙï÷U³Ùd^zi{çÎío¾Ù÷}_0ÆX*Í¡2^ê,Ë¤mÛÉ¹çÛe-ÌÏÏ/MOO÷Ó4MËïàÂý¬'ª!ütÆ¯z~V»ç©mÛb/--5vìØÑ!4$qçyLJImÛ¦RJÒëõ*ÍH(¡¡%°ÆÞß81\8¾`q= µî\×Â÷ò~315³W¿úÕ½ñññEBHÏj­Â`&<·cùUÆJ)¥¾ï3Bèv»a»Ý.âÅúÔ§N»õÖ[·¹®;ciEasÎùìì,ãÎÍÍF£Qå W
;xÖ¿>îMI`+×ëqnG	!ÕþCFSj,ç'|rF@ë1 à± E1ÕþEA=Ï¦?Ïó3Æ8!ÄRR¢ÃRJqJi.PJ­µ£'ó*|(hZÕó w`¤ßïcÙ¸q#yÝë^G^÷º×Á`@¾ño;ï¼:tpÎI£ÑX××HJw'WJ­53ApÎ¹Õëõf³X¥ÇÇÇÍp84¥Þ É²LE¡òGy$'HÇq´RÊàsn1ZABV^ÿú×/¿â¯{Õ«^õp«Õz¸ÛíÎy×eÅe~«Ö«q»¡4×cÆ®µv¢(rWVVÄää$/õÙ)ÎP"Â.¿£Ö N*©3ëºþu÷ij­I¯×«â¸1FRJÓ¢(z¯~õ«çß÷¾÷>|øð`ff&'èápøÂìï¯£Î²	Â¤1ÖPJMïÚµkönp'`	)%B@ÃtÉ6ÁÍöºäI¦=Ôêõ7-cÌu]Ñï÷ö­µm	°g·yø8.bBüÛo¿Ý¥<ÏeY[¨¯§ñ±Þ%" üäF °!!DYUØ¶%Ic¦ÏKöÐspcìo¾Ù%cLEep§î²õt!ðuðQf©ÖBÜ4Mÿõ_ÿ5ö»¿û»M!ë85ã8ÏùÎí}E¨±,K2ÆÒ<Ï»­VkáôÓOïÝzë­YQRjp7¡>Ê×?Ëº±éÅ®j gAºFI X×©,êLÇ¦©Ë7mÚ4X^^¿äK¸êª«îö<ï(
Îyô[¿õ[ãÿùÿ9$I³ÙlÚEQ0(±°:îö[Eûý>÷}ß¶m»±cÇÉ×¿þõãF#¢H8Ã y?$×,×c¬<Ï=×uÇ9ç?úÑnÉ²l¦Ùl6¤¶¯®®R×u)6~ÁÜ#HÜ ózxtö|Ïúø9ÄR<¢1¦2Æ6`:^_ðÇ©|õuÂúµu½Ly1t¬óX¢¨H¨1»ï`ëi¤Æ÷}eY:º/}éKþíßþíÛ¶mÛ¥ÚÇ9_±,+BYé² 0ÏU.²×Z«áphcI£Ñ0Y±n·ëÌÎÎ¿óïüÞ÷¾×tÇ<CªbF.--F£¡ÕW&öz½n$«ÓÓÓ,Ë²$Id£ÑØdÄú8J]MA¢(¢|zzÚ~ðÁïû\)EµÖ
@·]&¬µI-µÃ~µf!¯Ã£ÜºÁC-1®âÖ÷ÃæDa(J)I³Ù4y)¥±m[åyoß¾=
Ã°G1E96jê9Ë±¿@ï2cêy¥µöÚíöØêêêûî»ïOúÓÛÆF!DSkí,--ñññqºoß>êº.i4¤×ëoµZU¼ªëãXµÂê,?ÌÞÂ9Þ'Ø±î)Û¶cLK)f³~úé=BHT² +þùï$Z'ÿ¿=#0ÏóxEÖÚ
ÀB¸I8RÛó<Çc'Ib®®Cß÷ïûeYsnÊíÉ<(¦)]YY¡ÝnNLL$IªÑRÆq§Ò¡t]{î¹äì³Ï&§r
#ýìgÉOúÓÊÜÜ1¥Ö$ÈgÔg|¯B¾	Bñ<¯$
ÃÐ«ÙlAFaJÓ)­µÖe´äX$.M ²ÿÏÞ·YVUç¯½÷ys}»§3ÌÃaPDaLTT(51ÆGB4EU,(HDMågB²Xñ*+)µ*RcAHe× ó~÷½÷¼÷ë÷Çu²çp{À23xª¦ènºoß>gïµ×úÖ·¾16ýè£þû¿ÿ{æÍo~s÷mo{×ív­CÑ ´çy¸.Õ³Ñ ZMÒ
OQÙvEÁ <Ô(`ÂÜÇo4ÇÓLnsÏl5eeÌ¦©Cyë( $I
!ÄÊÖ­[ýíßþíî4M÷LOO/!Ò<ÏEE*Ë2]Õü¿º~uP RJ&¥ô,ËêJ)gî¹ç;vt'&&\­5ÃlÙ#Æ|Þ¦¦ºo5e¹  R@@ÈÖ4ÉQJQB½²²ìÜ¹³333pÎmÛ¶i5õyTrÌ³ ü£ `BÂ4M;·Þzk(pà°. ©tÙQ0Öf'½i£l>ÔQã$¦sl¢w'õ} ¥LWKµD~µËÁCqïégeé~ík_s À*ËVZG ÐMÀg£CÚ<ÀdYFÛí¶5¼/|á­·¼å-Â¥2ÏóùÁ§¡k P[fê8Î`ûöíéwÜÁ¥
;gjCÅOs4<H±³ã¿È(2Y´ÇÍdueyË¿ ÖZsÎµRJNMMqÎy²gÏ¥÷¾÷½»?ñO<,x J)ÉÊÊuÅWÌ~ô£ÌÏÏÓÓÓÁüü¼6RMÓs\Àó<Ré²ßýîwÇçææ&§§§;±y H«éOµÆ«:XEmÛv²,kÙ¶=ýüdãw¾óµBn$^$ëºgtûÅÅ,M È<ü°1÷¾)d Us<£yáZD0
ÁÄ,Ëê¿+MÓ§$|ÇÆêÏ}@þß¸¢n²_L×0,HÂ0JiÍì«÷©i´ÐÿmÑ£rø½Mð]¡+pFÒ²¬a§ÓÙÿ÷¼ç.ºè'BG-Ë%ÄRÊÒ¶íÃGJit[=V÷\u¯uå­Ã¡æïûó®ëî¾äK¦_ó×tÿë¿þËëõzVYtbbVVVH«ÕÒY	­uEÑÀ¶ííÛ·Ïú¾¿¬Jó</ÇÆÆpà5mü¬gä³Ñk®Ü£8{ùåë;î¸å"2.0¿ÃÐdn×¬-Ó`ÈÔEö9®gýÐQ×§©ó×d3ãÁÍ¸À¤	"M&<ë dé$ITEbff&·,+ãiÚ¦nç~¡Î.cC/¢îâââã8/øÃ?üÃA0ãºn7I/ckffÆqLZ­$IRk¶ÛíÚº)l~´¦:}"Ø£THs4ÜdÕbÞb4µR&IRlÙ²¥¿nÝºy­õ  *8.èQ¦tHãc¬»(Tä¢(Ü0 ðûý~¤µn·Z-_a:tÈÚµkÃ°lµZi·Û¶Z-UIAhÎ¹þ9eïû´(
úøãÓÊ ø¾_ïKl8SëÝZ;vìo¾kö¼©U]MM@§Ó9B2`!âñ<#¿!Í¼Åó<Â9Æ¦éHexe)¥´Qoi\ç"RÊsÞ~ôÑG[7Ýt·sçNvÃ7èééiÁ9ÏµÖ%ÉNýN¹¬²f!i­í<Ï½»ï¾Û¢eI+	©:ODÀc5Öf#Ód<RMy£¦¶S3­Ù´Â÷°¼¼­VKw»]=eY¥´Ák®¹fç¦MNdwçÒÌó<Q¥~®ÙQ¿º],IIBH  sss'ÝrË-S Ðb9eYR×u	fR?Ef«Ù(§4÷bW7bõ°²,ÙÙYOJéB¥`óØÿ &²Z@.¥´Çñ;vt Àõ<EAff0h&ÎMáfGÛüÜÑ¨3ÐRJ©µ.:Î`lll>¢ Õ¸nÇChva Òö!X1×²¬`×®]®ëºVQ¤É3ÇÀ]_$ Ø\æ!mÛ6IÓw×]wµÊ² ãØi·Ûs~Lÿ6»²#D®µÖZú¾Ï Ø¶m·,K!KÅ&µØd:"&¼X!°×tÃgI·ãXIGv|ß¯Gqª×EQèN§#¥|ee%QJ-¿öµ¯ÝÿÁ~ð	ÆØ.JéþJÐö<o¸wïÞáË_þòôÖ[o-äë0uÕ%¨yï1Rt:ç¹¥ò÷ïß?¶wïÞ©ñññ1Û¶}­õÁðñÜªö¡2Î¹ë8NWJ9sã7®ë÷ûãB MS»¢¡ÔåÊ²¬vßEö'RÎ`2Ss!ø¯±Û 9Þk&¢øðaw;RJXXX8bÐLÆÅµÆ¢T)¥Ë²Ô«WÍÌ45ÎÌ{ê®/2&PW&Ðg:?Iµ)ªo¬¥ãä±ë¯¿~×ïÿþï?À9DJ¹_kÝ§e©<ÏµëºfñóI#ÁYAQÐjµDÇ¹çyË °¯ÕjußûÞ÷F·ÝvG)µ[­Ý·okYõ<O)¥òV«µâ8Îþ«®ºê±mÛ¶=çù ÄR7sc©!1*1ºÔÚ¶m-¥TZk>55UNNNò}ûö)­µÃ°ÖEÐA>@£Ôõ29X´£q×1@ÓtÈ,,M0»T.Ù&sÞì¬ã"@§ÓÑrãÆåÔÔTÆËó<çç)J©ÆÂÖ4¥8Áå
!ÄqÌ¢(rµÖí4M×rùå¿èÐ¡C  çº®¿´´d·Z-²¼¼\Ç}ß÷ëbyyùüYYC_múÎîñÅl6ô4¥T£tRçåæÍß÷ûY% P3<·s§éÜ þP"VN l8<ñã@äºn{8ö,Ëê¶ÛíîÞ½{»·ß~»½²²­\pÁKQõ èÀ²2+BBçy?Ä ç¹í8{ðàA;"Z%Aó+ôE-¹~¿{öì©¼È0F¦¯9*nN"9
Þ+3ßÁ[S#ad8Öú¦æ¤¾®e«4²îMù)SRª=ÏÓy[a:eYZãÐx@}ñ_,ßþö·ÇQõ8ü´N?Ë²É ÓZ;ÐqÎüü|P¥!ÄqÂ9'EQÔ±Û q_MäfmgNâá³i&[Óú1vàSE:MSMQ½^¯,"³^zé£o~óÈóüQß÷õûýa§Ó)¤Ò¶m-ÐÏ7Ó¹_]GÏ¸µmÛ0ÏóÞÃ?¼æ;ßùN'"sn	!N5)3×hx&s÷GaãuQÐþÌZ«' ¨i­i5Â_;]2Òùe]´ÒF'ÊVJ;vìhÛ¶PJíÃ}`b
7ãµm»îÁJ P3Z°c"ëÕÍÔsM)Õe)8lÇ©«
¥YÍ©ìX_ØÆ½©Qm Ó4³m;RJ9UÐ'è4j&bM¹g¨km^¸à£h$Ïs¢µ¦fÛ¶$IçöÛo_ÃëBÜ²,Y£ËyÌ=&¨1
ðð<Ok­U¦róæÍªÐ¨û4bS§«0ðà÷bëæÁªéB5þ3ß÷Áó¼Z¤¹J¸t«ÕÒçIBH©ùÝúÔ§Ù°aÃCJ©ÝÁ`Qkû¾ÄqÜ?é¤¶oß¾eYZÃ°Ê²¬Ùaæ)2àlÛ¦ã8+++Ñ·¿ýí t  ØUûûÞ¾Ç#¨dì1¢µf¶m{EQtggg×Þ~ûíÃá°åº®Ûn·YÄt;_Í=ïØ8êû>v²¡ßïÀaÆY§Ó©Dó C`ÇWQÿ«(|2»¾øµ$IêßdÓ}ºÙ-;QAÀù§cÒó<U!BuE´ÛíÚEæ(êñÞ0`ÎÃúcÞd"ñ `káï  ]Bd]vÙâõ×_ÿ$!ä², À
!$§
¥²m»ÞÏ¤çßÓ%=húebqBHeÙl«ÕzìU¯zÕ÷w÷èÂÂÂÁ4MûëÖ­Ë (ò<O'''Ë²Ü÷Ú×¾öë¯¿þ4MB,PJ3¥ ¹ËjÍÉ£%¢«¿ÐTK)µBçy®lÛæJ©ìäONNNfy0º+#+5\Wæ¸-~8l¦iz¸»ÝÛ¶ëxÉ°£qYØã:Çf61^B`0ÀòòrV{Fçy®üôÓOO6lØÐÄqR)%«bQ3Æ´É$:Ñ¯¢(HE2 LA°åüäé·ß~û)SAD{öìq<Ï£1RCáâúøL	Aj6¦æ£é"à^&kË<;ðµ²,«s¤ªÉ¯!â¬³Î*¢ÈlÛæÕØ¦n6E~gÐÇûZåHÈÖ$1ÊcIØ¶m»ó@ÑqgB± 6QJ·fYvÎp8|éW¿úÕó~÷w÷¬7¼á¾ô¥/u[­zÅ+^±ÜívZu°,ËYÎùR*c	J©.Ëòg½YXÿYR¿,ËvY¾ëºRj­I·Û%9I-KµqPÊÆÔ±Å¶1ï7ó§èb®$¨pF<!UC¶þWÝ1Fàðè BBB!J&  eQBBX àÀó¼î`0X{ÇwlÓ4í4äÙ:Qÿ°,KdY à!z_ÿú×§8ÐÕZ{ÁáT©ï<ª¦Y­^1õüÄ\ÓøLÍú_ÇlUÏGK)ajjJQJù¡C²áp¸Ôétö|îs{ÄqGûË²ìGQk­%!DWã¿«æÏÔAõéjÛcØjª>ã¶vúibp3¶¢G¨ki­'î¼óÎ^¿ßÇÇÇí¢((Äãºæ×{s}¯g¹/ gÇýÍ	$p{¥(úüðè£­5©¤ùÌßóË¼¬§;Röââ¢+°«HðÀn+&82bê¡Æå#]é6¤ª)åøsiÖÊÌ@NMMq¥T ÜtdõQµy!L)å @Ôï÷ÇcRÊ©?1Ç*VûÛéß¼¾ß(×fSG,­LJüûî»¯õªW½ÊÃÐÊ²bÒÅê±ªËÓÜx¦Cahk¥^YY©]-ËÒfaëµðùSKÉ4{ÀÎ#&R¦H¯¹¦MM*£ÈóºÝ®.ËR/..Êbvvv(X8ï¼óüò¿üøÔÔÔRÊG¢íõzC ý~_A0ùK.¹dN1ð}¿§µöM;¥XLâ{Z\\¬»1¾ïû·Þzk÷ê«¯§¶(¥h$ðùHUèN$aøÿðÝ0[BÂªÿ_»wãø¹ÏL®Á$I(ÈÌï3×9jEQ7T¤àû>APÇä²,ë.9*b15HG¹½¨¹¥TB¸mÛã8R7ØÄd;#LyL·eS§Ñ<ôqï½ÙlÁÉ¶¯Ly íÒiê0eYåg ÀRYKJ©X)U0ÆÄ¨óñx|)h­KBÈ  !Ü+®¸Âì±Çüo¼BÖAà!ÙuëÖíüøÇ?þc xs¾R:`fbm ölJh<÷Ä²,)¥,(¥ÉÉÉ©©©¡Rª JË²ô`0¨8x6aì1B3ÈÃ5iÆs4?GÝfÃ¨ãvv¹0<Znf: $Iã@E  :ÏsÉ+^ð&''çR}0ÆCglÇ¤RJGJÙu;wî<ånØÒjµÖ&IÒB¸aÒv»MÒ4%©CýÜLc&ð=ÊÕ³_ZIXÐ`oºýù>_³Ùï8¤iªÇÆÆdÇåúõë3JiÏ]õËÊk¶irbækÈô¯ä]Hu¯hYT)Å,Ë²»Ý®$ÇkÙ¶ÝR;3Öï÷Çÿýßÿ}ú¾ûîëÝ}÷Ý­x´Z­âÒK/]ù£?ú£¹_ûµ_Ûçù^BÈ «}À	! Ô(cÄrm1 p(¥Ñ>8677Ù¶í:C$ãÕyª9ÒÔ5éÕ42ï¯ÉnTkÏd¢6YÒXÌ7¥7(¥Ä\f®c>W)¥v](¥hÖp8ô×¯_ß5;wî¼äKÚ,53ð\«¦)AºÑ
(¥Ý;î¸c¼(¨B(c¥âÍþf£Ùté6k¦Û{³Ic2ÑÉxáÇRÃP8p@öz½<²,~å+_y¢(' à Öº¯µÎRªð9×OSãþê:qÀfBx±îO>9õü  Aec É²{È$W¤µ¦fsÏdg£Ç{óêëzyyYÏÏÏKÆXM 25Å«ëé @bY=tècÑJëêQQh4²ù! ÐívkTÌJ¼¸¾¹çã8ÇñlB¥Äq¬'''5¥ToÝºU&I" Àùyíã)¬
:"¥$ãB#8y{RGJIQóÂDÍCËd=ÓEe«±yÇJ#AØqBh×uuÕí§+!M"c¥9^{,=Q#hMç+\ë®ëê4M°Ç&cH×Èº2ß¨Ñ) ÇÃð úý¾.BBd«Õ*RCÇqfÏ8ãÝßøÆ7LÓô1BÈcRÊ®ëöó</lÛVUaBæ7mÚ´ÿÔSO]xòÉ''¢c:()¥ãáøçy$I¨DM-ß÷ý»ï¾{l~~~zjjjLkh­­57´UÇ½kPÉeYLaÅqì8pÀb1s¼;¦X7ðfÒÛ4Á	7,¼0&41SgÂÔz,ÇÁxr]VVVjí-d	Iü3uH=& JÁÇI)¥BHªµæB<wê°áÙe)¦»·Ù0FSÃÑÙñ9NJ©dÄl¬çõ    IDAT~¿³³³º(
Í9Wív[czTQr¼$àû¬4 »æZë(ö+¥ü÷¼ç=~âÏÿüÏãÅÅÅ1mÚ´iß÷¿ÿýR;÷MLL¬e+¥$ç\;£=^Á#B¬Öh211Ñß²eKBáBU¥®ÄïAkM03µ¡LFs,Óü¼ô¾Fó5eS§Ö÷3%1£·AX½¶BhË²4cLYÅ'&&×uªñ»LÓyçJ)ÛeYNÿÞïýÞz!ÄÔôôt{nnÎët:ÖÜÜ-ËL-<OLYÀ4£íMÇqj32\L3§jâ÷qÎµmÛÊ²,nYVrÊ)§ôck­U;èfölïÛ§{}3G4þÎ#=lÛ&y"¥Z¶mÛp}XåXÆØÆØôîÝ»g>ö±õîºë®1rÎÉòòryé¥®¼ï}ï»è¢öi­$I²ß²¬ BWü;¢À&Øý~ßKÄ¦R)%ÁÝÄMé
3gÅÿßl ¸Yí¾7×P³ÀA³Ai®as´ÏXsD}Ô4²*ÝQEUJ1)¥+¥ÃaXË³À¤{6òKÜSe!%8±2þío{sàûhf>ù'ÿ&Øiîõ&Cª©ÖlcÓ3Ë2p]·&ï0Æ´eY*Ë2199eY¶Råþn¸áÑ³Ï>ûBÈ²,|ßO)¥"cUI¤h0sª&t¢4 fU?ï½1å*öâ$.!$zðÁÇ¾ÿýïGQ9suîïÕtÑÍ3°yF5GÞÍÚ¿°H¢0Î3PJ¡«¢¨Ü´iSA)åeàz¬0 ëLJIvïÞMÐ²ØÔUiL"òé8N ¶Z-5+
ieYÂòòrmrçy5«Ik­VÃ¡jzzZµZ-U2]4Guõ a&ÚÀ¬-ËRpûÝU¢ÚD¬:£æ(½»f²ÿEðßWôÕ»(
ÙjµRªäccc¥R
Ý¡( à± m`!]4<@ÍÞì!Ã×´éôj^ãzÇ¯f0¦9©S`î-T%ÄqÝnÊ²Tqó7&û÷ï?4>>¾ëÿùwZõÀôôôI´m{YkÛ¶-ò<0EQ9!¤ óozÓþê¯þ*RrÇqÜÁ÷¡v¤«{CÊ²dã¸óö·¿ýí·¾õ­= à°®MA'âe8RJmYÜ~ûíÚu]mYªt×tÇº(
¨Æø!IhµZõ¸&b ¡¬ék\o£ºÞfâuAÅæçy0¡ÓéÔL\¨Q¿_³9~s¢³ÿ @RJ DQ4oYÖÀ÷ý;Ñk³:Í$^ðkfÌ²,H¤»4Q6ÓGÃ!q]XeÝ{ï½¾ëº øeYÚZkj.Gh±OÏ®i 1&  -ËrAA7oÞ,¯¾úê¥.¸`ý½÷ÞÛîõzÅÅ_| ¢RÊ}ív{y~~>ÍëàQch¿èóäYX£Ú²,)à¶mg6m*[­RjÌÇc¦)äyA!qi,î ¯MyLÆrÓ4äv»}ÜKl2Ç¸/ð=á9ëy¤iªó<W§r<í´ÓÊ¢(
Û¶¹ò) Ï§úÈu]
 ïû­+®¸bÍc=6>33Ó>pà×ëõ,Î9Á	lâb>úÜ1¦ÄCÓà¥	æf-faôt¨ÇÆÓRJåyàg¶m/oÙ²eN)Õ×Zç  ü3Yçû¨Æ0~ã¶R¢µ&J)Ê9§®ë2J©U¥­ò´Ö-Ji7IñV«ÕBL<üðÃ3·ÜrËäw¿ûÝî>èB¤Ö:ß²eËÒ?øÁ¹Ë.»lçy)¥³EQ,YÕ·,+©L(«á7eçß¼ys!ODåy®Í)dÁ£-2Ä¦iÝ _íýÍT¬YÓ4ò&È7eØ<GÌ³¸	
âZ6§t¢ UþF\×%BêyaðÌ¿g¯@¯â!DJ)eYc¬³oß¾©={öBüj,âX³i2ffSÇÔaÄ9ÙÔ1ólúàùÀ9¯ue[­¬Y³pàÀ]åÂ²(sÞB¸ì²Ëv^ýõEñXQs¶mÇ®µVh¨ØdF%Mû_]ÏKG
!ÄR?úÑÂÙÙYgÍ5VÅú#f-5ªqÔÌ+W3¼2ZÍ÷ Æ?Ä¡µqç~rÙeõá°)&Ãäljéçj=[O÷RJ%øGÄÙ0iæX)è"è&î¦8&éû>jÏè*Ôç¹\·n8ã3xQÒu]-¥Dñàã2 T®B(J)×ZgQÅ @ÉSeYj\`àðQ	Ø3¹0¹«£vGCeRY¥óþÖ­[^ùÊW.A ¤ëº#Ý©Jy®gÔVÃB»ÜÌ¥©a&(f× A3óë¨1Ù[¦Ù}ÐZC§ÓÑKKKºÓéHÏóò½{÷.þæoþæ®O}êS?R>âºî.)åmÛ}Ë²rB/BWÝ:R±F×u^ÿú×/ÜtÓMÆØã8²(
g¸àÇûe¹ÿ©ÒnµZáç>÷¹ÞoýÖo­q§MYÃ#%Â\«íÙãi/)¥f)ÆX)ÈÓ<IB	!Ä¶mI1Ê#ø÷ã¡ëjÎ9 Õ41	¦>Îp8¬&LÖMãdøâÚÆ8®Ô¦&Lk('( ¨ K)SÏóÔu].¥TeÕR ¾ï,ËêµÉÚÃasLÌÇÐ`S Áÿ¦>$¾ØÃ(¥ëºÞ=÷ÜÓ½ã;fÎ;ï¼5J©CAÄåaÚ×qËj2ß6M(¥JkÍ¥mÛ³yív{ñÂ/Üsúé§eñn·»¼°°pÐ¶íÅ Ò5kÖ Pq×c©MÍÜãíªö§*BBÄÌÌìt:jiiIw»]çùS\ ³,)%xWÖÈVG0<¬_Q¦©§c©#ÝñJî¤nà½Ç8®¢UÃ:ôû}]¥èõzÜu]^¥0X¡ÏË«Ò&ËËËìk®±ßøÆ7:°&&&X¦RJp
 ¾ïç¼nòÍÐ0Ï<ó6ëæDÄÓé¸¦|ßWeYr!DzÎ9ç,ONN.dY6d_M6Ø/;W¬~71øÿUg= KkmK)]Ji@	c×u'RÓëî½÷Þño}ë[ý×meYæz§8çé_üâÅ÷¼ç=³Û·oßEÑ ]^^^êv»03­uÁ9USA?ý<û$ EQÄ'tÒ²ã8qçç\UyÎç)µx³%'Òd¦6'»LÀ¯iØ­M ÷¾?ÅLÛÀ±æÃò<¯¥7ÇQív[0Æ~êsõ§]³U#h­IebÂ(¥NYÑwÞÙB®ë:Bfàty¶@Þ¬ïL`Ôüûµ£ùlégJ@T5®â²TJã$ýÈG>²ëª«®z(Ë²Ç´ÖZ­ÖP)Å³,SRJMê,ËH5¢(?­¼×j ó±"¹¿bÂÓ=3uå!Äã8|üñÇ}8,Y@)¥õ¤*ÖX¦ÉÞ¨FNóëÍØ3ªî1Êðû«VÍÓ¾ï+Ë²Ä`0ÈÎ9çåSO=u6ÏóBHÎÝ7øe?{ë,Ð<ÏByl¢²v0Ý±ëh&Ý¦f&yøµê`Ñçi Ð³³³Ê÷}¹aÃrÿþýéÆJiÇ±¨¾ç)ùxJêñ0ei­µTJ¶m÷×¬Y3Ûn·2Û¶[s»)%i2DF-¤Qys¡bâçÈÖt]²,«Ú.¼ðÂâàÁé®]»aö¯¼òÊCïz×»]»ví®,ËæÛívÊ9þ1ÜV317=XÌcñQ¦¶>W4m0Ý´Ì&Û^¦>|f·à8OEÚu]$Iþ¿ñKøÄ'ìt:;R»²,;ä8Î@Je)|ßWR1&R)ç|é3Î8¸yóæ¥|píº.©3ß$)¥PrÎ-Ïó{î¹g|Ï=3'|r @Bá[ãD9åtï´RJZUE1¼ñÆç®¾úêÙ'xÂÄó¼("¿,K+ÏóÚH	9,LÁ|\æZ0AM Þdo(¥ ÓéÔ±GÅ¡,K¢¨½f²Iä`08")nÆç	Hy5fUwîp¬s^³Õ1ñÆ{±Áù7¦"£Æ"MA~ñ9[EÊ²dR Ú_úÒ¦_úÒNBöj­	!yUÌéãd7< ÇWAPæy®¤<ãa«Õq²,±|bb"®Æ~yçÊó<¢H÷ûý#1æ9y,W#s °ñ ×®]+z½Ü»w¯ Ë² ãºiZÃáÅûÌT¼ÐlÆo1Ï±æ=kææ®7fÎ¹!þº¹ÃáP{§RÒq.(  ¤JxþÿâVÐyË±±±òâ/Î¶oß^þà?q^íêlêvá3Å\ÞPy´iZ6
Á5L8JiÍ,ðRC®BK)¢ÔZßñw,h­cæ÷ªý/+k [Qzh­Ò 1æ2ÆJiXeÛ¶ímÛcRÊ5{öìYûõ¯}êÖ[oß³gßjµ¨ã8Ryæïÿû{î¹{c*wÔeß÷cccç¼È²LX%µÖÚqÚÅüxO°ù%¤!dEQÆ9®ëª,Ë4°BuàYPyçy#ï£	 ?Ó©­Qì¾Õ¾w°ØQ6ÌMö*î×u!cð}_BH¥TiÛv&(,Ë£Öç/²Ál0¦ëºRj	!¼Ûo¿=`¹hY<Å}Û¬1/~OÑÝtfoÖàkóÌÖR$IjÛöÂ¿üË¿ì¹ðÂwµZ­½e-RJ³<ÏUÕ§hR}BsÚÐhg4Õp¼j¿¾÷'Ëü4M[ËËË>cÌ.¢éOGÆfc½ÇO:£&7ÖeX·¡dIçÜ÷ýdëÖ­ËJ©EÛ¶c¥TIQmôQ=s °b<i<¬õ7ÙIHàÀ®	º®  "º¡^H`Û6Äq\¾ï è0õøø¸Ú»w¯J©lnn®?==½°aÃ9Û¶¶meYJFyÜ	AãaÛ¶ç¼¤Æç-^vÙeKþô§¥TÉsª±.bd£æÓQ¥W~n¾VçÐjµêg_±øþé&cccswÝu×¡-[¶ÌnÛ¶mïºuëé÷û¹®»XeÇ±¢¨NÐWCÞpÔ{Âä·ÉD1G3!6µÌîºù·nhM¡ð5Ç`cjîôz=XZZv»­WVVeYü/ÿò/ÓN§³Çñ¢çyËQ%q®ëJß÷5>ÕsÕBÉ+ã8´Ûí×½îuK?þñSÎ9§ºRëÕdõâû«pÂcEQ8 Ð¾ùæ'®»îºq ªñâëÔ<-åùx(0V]$Iª»ðÂýìg?ë]{íµåÃ?)ÎùX$Â
ÃVÓõ=E6Y<ãUE]°W1òÍd,@ÔRÁØ$	LMM Àììlm^Á9ß÷kþ&8Ýtn>Ñr1Æ4 ()¥¬@síyNÓT®½¸Ì}k,fÛl÷ï©É2Í3Ã(Diç6¥´õÍo~sòøÀIk×®ÝUå¥4%ctNoIfó|BÀ½`% èV«¥8çe¿ßO£(¢síº®X^^ccc TY¦©æC§Ó9ýv¼&àUU»®+	!åØØX¾qãF~ÿý÷Ë<Ïµìâ÷#G·LÍ=SÖdv55üTMvpsËtæÅÅóÇll@9ÊiPJõÊÊÜ²eKù®w½+Ù¸qc?ã4".Àüâ2x6à
-çæærÎ9ï÷ûjjj
ÇÃ5ø¾­V«ÎËMY3fóg5 ®iz4j_Êÿ*f¨BHÇqòþë_ÿúÙ²,lÛNÅá §ì|.Ãñ7 µ,B,J©]s]­u¤ê!zÒqÎù¹¹¹é;vôvìØÑ¹ï¾ûº?úÑË²ì0Ë¹¹¹á¶mÛ®ºêªCç{îÞv»}@q1¶¤Ø¶@!I¨(eYººßÏÖø éû>R/~ñù½÷Þ[çh$dJâÎ²8bnÖ £?²£ÖVÓÕè7M$Í{`6ÇMæ2Êð½ã4KsÃlL 9Ãó<¥â¾ïgQ!jyÖb)	T°¢(\¥Tpÿý÷{ `[E+ã§ð@{tj¾ÏËtp6ëí´Öº,KÍSZkþ²½,¹á/¾øâCU]XpÎí<ÏÇqÖù¾Ï1Ô&èJT7ëÇfýÕ/ºY_7÷Ç¯F/ tÄóÂXLRTÁ(¥LJIò<'¦&-$£ícq§)ubÆ¦)Þ¸·Ü]cS6Ë2Çq±mÛ¶áÙg½ Z²,+¥
­µ:ÈiÖQ?Tì0k!6;}fl
Îc`ÀÂû Ì²(¥099	{öìÇqÐyQ,,,ð(8ç¼°m»¿¸¸¸ÿ/þâ/~"Ë²JiJ)0Ýp¼$ñîØ¶÷DeYÆ¥	 ,½÷½ïûêW¿º²wïÞmÛ^å ¥«ÅHFuh÷¢Ù3ºæ"lÞ3Çq`8ïûºê*+ (¿óïÿú¯ÿúÀË^ö²G9ç»c{{à!d$	ïõz
»ùÇzaµ."&7,#£Ùp8<BôY@ø9æX9¢ÙÔp4¥`5v]»Ý.ôûýÚPdÝºuäñÇ§·Ür;õÔSi%Ê«¤ºú9¬ÌJ£T£JkÍ[­VÇñÒk_ûÚo¼qÐn·'²,ssN	cÈbÂDÉó<eÝëõo¾yük®Y Jé"¥4ÇjêãqìÎ¼ªSK)!D2ÆÒ0²,ÛyÆgßüæ7o¾ùæáþç=ôÙ»w/+ËRJI¥ÛHLS\¨¢HZà:Ëó¼6ó0-êÍñ¬JXúý>!àÕ¯~5Á?þã?Öku +=Bíû¾&hÆ©QQ¦þè	^`Ce¦QÈØÆ¤×dùaWÜo*&bÆFÜÓ8ßÅç¼Í³¶* ¬²,½;wv~øá5ÓÓÓ=BH@ArÙÁÇ°Y4ë}&²Ûí
!	ÃPe©ÇÆÆT$Z)­VK£öÑÌóò^ß;ÍeYªÃ¡g±ÁÒN§Ã)¥*MSíyAfê2Æ`8Q`ãVÀù¾±®9¼7øµÕºåÈXm290N!ÈÍd5c2­ÒeYêO>Y¼óïÌ^ó×¬LLLÌGQÔOÓ´Àgÿ|­lÛV¶mËápXLNN¦§rJ~÷Ýw~¿¯ò<( ÕjëºPzÍ7p£æ$iö`îõA@MÍBË\PÚ¶­	!
 ø\t»Ý¾Ö:Rò*/y®Ä9(>P-¥ôÒcù¶m·´Ök²,Êó|í£>ºæ®»îûîw¿Û}è¡¼V«Å*B8çs§vÚÂöíÛ}öÙ{c(¥5ð§Ê,Ë*c¢(

@ dY¦ºTÏNøÕs®N?ýtçyÈ ;sÜçfÆbûMíhà¾ö( Ð`À1Öj6í1Çl4ÖH³!b2d1áÏC«k Bô<¯äçeZk	Ïâ0mÕ0UJÙIRÊÎB¥cYc!q§n*£N£)Ù`¦ãÎÍfÒla¾_ÃüshB¾ðÂå\ ûý¾íºî¥TBÚQõcË 0,Ë2Ëó<Ã° 8mÛR*c²KÌÆ¥Éú[xÕfjæZÇCÞz¢ü"îAÐ°²,KaXLLLpBtG£¼¢ÎÇMSß|ªyVûÄch|pXëÛq¦©B(Û¶ëºeÇÉÙg½púé§°,k©(Ô¶mÕ$6²+Mõ£1 5!DA ¶nÝ*o»í6Ùjµ4ª&Û	8:fvÑUr8B°uëV8ë¬³à¶Ûn@§ÓÎ9ìÛ·\×ÕI Bb)e2333óW_}õc¿ó;¿óÖú	¥Ô¢ïûyÅ PHðªL­cñÂ.8ö
!çyBJ*¥Î:ë¬}¯|å+7Þ|óÍãiRÛ¶meiº4Ø¨1AfWÃ^¯®ëëºàû><ùäõsÃYzË²ÖþÍßü=÷ÜséW^Y À²bV±àºîs^t»]ç¹n>Õ´%«I	Æ.¡	¨ ðÓÔéÂd·2Ö¨LRðgñ4Í[Ì×ÀÀbv&Mà?Æñì*y!óóóÔu]ç£ýh899Ù»â+ZyûQeç¢(¤mÛìÎJk-!©ã8K/~ñvÚiKO<ñÄ´ëºaY¶eYÄ¶m( 9|*Ù AØý~?øò¿¼þ·û·wÀ¢R*c	)¥ªUÇýè8ôû}hµZ@)UJ)®V±k­³7¼áò-oyýÀ´_ó×DJ)sNcÄñ@fÄÈ(CYCX¶ÞÇØPã¸îvAP¯=SóAè+¯¼ÇÏþó°´´eçyõºõ}_///KÏó¤:1kË²4¾¾)q¢_ø7A gggëqI×uÐôDê?jRæó4úúy`¡HEõ¹Z%´Ûí#4Ùâ8^¯õA`§i~ë[ßê]tÑEÒ¥ÔBd®ël æ±îäg¸Y¸æH8Tí#ì¾b~¢+=9mõuü6¯yF"¿56ÊåòçkÛ¶¥Öº :ÎBE¥T!¨2REÍÒ1h¼@N§Ó©Ïü0¡(#Áðc4Í0ÿs]·NÂQ0ÏQ4ÀAri81ç9Äq¬R²27Iúgyfsù¾/*àO­u¢\eYj ­Và"I199©lÛÖRJÃ°nb3ãÉ7sv3¿Ç$îÜ;ã@euó	õ"Í×Ã°;Fy}óúç\×Õq«W¿úÕB)UXÅÃ¡ÄÑËQÍ&«ìh±«åh¢9Z¦c8 ÆÉó0Æ(6E¤®ëZBWJRJÇÃ0 t  =Ç~øÃÎÜyç;vìèeíß¿ßÍó¾à/(çççÎùÊûÞ÷¾þßøÆ^¯·Rz1vRºD!2BHA)eY*J)ÕùÙ`úyc	À÷cªëºÊ¶mk»9u`6°ÞÀmêYæy£4ÌÍ¸Þ1oÌ?ðs¼RJø*ç©uäÇ©så4MI³Ñ±s.gI`üRÝnWeYÚ¶,ÏVKÛ¶I$eY^ûî»o2ãcÌÍ²Uf%õ½15 M2Ã(óÈ&ÓÏd¬IS«åHðæ®Bây!hÇö?ýÓ?µî¼óÎµSSSîg¹ö´ÓNK¶nÝA°¼aÃÙ<ÏÇéa¸¢2Æ(¸RRJK!DÁãR%!TUKÈ,ËTZ¡Ê²Ô­VÒ4ÕØoÆS[ýX §¬&Ëµ+vÔç'"`çEuF (O  1Ê9'cccúÝï~·Þ±c<öØcÚÓQ¡Ã¼Â4-2I7MÂÔü3ùfókàÅÅEMÑãããjÝºuâàÁùÊÊJ
 ý³Î:k¡ÛíÎ!±Bk-L÷\ç*Ö(jlu3ôá{£øùçÿýßÿ}ç¹d)J©_Ù    IDATRSó,HlÛv»ý~&&&àsÎ©O?ýtxóßðÈ#À¾}û`yyÂ0¥ö<OÅq,ÇI³,[hµZN>ùä³Ï>{éï|çì¹çû¸Rê±Á`°¿Ûí¢à#í¨ýã	í®©ÊRËEQì»îºëöÜsÏ=kvîÜÙBðÀu]R¹¹£ýÍ£DóP~éK_
6mééi8ÿüóáÜsÏ¹¹9øÚ×¾ûÜç`Ï=µÐýáóÚ ~øÃîtÒI/ùË»ý~ßÆ ì8ãXcÑ;*1;^X(¦WUøk,ºM]?,¢P_Éì:  æ-faÉJÄÇb_ÓLLc,Ë Ýn­5ÃÐá§?ýéîÛÞö¶®çyÝÃÌd)á°³ÊªÊ²ÔãÈ4MKß÷A,¼õ­o]úð?¸®Ûe¹RÎ±XX c	 %i²ññqoee¥ûÏ|fí[ÞòuãÊó<æAÈùùy=>>Ç;{B®âÒZç¥ Ð_\\ÆÇÇãùùùbÇJ)¥çççazzú]IL´P(xèÒRÂÒd	!`qqÇ©w\+IÀYg[·n,Ë ×ëÕzP8Nç¹Êó\
!ÊÍ7ç1®µVð¬Íç]g2Ïs°m v»]ÐÀ¾iöaô¦H¹)8Gµ[8¥:N]cÇ^)KKKµØz»Ý<ÏÁq°môû}pNLLXÁ=÷ÜÓ[YYìQJg	!	 4-¡jl(&.¦ ²QÐèçà}ü¬çþÏÈWYå8 ¤a»ÝÎ¢a*d|W `­EYô!«½(ÕÅ>;ÈüÀÐt)7Ù®4@Ü38j\­MßÐMÕó<è÷û¢]×Õ/{ÙËÄæÍ3 X	Ãpi0$­VeyD#iÝV *k­ómÛ¶e­V«¤JÀù >{ÔwÆ«Yø{	ÓÌÏ*}ØB][ß÷k#ån>t5 ×MµüÐ(P¾	7ÏÇ§«0Û¶MnµZ¤(
ð<&IBó<§ãããLa1Æ¬ªfòmÏóÖh­7<þøãvíÚ5ñ?ÿó?­z(úÉO~ÒIÄ±Â0ÔÃá°ô</¹üòË^÷º×Z¿~ý ælÛ^ BÈPk)¥
8ìz¬P'êÙt?ÆÜ²yÀsG!ôÊÊît:ª,KÇ±¶m¢(BÑû#òü/®	X]×­óTF@Ú$& hx¦E¨£ç4fBE¡-ËÒRÍÓeYªAM±an²âÊÕÀÑs]C%¥RÊBJù3ü´mÛ$ÏsjYRºÖÿþïÿv d9N&pGÌMÐÖüÿø÷7gã`íãØì¢ahgYÝwß},ÏóöüÇ1nYV155sÎ9+¯ýëW6mÚ´ò¢½h¾×ë-sÎÎyÁ+lÛN Ï9O	!Ü²,%¥Ô±D9#Ë²,<Ï+¥\!8ç<Ç±ªXVuaÆÕ¤³àyc£Ò÷}ã¸®KZ­cÌ'´mÛnû¾ïA`EA±±E5eYBÇG4"°Æ7ÇæènÒgë ®ê4¦)¿îºëÒáp8ü³?û³Á«^õªCÛ·o? ZëØ¶m.PM`ú9ËL1f,ª§  t]79ûì³WÂ0Eßjµ¬J ^W.du·X)Á ÆÇÇáºë®k®¹Ã!äyBÎ9DQ	â8Ö1ç¹ÒZeY.¿â¯xâË_þòO|ßßçùBeÍ¥i:ßív ã¿ºa )¥% ôàÀ©§úØ>ô¡ñ?ù?Û½{wb¨x´"Ä]åÈ¥µ7½éMpÞyçÁÊÊ
AE°yófxÉK^ë×¯O~òpÿý÷ãë)¥E)õwïÞ=~íµ×®ÿÄ'>±ø¼äPYKRÊ¤,KRªj}=ÅíæéÇÊÅ9×æv]WOOOkJ©¶m¿ãÀ`0ÐH¿G`H0¡Á c
ö»mºjú&³R
7nýû÷ïû$Ïs«Ýn»üÇÜ¡N,//¯¬¬¬°õë×ó(Ê²,Eeõ8Q*­5WJ¥¶m/½ýío_øÈG>2\^^.\×õÃ0´¢(ªedpxÌR1J¨eY ´ï½÷Þé~xÓÉ'|0ãþôôtªâab#á¸> LFWÕ¯YÒi²^¯ç¯¬¬t¾ð/}à7nÜhOMMÑ,ËÈp8×uk&Ù½Åç2ª{i&b5ØlPLtÐè`Í50??sxÇ;Þããã0à¯|%|ö³5wç¹´,+·,køë¿þë+±Ek+£­µÖÏý?Xw]WÛ¶­+3¤ÁÀ9×EQÆ´Z-ÐZÃp8¬õovÈB#ÔN¦1î	dgY'tpÎaee¥cÖ­[aB¦`Y,I÷î»ïnÏÏÏOÌÌÌôRAU´RJ©4»ùÇûøý* ¥½x¬æ£ôe	CLB²@e©\×ÕeY¡cUcdháC)V«UÇ6L¢Q_ÁÇf!;î\Çøõv»måºãÆ¼T`QJÁää¤>ÿüóÅüÁäë×¯_¦?8ãv»-ª1³#t£ÀôÒUÞ­mÛe wÞy+e%ý~;£* [+6MÙ£éA#xc®ÓH MÓ:71%¨5ÞiLøsÒívé;,)¥ãº®U%Å±ÛÕôàß(&Ûj3!äyA­H*m$	ÀÃÐå»RJ?cwbbÂ_\\lw»ÝI!ÄÚ»ï¾{óÇ>ö±õûöíëpÎÝ(ØØØt»].¥Ú¶½òþ÷¿ùK.?ë¬³öey°(9!D?TFM¥ÖõäPó.×OÇúÀ¥Õî«&èáp¨Ã07nRJ¡NGe©ûý>AðÞÏÌºÃ,°Ó4­?ÇFÉl2Ñ\×5õ¥ñì¬õè+&ªF ÐuÝz¤¼(
å8Ìó\VìE sîeéBXSçßÞdÅVÊó\APº®WÕÏ6sâ8£:Y·Ýv[XÍ°¦Ù9òl>Wf=8jÊ9Í|w¾¼ÑÀ­52Î¹ë8ó}ß«DÏç\<xÏÍÍeßøÆ72ÆX:3338óÌ3ãmÛ¶eÛ¶m+O:é¤Ò_»ví<!d fU)Û¶%c, .bày^çyæû~"¥Ì|ß/c2ÏseÖÖ«97ÿÆc­>]Í¤éD¿9+=üp,×uÎùxëyä7ÝtSoçÎ~¯×cÁ0Æêæ¤H)ëzcÆ³ÎÆßÝ\ãfÃ §h*]eµ²²ÂO>ùää¯xÅÂÌÌÌìîÝ»·oßþäé§þ¨ÖzRh­ÑÔJ£úsZß4»6 ( È²lù/|á.¸`ö¶Ûn[#lÛ¶+ðb7wÃpñÅeYðýï6oÞ×\sôûýz¬Ô\Ìããã $I CHD»®+cYYKÿøÇd=ä8Îã¶m/ÃaeY)ç¼,BDQ¤9çG= 'Dßø§µÖ1j­´Ö{®¼òÊéû·[????¦©ïº®e²®öÚMñùfðw¾÷½ïÁI'Á ¢M6Á¡C`zzÞýîwÃØØÜtÓMpÿý÷¢( CÊ9wc­ï}ï{úÐ6|þó?Øív  õ}_PJ¥W#*õõàæåydY¦+="Õn·%fh*¥ªØÔ²,Òn·u¿ß¯KdìNøq1r\iûXLá!]	ÓÈcvvÍ!H4cwrr²ÍÖº  'Ë2Ê#P¨+RWãá*$IÁâºuë\yå_ùÊW¦¢â8¶-Ë"UrFp¤<Ïs@m­ª` ´z½¦iïÚk¯]wË-·¬uç`ÇK±,ç9êXê§+e »LXC	!Ì¶m×÷ý¶Rjz×®]þßÿû3/xÁZ³³³N«Õ¢q5kÖÔÞCö(jüì²¦¯	­Y³úý~­¥ÇqÍXÃ½ÅÅE°m®ºê*Ø¾};X½^.½ôRøüç?qëññqí8+ÃáðòË/[³fÍ~ÆØ2ç<gI°=ÞÙÖÏ4<'IjyyY¥iªc* ºRëººbd>#Ã¾fr®,Ëj3,¥Äq\5à2dÒ4!´Z-Ø¾};ÌÏÏÃ<P?ï4M©ïûvYáC=Ô{Ñ^´Æ²¬vuÔ3d].¸Ç; x4çHóãgsÍþ¼qêgùù
Ñø´¤ÊJJÂÕ£.8fI/Æ°4M¡.¨_d}5î¦ v³qeJf`cFj PEQ(Æt]h­ÙÄÄ}â' CØ¼y³þøÇ?.c©b!¢Ý­VkOe e)ÌzÒ4¹9Ñ%Ïó4cLJ)¢(úNg~bbb°wïÞ¢×ëÉÅÅEìpMÆyÓq¼Éä2Ós@=oÓ ,IlÄ\§a$CªßO<Ï£AX?ùÉOü8£±±1sn1Æ(9üzÔ^^¸<ÊÞ"æÇçBÕZS)%ãØ
ÃÐVJy Zi¶;NÇó¼VQRjü{ßûÞÔg>ó©®Ù³gOg||ÜJÓT,//çNg¸}ûöÅ·½ím³7n<0111¦é"ç|!Ïó0Ò\ÁR¼bkªjIdg[?»	ö4ÆmuRk]nÞ¼9R¦¶mç1Ç¶mZú Èj )åy^ÍÄëÁcsÆ/Ú µ!£}ßWEQè²,<Ì8EQHÎ9w§ìt:û¾¯Î<óLvèÐ¡îÎ;[ZkgllUyYH6üÕ9®&''eER*+PK?çA@+ MÓÎ#<Ù¶íj­Rùö¯ælêDÀ«ÇMs ÓÎ¬UÍnSÿ÷t5HvQcLSJµã8Ç¤lÛs¾ÿþbÿþýå×¾ö5áû¾Ã°¬jÉÁÔÔTzÒI'ñ©©)µvíZµ~ýzÕëõ¸eYÉ^ô¢%×uRË±å¢(æ,ËZTJá(½  iJf9ôÑâÆ±ß6Ï7M@\{eY×u	!eé:ÓqgÝþýû·Üxã¾øÅ/µÛmÂ¢ 333õ3®êÌ§°ük£f^ÿ°^Õ¼ºÒ§ ¿ð/\rçéééÇ>ô¡Ía¸GJù8cl1e)-Ë:f´ï­&]¸É ¤ûýþ¡OúÓ¶lÙ2mYV;IW)Å*Ý(9ùäaãÆpÅWÀ)§ËËËõÍÇ.Ñp8(êíye©³,Ó­VK)¥Deé_øÂ3Î8cwe»µÖû AÎãJ)aY$è,Ë´ÙÁ:A6Ò p­uBYÒZ/¬Y³&VJÕNªhæP%¾#&oÍn¨¹üãÃ`Û¶m@Â9çS'|]tôz=¸öÚká?ü!pÎ) XIøNgìßøÆú}ìc+üàÓ±±1e24æx5Î@NÿqÓÍ¨6ºvGÙ¶Í{ÿ½7²¬ªîÇ÷9wÞüj®®®ê¹AThYhA#f¡¢ËDÄAMd¢®MbLpBA¦[º¡ªª»ª«êÕï|Ïðû£ïyßSj4
¡ß]«Tõëª÷î=çì½?û³?r9Êår1!$ãEäû>×uQJBÑº(pBE· ízéú½.Â2P(¾y£ÝnÃÐÐPhÈX°víZå]ïz»fÍþO~òµ±±±v»ÍlÛæ¦qÏóx.ëÝ7!DÓ41Æmß÷^ñW,þÇüËåRB¡â8N÷3N®(&Qcnfþî»ïüÏÿüÏ±/¼pºÝnÏ
1ÑÒçúÍ:ÐR)¥mÛ&!¤1j4+_ÿú×¯ TçççÓ4U1ÅÅEp§þn(°{õåØ+WzZ.Á@õ<|ßï®sÎ9®¼òJÈçó@)×uaýúõ088SSSEK8FQT¿ôÒKg0Æ³ ÐXêt?¯.Çq8¥SJéÜÜ\BÇIc$DQ4MË·¥É¤Ø²écÉµËM2±ÇÅ¨¥0ÎlÂ.¸ .»ì28ê¨£àk®z8ç(K¾±ã8ªïûö÷¿ÿýÊ	'04::ZfíOÓÔWU5¢ÃóÏêYý!n¾pÝ«Ûß{çnp×uYÇ]vÐ©é5ÿ¬¿Þ)ÑÌ=ÁjÌAyO6zçø<Âp%Ëu"J)ÏÆ¦iI___\«ÕPfº¦i8¸ªªtÿþýÆ¸=<<\'´¢(UUea`B"g ¾ Ùx7Ã§eã´;î¸àÆoL£(bÂ0{-«^C^39±vD*ÓÓì²2t]×u!Inþ!k 
}@ÙL§×u4sG1Ün·õ8Ýv»]ÖuÝ5CFè`{G9sÁ¾eþ1Æj«ÕÒlÛÖ4MÓËå²Ís8ç0û|ßïcõ=üðÃÕþð¹ýû÷Û?þ¸;55£Zäà4êy7<<Ü|ík_»xî¹çÎìug?cl izã/b¥IÃ0XÇB¿¼k´ÕÛè{¦òóèÌ
bJâ8îa8 óR»ÙlbUUBÈHÓey+ê5÷ßq®@¯»½¨Od	qDQÔçài\Ó4­{Úét¨¢(D×õ1@óù|Ð×××~ÉK^âmÙ²%>ì°ÃØÐÐ}íµ×OOOã(p½^Çe!vf»l#Î2EQx`A__C±$IÐ£{&Ì Ò	!ù8«N§ i$$	Ö4æ£Z?¼fdC>ä¿÷ÈÚy½ºÕOTU0Qö5Ä_ª,c¸²§ÙÈ;ãÆqv:xqq1ýÍo~Ã²	AÐu©ªJ8çq¹\î}ôÑÍ.¸ qÔQGÍMLL<áyÞR©´¯V«Õóù|  IOþÊ{ÙÏFèóÙÞ» dYPJq¦®ë6!¤1^ñ¹Ï}nì¦nê/®ªªZE¸Z­¢8ìö-4´e)é+¯óÞF©X²Ìø:{ã8Õ4Íëëë{<MÓßÍ`ç X°m»E)MTU¥c.<uÀ§HxGÅb±^©Tö}êSºòÊ++1GÓ4-"BaÂwÞ	wÜq|õ«_uëÖÁðð0A eÁ¦Màâ/¾¾¾.+*Ã%Ýä09cpÎÃ.º¨Çñëºõ(Ú!?ÿ¨pËºÞEËrB Ò("Ã0Â4MÎ$Y2Rz°bAî²[¸ïØ±cEXµjÁ¾}ûÀ÷}àÃ®]» IxÕ«^¯yÍk`rr5 Ø¶m-"WQ/~ñQ___zÙeQ×uyònnK:¹8g÷ ËÆBEQÚ¥R©íygYö<O7C1×ëuÅu]¡¢i*Ýg!ìTÔÛÙA¡Ý#t¿ãúúúÀ÷}pÎ9©T*ñäädÐn·cß÷Ù¶mÛØÊ+£R©ø¾O5Mã¾N·`^ÇLÓ´  ¨rÊ)5 èdeB²½º`«	vGÆ0ÃÍfS-JV¥k®¹fè¬³Îrg¯¢(MJil&Í\Æoz(=UUQcÇqtJi2¤ªêêo¼qÝ®]»FËårÑ0s®,,, ]×Øb/K|_î<lä)I°,Â0ì¯[·®[)6msÏ=æççBB066gq¿áx¦4MÓÒ>ÿüógO:é¤IÛ¶÷§iÚÉä îèÿÅES ¢\.×	 Õétrº®£ÁÁA¢%I¢dà?ã··ðÙ~FBÏO½â
	\.­Vcð±}ÞúÖ·B±XìEØ¶ÝíºaÂ0TEÑïºë®üÎ;«£££eUUí(4 UU¥"M?àïeÌ<qçO=þ7c¿ËÙÚáº®ó8¹iBç©xÞ½F¨Ý¬u],é^Ræ e{é.ÖºhK_sOú¾]~ùå­w¼ãí«®ºJ-ýîw¿Ë1Æt×uÑã?În¹åvÒI'MÓÎ9£*eiaXYLF¢¤Pö6ÿÜ¯ ã
 )!$K$aqs9vÈúB@{½ù\ É õ#Æw®çÊå2¦	Fc	TfÉ9Ü¶,ù¾ã8V	!ºz a:(ø·Ü>è\{8ç8û¯ çyf¡Ppã8v8çùV«Uf1Æ}¿üå/wíÚÕûí·æççsÓÓÓÆ+Ç1Jfffê7o^<í´ÓN?ýôÙB¡0gÆ|¦i69çUU#Ã0 Há¼Ë@È4êãõP¢õ³\ø§®qY
BÜ#	tå¾ïGa,lØ°açÖ­[­ï}ï{äúë¯Oc¡<cÌä«Ùê2éDS@4/E!-4'þ¤¸Â¼#c×2b&ea²ÆB¾aíÕ«W·O>ùäÎ'Ø>üðÃ+JC×õ¤Õjé¢7§ÝnMÓ´3§ø%à ¿Ä¨»»g{
ÎcRÞ°=­ÈI$	¢ëº®Çqì4"¥ÔQUUWËïQòöÞdEQº,pyZLÞ·½.Ì½â9Ëìª@íÈFvi" @[gXD·91æªª²ØÎTUåÅbQóyIêõzüýï?¼ùæ½c=vñê«¯î;â#òI¹\Îà× ÀC%(ßbµÞË~>jÕôOgàopglWsWUuèÞ{ïÿæ7¿9Ì9/EsÿþýaØ²,XXXèJÆ¥«êeÊ®á²~·Øÿòh°<Ý1ù8BEQ¦éoÜ¸q¾T*MÀdE3ªª6mÛöàÀ4-u]W&n=ûµkO¬ky 
BHÃëÎÿÎw¾³ùw÷w~»ÝNB¢(\K$ozzfff`Ýºu@)ÉÉIèëëF££££°fÍxÙË^ãããàºnwÄ!Ä\×MëõzpüñÇ7)¥­0}Ó4Ifôo$	"ÃÏu±å@@)ðs `º®S)
 x¼X,B£Ñ8¨Coi9f zè!(
`Û6ìÙ³t]Z­eÁÄÄLLLÀ)§·ÜrÜÿý(  04M+A0úéO¹®ËßùÎwr à"¸dk%>]ð`£CéÊ¬º®ë1 t8çsº®Ï6!`MJ©îyJÑ£(ÒÑétÔZ­¦ô÷÷ïû (
jµZÝ1Mô,³÷tâdF ¼FdLëpzzºþþ÷¿êÍo~ó>ñT__ß Ô$	ÃH1ÆKÙÏÁiFc¡¦iþþþùO<±uß}÷ÅaPË²XÂñ	xË²º£?¢ÀÈÆD´8Ýýû÷÷}ûÛß>ÿüó+¦ÍsÎ}Ji*wå{WÀªªbJ©F)u è·,kÍ>¸é½ï}ïêjµÚ¯(Ójµ´|>EA®(J·xÝ®ÞbI2¬WÈYøaÂîÝ»aõêÕ°víZ8ê¨£ X,Â#<ÿýßÿiÂé§[¶l¡¡!~Úi§ñn¸¦¦´Z­Å÷¼ç=û
ÂÞ$IêÙ: þ$?Ó«»&3gçHQ,m¿    IDATæ%\2½qãÆÜ¶mÛØ=÷ÜSÊ!lÎ¹áº®R­V4MÕ(°Ðåi·Û¢û-¢;#PìV«¶mã8P¯×4ÉÎ9çxå+_	]AÇq Óé,)Ö)¥Øqm~~ÞþÅ/~Q~ñ_\ÍåryUUk1sN²%ýç:ø÷û@¿ÿË÷ð§$øòùÿ|Þg(P/YøZ6Ý!eö`ª~abf÷µ½iÒ{VÉ ¸ä>ÉÃà£c1nÏÏ}÷»ß5üãó/¼P3M3ÆÔ}ûöÁw¿û]Ø²eîëë39çUË²"EQl p	!MEQ¼L[§ a¦±C/ Ðn<Ð[:Kh¦\0ÌEìXnõgÈkZ ù¶x"¿ìe¡ï(½ö^A°2 àã0BUU5±m;2M3ãX0ª-¢Pllø18û£d5Ê9×8çN>/×jµþr¹\¥ö=úè£C»wï®~þó/ù¾_ît:®ai8Ï³éééÈqÐ0¯P(,|ðÜ¿eË½ÉÙ 4²<ÑS%Â'!¢ª*ËôÈx6¶-øÁ½O7ÀÀâ¦aJ© j&Ï À¢ëº·¼å-áááàmo{Íår ª*ÎÌ4ì,AòØ)!<ÏÃ0 T*uÇñÆÆÆ1{÷î]2:.¢0EQÄ(/ÉV«1ÆbË²¢|>ï6^úÒ6Ï;ï¼Æúõëke-ZÕÖ4­1îDQ$I¶m2ÖbÇ¶ísÎ2Ýn¡Ã&$êÑÀp]!¸pÿ¿ 8çs® ô~Ø"è¦)ªªvu2± RÅµ\g-_äs]6YnÉµìø,ÎÈìâN§spÙ¶Ýÿ¶,Kü`riä24N)åÂlA¹ªª h¹\&ív»¸}ûöâyçç\uÕUÖ¥^jE1f!æ3C5³©ÈdàýP$ô²3Í<çYúü(cb±¦ëºÍ«Äq<úõ¯}´ÑhTlÛ¶ã8V]×ÅN$AÅb±k,%Ö Ó Z0ÙEST®­EýEQ÷È&!C»k{ÔQGù/yÉKêó:B¨e¦a¨ë:õþ¥g§ÊA?ëú ìû& â8q]w ú0ÆîÐÐE6M	ßÔÔ ÐK¢r¹
xá_³³³@)|n¼ñF8â# cï©eÂùcU«ÕÖ¦MÇiRJ#B ¸¦i\Ø'ËÈìsyCôÈËXQs àIpMÓ¸¦i<MSh4ÝûðTI¯°®.	Ð`bbÎ;ï< À7¿ùM¨ÕjP,¡ÙlÂøø8EøÝï~g}6lØ°î»ï>.Ä!1f*R¬ÕjüoÿöoA×u¸ôÒK»$i	GÑçLr¹Ñ(B]×k}}}»Ï9ç]Ó´Æ5k
7n´)¥N$Æ¯~õ+÷+®(pÎó¶m;1=5cT©TÀ÷}Ïç¡Ñht±å,-¤rG^tX3ýËåØGØ¶Ý~óß<}é¥þFÓ´]¡}ÒEQæÒ4õcD$²èìKÚL	 i¶>òø/ùË\.ÇÚíöqfðb@¸w:(Ë|~~ÅÅEó=ïyOþo|c>CÓq5"¬iýC÷É¡Øíâ£$I%½afÁ4ÍuoûÛ×pÎ!yÏótË²488jµZ×ÀA¸¤F¨HÞD ûWvWÉZÀeY<ñÄÐjµ`Û¶m`&t:á÷Üs<ðÀpÄG !ÅÅÅ(Iæ¹ç»ïäO~¢ÙlÎÅ¶ïû±®ëL0¯e'êçAe®]~¦³guÖïN?ýô`aaaáç?ÿùàììlõ¾ûî+ßsÏ=îää¤¡(Á9×B
!eI9Êç\ @	 Ã@"©7Âã?Nfff  àÅ/~1Àÿ\.}}}Ý½$3ÇI¨QÙ?üpyqqq(Ë³ÕOÓ4Í$ §ð|¼ûéZûcÿý!?_OÇ6e_Q¬óBÙò¨®ÜPE(ÄÄësTäã,),å¦øZäÒ{í²mÛnuÖYûÅâ¼çy¥þðI$4IÁÆÛ¶mÓï¸ãëºcc}ÕªU+êãR©´ ªjc¼@)¥.pÎ=eåu¥$Ø÷ÂÅÝ²,Ëåx¥RáÝ1pÑL¹ÌdèuÍè!QEQ´E)|>¦uÁ!þÌú0O¢cy4Ãh||¼Ëå	!]×ã$Ix½:s2ÃZ9E¢tÁ,Î9F©ÙlrÎ-Î¹É³9çeÐ4MW^{íµC·ß~{enn®bÛ¶kÛ¶Å9×+
ÊÜ^(Ú¹\nqË-/¼páè£Þál¦seY $I0Æi¦¹Ê$ácn&OÚí67MSH -)8åç Ä=SÅ 0Æ*ÆØDcªi¥ÆNg¡P(°0£3Ï<qÆÚí·ßnh¦ÀëIat?qÞ¼èE/W¾òpøáC°bÅ
(ð½ï}>ùÉOvµ	!$	·maI½^MÓô|ß5M¼#<²yôÑG·_ðx«V­j¬]»v.º¢(-Ji1ÖÆÒ8¢Ä0æº.ãØk·Û]	%¡Ï-kòÊç`ÆIëcasÎèl^gzcÈ0$	Öu]}ôÑGµLú ËûIÈ2ºa97àÞ:Pèõìâü þrÃrìõì/þ­0F þa!$k=.þdcÍ]|=ÏUUåÍfYe |>¯ÿýßÿ½yß}÷¹W\qEåØc-"ö æ0Æ àÁI1Ê{¾Ëîµg+ÏíýÌò÷;Wÿã[È05cK×õ¦i#{öìÿÙÏ~6 yÎ¹Ñl6Ó4éò0¡P( cZ­V7ûZ6¹Ø2ËU^×23Pçb¦.¸ Z·n]`MDÅkaèirEQÀ²,!¡Â(¥üP R¨2°¡¤c¬%I3Msdvvö;ï¼sM±X¨îØ±ÃJDQÉT¡eäû>lß¾.½ôRxøááÖ[oÉÉIèïïW¾òpï½÷Â~ðÀs1ÏårÌó¼4"ÿôÓO¯Î%IÒsNEãgK:Ù"Ñüs*Jz7yv`r]×y¥Ré&|QuàÁyq¿Â0\òócàº.pÂ	pÚi§Áôô4ìÙ³î¿ÿ~¨Õj°aÃ.}||:üèG?R©ÇsÜ}÷Ý°gÏ  4«s `~~®¹æ0MÞô¦7=©J9çcÜed|¹®Ô³Èæàai1Åq\Ó4ýã?þc1V !äÎÍÍåíM6U üøÇ?>Ê9ï'BcL«×ë¸T*AH grNÙÚ9BsGå¶8¸¤:AÀÊårúÂ¾Ð;ûì³÷±s¾16§iZ1ÖAÅ19nsÙ GCgÔ	Æ8Ú¸qc1&­VU«U¦iWÏSìÁ8ÀÄkµ_¹r%#ªªÆa®ëF«V­¢{öìÁë×¯W(¥èÏ¤ª*xMÓÔTUµ9çUJéØM7Ý´rçÎÕjµ2â8V3¶£a#jÈgÌbÁ¶m ,Ýõ$Åsã¿sssðº×½8ç°}ûv(
pß}÷¦ipóÍ7óÉÉI>>>N9ç1¥´3::ºÿÓþôçyÓ¦i.@u¯<6Ò«]ùgz	æ	MÓ42Ms1Ó6mJ¥½ñÑ$Iß9ç3ÔjµJÓÓÓîC=äþèG?Ê?þøãv£ÑÐl#c(cäû¾Ò2g^³X,jç©Æ	 $d¦¦¦`ÕªU$	ìÛ·FGG¡X,.­ëëë è²o òù<¢*Qé>ø`þÑG­)¥6ÆXSU5½wlóéÉ¥º\áûûè»/Ëuèöïåb^ü>Ø3<C.3¨¦w-×È@Kïïà0!@£ÑfQ]}®V«Õu	1X;¼0c+=I3IvñMEËpéWò89B[E|ßÎ>ûìF>_@{÷î­þä'?QmÛV
B¡z½FGGõéééÜc=§¦¦ò¡àcñ]×mÔËår­Z­N¾ä%/yXQTÓ´.sjIv¿³QC®iÄqeÁ¡
Ì9·÷k¡É(â0cB£Ñ|>¾ï/qx °X3bõÆyýJ?{I¡$þNÖwXx],Ó4Ä®|>Ït]'sssá Ð øq§!f&§Ø!Æ3FÊÖXQB)Õ2Ã
SUÕ !å4Móªªæ	!}÷ßÿØÅ_<1®Ø¶í"Ì4Ml/J©¦isbbbîâ/=í´ÓöªªºÇqÝ÷ý®ëMÁ."$!1¦p1ÏiEqÇH&³ÍÄ½Ï§ZOÇÙ$	¦(¥8cUÓ4S×õÂ¾}ûò¤Õj¥R¨ªJëõz»\.«e9ßøÆ7ª7o®LMM0ÆfÇªi(5\k|èCSO=µËÀñÄO/}éK0;;+Øñ\×uEAk×®]<î¸ãfO9åÅU«V5ÇY\±bÅmÛ8=Ã0Úa6ÃðE	 JÓ4¦¦cfYËò!«ÝnG¦i¦óóóRÊ9ç<Ïsß÷ê\VnÄgkciÇi©TÃHÃ0|Æ5 V¾çyÈ², ê/ùKE×uÉ6 ±Ä{mâ9È ¹#ö«ÜD×\öéÂäL¬CÑ¼ã"u:îÏ³m»[ßÈ¹+0ËÚébßËX6F®ëâ pÆTt]×n¿ývë×¿þuáø@áï|g¡ÑhLJ¥)Ó4çÛív;ÏQ¥¢Ð8mÛsÎ¤N£ÑB¡Ð½Wòï}:§`JóW®ÁÂqî3ó7ùYJ æë²ï!B¶m[eº® ` VÞpÃcõz½Â³3V,öchµZ ë:äóùîY'L©YBXÊS½&9"ªªB.J)4T©Tµk×ù|¾@Î4IuUUiúÙaZ<YüÙ®Uñ¡Dç,t4UUsó¡K.¹dõÜÜÜú¾¾¾ÁR©TÜ¾}{ ±Òl6 »®çu7ïûpÙeu7Ðúõëáë_ÿ:X×_=x'¾¸¸ÈlÛN¢(ê\|ñÅIÔ,Ëò8ç(>Ó@ûc:æÏEAtåW¯^Åbfgg»Éx¯Uu/ø×ëò% $ÏóàÞ{ïüä']pÎ²,X³f
R©«V­;wÂ]wÝ®ëÂYgÕjvîÜ	¦i!Åqu]×DB=33W^y%A o}ë[AfeÁ,Íô<P7-;öp¨O2Æ¼ÌyÐcqªªv¦ÖÐÐPùÊ+¯\ÑßßßxßûÞ·¦P(cµZÍ*Ëºïû1³û¨"ìÞ%î(åmYÄqqCEP.yüÁ$}}}aµZmQJ9ç5Ji=ëz%ªªRÆÐê?çB âtaaFQÄ)¥Ü4Í®¶¡xsn7Mv:¸\.ûQ50ÆûßûÞ÷îyÓÞ49:::Ç±§ëzªª*Iüs_¢
%MS=I<ÆxhaaaüÊ+¯q§Ì9·4MS3¡ón£D|nÁÜÉ²ÜÁÖI ³äIìë|>¿dÃ4M¨Õj°°° µZâ8½èEðàòjµÊÙ<ú¾ï'I2wýõ×ïx<Ã½¢´àî£0jyN»­ÿ±{?MSfFJ)õá~ $IöaXZ±bÅÔàà`~bbÂ9ùäs\rIÅ÷ýÜÌÌ1??¯4Mh6h×®]ÊÌÌ633{â'*akµZ®T*I¨aâB¡W¬X3þ¨££>~üãC.[R°ÇqiB.ënÕëudcEQ´íÛ·Û?ýéOË'|rÕ¶í<!¤$bÛ6aq±vÞ>ñr´ÿMNñû81")öwÏ!\×Ea!¤;j+ºÅ¢5Mó)çåéÕ«&Ya&Äß÷»ëJîpö	§	ÖÉrHE31+®hÇ) [¶liçóù  Ïþóf½^78çj½^GÅb%I7nT¦¦¦~X	ÃÐj6dnn.)¥Õ«W/lÞ¼YY½zu­P(ìç·0Æ¦i2Çëlä^¸O6Û¡
\Ëå\DHÄ
äóy ;dv h{]>eOfÕu.â¬g*Öi¯v±\(ðQä7">eë+Â0ÆÉqÇç¿æ5¯ièºÞ2# Ç1Oñ^¤rà£N§¹\µÛmlÛ¶Ò)¥a®aNÅ$ITU©Õjå/~ñî;rF£I$ÍfSãõz=xäGÂõë×w.¹ä¹O>yf|||R:C)ã7-Ëò9ç~VÐ%p`ìJ±RöÒ¨®ë¨Ýn£|>t]×¢(r$©ôQJ¡R©xN'pj:v']\\ï¹çhóæÍÉîÝ»Y¥RáäE÷9'IGy$tõjÍ&E`0aL700@MÓL¦§§[wÜqÇäÚµknµZSJ¥¦ªj#Ã®ëaQ±¦i¥4!lÔZFDB4Ó4) 0Ó4»ÏFÖÿÏyYYäµ£8E¶m·Ó40Æ)ÐiçËåHOÇ­ylJ-"}aaASUëºDcFä½¢±#ÀA32nîÕÑ{\®?d0J¼^4²	!`YVwü_èþ%I¹\$lÚ¡»{äx*¾]HÄ+9	PR*FÐ±eYb]KÓÔºúê«ío¼1÷ío» nÇ6 ÌµZ­F¡Pð H\×%i²v»J¢(â¥Réÿ$'z*íþºa¡ÓéaÝqéçúG¯Yï4*BH 1V`8Ï¯Ù¾}ûúýèG£¢E1ðnnÞb<F0ÿä8%$zµ{ãÌõ.$4T,Õ	Óó¼êC=´î±ÇsÖ¬Y3¼aÃ½¢,QoµZsBa 1®(
Í>ó³Tq0d1ÆJ©¡iZ~qqqàW¿úÕPUMÓ®ªªéC J¥sssKfþ`%º6lï|ç;°~ýzxõ«_;wîì&Qq]×)c,Ù¸qcgË-eµ ©Õj¼X,¢(H×u$S3¥D÷n¤çøûÞ+!aQEÈu](
0??ßeõ,ÊÖîB º£A£:Ðl6aÓ¦MP.¡Óé  @§Óz½A,a?¸®abEQ4Ñk¯½àU¯zè4B§Ó¬§ÂzµÎµÂS e!*D-NÅ4M!¤Öëu£Z­jFÃÍårµ·¼å-×u£/¾8¡r¹\^XXp3ºªªª8¨` -;6 ç8N·Ëïy^ø#ccc°~ýzøÚ×¾¶oß®\tÑEê®ëR2ÆH6ZÅZOq(3 Hu]mÛî,..J%ÍLU1fxb<½ÑhÐ|>BZsssóù|~ïý÷ß¿gåÊÕjµÝ 0M)mB4MY6rÌÿÐ`q(ìmù=èº[­jYmFc<ú¥/}i4ãJ¡P°ã8Ö(¥8"DA¢`÷ON®ääF>KåÂGª#~½I"ÞÿýpüñÇÃ¦M`÷îÝ033ÃÃÃðö·¿ÏÌÌ¤Û¶m X¼øâ§Ï;ï¼Çâ8ÞÍ[ð}ß7M3ÍtV·W¦Ü4M¦)Q%Ê<Êce¡4Mªªç\Ã«årÙ0V¬X¡÷À¬PW9çc¬zÃ7¬üÒ¾41;;;477Ëår¥T¢a¨Â0×uá]ïz¼ímoEQàÑGr¹+Vtu$Ëå2dºg@)Å®ëªívÛþñ\¾ðÂ6oÞ\AíWÅÏtÒ¸N>Uòù|¹1;cvº®#ß÷q¦¢ãe±!	°³¢W#Lï²8;Ä¨Ó½ìi$xÈ¿Kä
rþp0Ý¨^7rqöóM0Á
3M6hpp°³qãÆmÛÉââb~ÇvE®ëJ±XÄ³³³P©Tð¶mÛxEJ¸¯¯Oa®ë¦i¿ùÍo´thhÈ*JÈ²,.Äå1ÆJD`Û¶Q¬S1¾ÔóCy.ÇYîõ²!
^*x»Ý~vcoC¸wMÈE 
Åó``B_Ä½fsbíúBUÕîD¦i iq1 9î¸ã:ç~=Ã6!$¢¨ËþËÆQ
×a¤(
ÊiZE&!ÄU¥bÆ@§Ó©RJûýë_~õ«_ÜºukÆ8 i8MSìyÇû¢óæÍÍ~ðõc=¶Ö××·×0f³¹_Qz¡PèPJÃ0S]×S8`*À²©|>'º'#A ZerÎ+®ë®zè¡V¦©wTUõÒ4s¹\!ã¸266Û¹s§ýµ¯}Íxãß¨ÌÍÍ!!cÒßß«V­F£¦ÁÄÄÄßA÷uÇ<üæ7¿ß÷addaÈZ­V¼zõêëº{MÓÜÁÛ$I1Ö!N'Ñ4(BB$ÃçX&ûÉü'cek²XßòÄÌèêÁ³5Í9ç1kÖ.
¶®ë1c>Ï:é 4ÆA®^¯[cMä=)ö¼ÏE/öèr#¥½W¯^ |&ô$çëºÝ×É#©â÷ÉÓJ"WN½5H¯qü,d)+q.YÚí6X¦A
Æåóyìû¾ª(¾cÇûè£.¾õ­o-~øÃ.åóù'Ò4ÝÛn·çÃhGQaÓJ¥Bã8fs!õÍÿU³g9ðc,±eY(sQæs5°ø¡Vý© lF1Ö|ßwÇÈçóko»í¶Ã>óÏ¬Ù¾}{>w0ÆÐw}x-[N§Û×§¼^{syLX2 Z'³Ñ|pGyÏ{Þc6âå_®ìÝ»·8>>>râ'¯Zµª6888311ñ¸ëº)Æ8 "âÅ³}¿Uù JÓTaªª÷ìÙ3êÓ4­Ç±EaYBÁ lÛß÷»hª pï¬³Îc9^úÒÂää$\wÝupë­·v)×bÍ4MÞn·Ù_ýÕ_QË²X»ÝVÇÑ+áû>UU5¥2 èºBÙ¶½eføe\«R¸!UU¢(8AQv¨¢^¸}æÞ®®{×4¢(ê
Í§i
µZ­ûsæææàæoùùyÐ4Åâ} ñ»$ANÓTã`jj
>ò@±XO>¹Û%Ê~Î9'ãÞÄé:Ä²"+Ò4eb&Eá(i¸Z­*q+¹\®£ªª$Iô¦7½)>òÈ#ý7¼á­GydLÓ´q!cSÓ4UQuIQïÕlåâ-Óýë]tÑEèÖ[oÅAh7ÝtqõÕWëUUU$	6M@×~\ÖÖlÈA9çq$mUUçûûûçææúu]·Ó4Õ<ÏCÙXY7)åóù$ÃN¦û^ÿú×?þO|bÆx7 LV«Õù0¶mûÙx;Ôå§ª °ªªmÛ¥´1ÿìg?;¼zõêÂÂÂ	7weYO¶2    IDATP¹ø{R$oR£æIì
Ñí£W Ò4Ý»wÃÈÈx}}}üCú¯×ëôË_þrAëÔSOýÄ'>± àï·,«­ëz9jò¥Kãù	µÐÿaqB¶,ËâW  16²s,VÅGu2 ¢ªª ÛB	 Í¿üË¿×½îuÖ;Þñó¿þë¿X&BÈ¶,Ë¸ã;º.¦iÂc=;wî;wÂôô4Ôëu8òÈ#áø `»ãÒ.K°Ùl"Çqb±¨ïÝ»7×]wU=öØ2cÌÅ7$u]gY'ò :¤Ï7Ðïøü"ÏÑue{mÛÖ(¥ºªª
cfìT×u$	Ï4`¹Ìîéd GÞr<ÏØÝfRïçï¯·Q(Mõê-§×;% aÈ9ç<cÚjµb hqÆkÖ¬Y@%>ú¨³{÷nc¬{«Õ*tÒIÜó<¾}ûvñQ£ÑP;ì0<44ùË_B½^×Å"!e%¢°Y¯e¢i¡ÝQ§ÓEIÃ Ù}áÊ:\	ÑËP¥{¦)¬m1ø·âçõôêéÉì@Ù`£·¸ï5-g¦a"Ç¤ ù\UFFF`rrÏÏÏ³8	ç<Á³XÄûcÒçG¾ïc×u5Ïó×uÆXÑuÝ~ X¹{÷îG}tðÆo¬lÝºµÇqaýúõv­VS HcáÆ['pBâz'tRsÕªUû$YT¥N©a¹\®
9çIèÃ²4M{Ï%Ú4¢C¢ÈÍår¿ýío×ÿÍßüÍ¦b±M?üð(Ãð¨£ò×¬Y(âÌÎÎ®qN=õTík_ûNÓÙ¶Í&¬_¿®¾újÐu\×ééiX±bär9!	 F?üp0!ð}º®BÚýýýs³aÌ¦YP×õ4³ë)"ö»¶"7ÂRHL\²<ê.h!Äc<{Ö©eYamBHÀÏH+Ã¡4M ¹0+iæ @ÏjuÏP0ke@^Þ» 9e/Ûi¹Tvìud¯©FÏ+á,Ëæ¥h&ÝÀÞ³L~RîµäüëØÙ:Î¹ER+¢"ô$I¯|å+Ûn»­òùÏ~pÕªUYµ;ýÅb±Q«Õ¼|>ß5ì;BÈ3º{<½X@v®*¾ï+R5Ë!a4c¹/IÎkyùr;ÙçÀ  mÛv Æ¦¦¦Öìc[»mÛ¶áÒu]W2 õÆ³Þ«×ª×5[&ÝôÉæbmf?iûÜçééiË¶m%c{Û¶mJiñg?ûYáÈ#Äï~÷»çcÆX9ÀZUZhsÎ9wxàRn.3u]W£(ÂR,ÆËd}¹4MÁuÝ.=rppÞýîwªªpÓM7ÁÍ7ßûöíÎy7)>!«ªªsÌ1B¨1za-UU#ÆXÑ&	!eóú2AWAÕîMLKÈ· þ²Åá CS¢HSJ¸ ^=å>¯X´bQËÖÊ4b¬	VÑ¾}ûº´î|>¶mÃC=»wï^òó³1'äû>Ïçó8C­ÕjeYððÃÃÇ>ö1øøÇ?Ç¼,rPH)%r=ÛÛ³uµ¢(Ü4MÈºÕ (
Ó4qÎÁó<ÙÝ'N'5M3Ã0hÝ{ï½ï{ßûZÿöoÿåóùaUU¦YaêI(¡»ì²{¢è äDèîB/9 ðøÃüøìÝ»W¢Èfc3ÓÑDã$Ù 3MLC3+ ( DaÔB{¯¿þú}çþ ã8ù(l$B8B<ÏcaÐ8C×ukùÈGvþùÛÅâvMÓö¶ÛíÅ$I:¹\.ã`és%HõÖb"PÇic¬RºâþéFÍf!d'I¢j3F1ª!{/gI/T²ó¯¼,ü/ÖQE iìØ±jµwÜqü¬³ÎâÅb]wÝuÉÎ;;®ëÎ~ô£Ý944´#Ã)Ã0êIªª(Ð{¾^º®wu«2·C!Tàýú×¿>ìöÛo^½zµ¹bÅtåÊÍjµÚAEóRÆqì9C<ÏS1Æi*ç\ÝµkN>øÁÖôo|ãùv»]Ã¥iªÂââ"úéO
_øÂÀuÝ.[taat]ï~²³ÜàR©¤5ûþûï¯ø¾ßç8NÁ÷ýªªÆÊ®ÎË_Ï·çgüÊÎXÝk¬ëºÊ3!Æ8¡©ªjÌ9÷!¾®ë1!hF³sç)ã¢Ü(k@²èÈ¬0Q¸	 ¨×VÂ^®ÈGDå"Q.ÉU¬^¯§ÕjÕ;í´ÓÞÿþ÷ïÝ¦)r]gÕ¸¯¯U*:>>êõ:·mæææ¥­]»ÆÆÆÐÏþstûí·£ã?Ö­[GÆËX´¶aBHWÅl·Û¶ã8f¦õÔ0cQ×u?MÓ8c±gÕEþût*{]/SOÄm1!$ç1ËÌãèËã²noô>WZ£òt¬O+Ëk_EQÔN²A@½^8ÑÄÄ2::ª§ij
 LÆÆ9'ªªò4M¹`À)Bv]W÷}ßq]·Øl6+¹\nØ÷ýwÜqÇªÿ÷ûÅ/~Qâ;ýýýmÛÚüü<pÎC hwÜqsýèG÷U*}¡EMÓ:çu|ßo:ÓiµZ>¥4ÈßIÇ ëº ¸çy\^?ÏÅs3kÜbÇqT±Çqõ[n½ýöÛÇr¹\%«¤CCCi¦ã8Q__æ8N©P(wìØá¤iªfl$Ô·ÜrLMMÁë_ÿzØµkÁæÍaÍ5BÿÇß÷!I(
IÓpB÷ìÙã¯^½ºcYO	â8mÛ¦!EÏØË\bêp©.Ab­èºQçÍÏÏwA0yïôJ'üKÒ¾ãRfYVÛøsvüyo ÂÃ¢hs»Ýnç1ÆcLËâ	ÊòF.ÀÄgæ=r}ØÛHèþz¿¯ªjWïOÄAò ª`òõê×E0M³[÷¢Ðbs]·«iÜ«)öì*,{²q5Äó4M±ªª([¿J«ÕÒ1ÆÖÎ;ÝW¼âåø(\pÁb±øD³Ù®T*óI´5Mâ8Nc4~AÏd|xªs"áPLÓÔÃ°TUµMÓä­V+Be%.¸\|x6byÂ979çEÃ0ÍæÄ»ßýîßþö·C¶m£(2BÂ©ÉP9õjX'ÎÞ3[2ZÒÓy½LµÛm\*P½^GkÖ¬QO8áejjÝyçÓN;¢DäÉÆÆÜ³
 öhÅt5 £(²î»ï>!d T¢iÎ $´?Ò4B¡ ¾ï/Ø½{7}öÙÝR*FE»1J¥Úïÿû^ö²­¿è¢´5kÖäÃ0Ü«ªê\Ç­$I"UU#UU#ÎyÊ9'AÐ!1Sý§ì±ð@ÉÐocìRJs¦iºç
d´ï8»z
ÓPÅÇå  /vQäÊ#¡×' Þjµ
}}}ðóÿåZ°ÈDg)»ç®ëâF£¡ÏwÜW\q\sÍ5pê©§mÛ$`£Ò3;ä)¡Ã$6{æ´'¾æY!Î +J,·MBÐjµZýìgýN8!~Ç;ÞSJu]¯J%·ÓécEð²(¯(èt]ï
¿
½&qoÂ0äýýý¼Õjñ[o½zê©É«_ýêø¶ÛncSSSÆòXUU£Óéax¡(C¢ª*Ë­'Ýï¬è¤ SJÛ¦ÍqÆÓ6mØ³gO?ÆØÖu]õ<3Æ¢(Ïç9cA]uÕUoyË[àï"L¦iZ3MÓSU51$IÂ²Qñÿµé³ØYs®Ùl6Ë¹\ntëÖ­«¾üå/W*BEa
c	½GQhÂHZ2p'ö¬è öv>ep^ööòH¹a]7¬f³	ßÿþ÷¡V«ñ4MÉ#<¦iZûøÇ?¾ûäO~$¢¦iÎ'Iâ©ª&IÂLÓÑÔ/1I{eÚ2eYåZ­6ñío{ãW¾òCCCeYÌu]¿\.kÖ¬6lØ~øáÕ«W7êõzEâº.j6ù]»v~á_(uÔQô²Ë.kpÎá°Ã?óÏ¨»wïVÃPñ=÷ÜÕjE(
À9ÅÅEh·Û0??ÓÓÓ°mÛ¶nÅc1»±ªªBÈùÕ¯~U½ë®»FÏ<óÌ'cópÀÝ;µm%Iò¤s÷ùô|)ðF~I6ÒUUÕ4M³2­ÐMÓöîÝ«T*^>ã¸F)m©ª`ã4M©¢(¬§Éÿ¤î´è8"7çÄ9"åå®¶ rÄZvÞÍ§Þ[G2[P0)c¦)Ïçós¿üå/o^qÅÓGqÄÏóæ\×Íu:²råJªë:ñ</^XX ÷ÜsîïïG¢àõë×+¾ï«ôÛßþíØ±aa``@ßJ¨V2ÃRÃ°Ïç{÷îu	!QÿmÛ»Ò4C1Û¶9!>ÓEÞÑ^Òüy¯ [ "Ó4}Îy"	É¸[Hnÿ½LSaø5C»Ï_1q¬·¨`  @»ÝFBA9öØc+Wæçç|ßoêºge?X^§  aè:ÓßétVäóùÑÿùÿYù­o}kè±Çh·Û×uUÃ0X«Õ
:mµZÑæÍ[/{ÙËf_÷º×Mö÷÷OÀïû-UUÃ\.u:Èó¼¸P(·(¥RfKae¢(\nª÷Ïéºã8Ö-Ër;Nå¨
i%J©¦)<úè£¬\.GyEÇ±i¦É9×c°,Z­V×èaëÖ­ðÀÈW¯^¯xÅ+ºÚÇs¬[·0ÆRÊc¼P(°ééé´P(ëÖ­k q$1F³:3Æþ(_®ÐßFû#§^zc^oQ.À)áøkÛ6Ó4f`;×û3q}MW)Ahi*Ys²ËúU©ªÊUUE½N§Ð ¦iÝ¯·ÐË¶÷Q×µ ÿcNº®Ãùç=öìÛ·dé,f÷SaòÊ·"g6MSHäÚù|7M!Ó4UÇ10ÆÎ%\â~óß,ýë¿þëÀÐÐP	!´;ý¡F>÷8ççy$æ ¹>}:¯­1ú1V$±mÛ®ÎÎÎöår9(
$Ij $Y­ö"8ñ©ËxÌê*%3-1Òh4Öýõ_ÿõ_üâc¡rÇeYïû¨w_Gênyü_ÖØ_#×V²é¡\ý¥ªj×DmaaÃg<òHþÀ ­[·²ÁÁÁðÌ3Ï¬»®» c,Ñ4­;åñ¬=eXbMNNårYcá88<DR)6¥!$@ tAÐ½ih)Ê4É]×Í»ï¾»|Ûm·¡þçÎ{î¹ýW]uÕÌÀÀÀ^MÓê¡¢( hrÎ}]×#]×ã$I$àÀØ"ð×lËá Æ¾T2áÃ¬Ã9/83B)Ü±cG¡V«   brsä¤QFºÅ+°^M¹Ã%âY
l]×¡V«ÁÖ­[AtÐÂ0ì"Pdã½(s4Ä¦iI@µZûï¿®»î:¾~ýz>::ÊBÔ0*Øsúÿn	?d09i]§ìk$ÝÀZ*h¦<IfÛ6¢(±,+RU5~ÃÞ¿à/>õ©Ou¾÷½ïÇq<!2L(R®ª*@Ñs§Ë{M <sssü°Ã#cccáÈÈHëSN©=ôÐCññq$IÑó<Ë4ÍDUÕ&BhVÓ´Fæ´Ö©îé
óD 1"Z¾ï×O:é¤ö;âB¡@áÀCæÙzàAÝ»wÇ¡c¬¥ªj!X
	ét:Ì4MÐuê¡^à÷¬C$íWcìær¹þÅÅÅñë®»n,I¦ivÖ4Á²FPBs+I'ÔrÒÙëìÙ»wå.µXZ0¹\<ÏÑÑQ­[·ò4MiÁÙg½pùåïãx·a³i¶£(J\×eR®(
ÿ}.©Ï AæF=o úxâ±üà+Ã0­Õjn¼¤äî»ï&I$a+V¬ðs¹\J)ÅCCC<"sïÞ½ùë3Î}ß÷,ËJ.¿üòdll|à`;wîäårZ­¼öµ¯ÁÁAxðÁ¡V«ÁYg'tìØ±þå_þ8çÏçÁ0n¼ÍX (!dìÛ·¯ø­o}khË-C¶mO'IÒH×u*ØóËé þÿ àÖÁÏ
UU5 p:NYÓ´aÓ4WïÝ»wÕw¾óâàà wöÙgO93 ût]¯1ÆZpÀ``	C¾÷÷I  ÁF Â0ÚAHÖrçÅrº¡rN 3ÅßË¹üûåF¯»}Öøeº®SqT­Vããã3 °1ÖaYÇ{,Iî¼óNÏ4ÍÈ4MÖjµÐÂÂ¢(ê8I± @/
s.b%vG7#oYÖ 8QQÏóÅÅÅ¾¹¹¹Ò~ðÜ­·Þªw®½öÚÜÆ£f³V*¡ßuHÉPÈùÌ°<Hs|7Ë} ð
Â¢mÛ^I¦¦Ê@o/CB.äR;½Rò¸¸¼¶ä¥l&#ÎÁ,UÏóPµZUÌb±XJd ,pÎãÌ´1Æ|UUç\ea `i2fF%MÓx`ý7Ü°bjjªvvÖ¦*¦i¶ÅbpüÿÇÞGÙUéÃïÎ|Îj®LE@â´4¢¢°ìvè¶Õv9¨­-ëÃraËj»-*¶Ðqn@d@			S R¤Æ[w¾gÜ{äìã©K?[±Cë]EÊ­{öð¾Ïû'¬_¿>zÙË^ÅB¨Òßß IýBé8keùqÇ¾ïsÛ¶ý#|ßc+¿ó^/ÕÁIB5MÓ[­V!ÃþG}´¤ëºEIÑâ8F¶mCÒó<Þ$Iâû>2¦R¯l°mZ­Vö)ÏÆ;wÂîÝ»!/{ÙËàÍo~3,_¾V¯^<òJ%¨×ëÒ0>00%IâB¢¹¹9îº®´,ªÕ*PJÁqèt:óBiº}H¥u6aLÓF£Òæå%¦y:ß?* /|%!DêÌTH)9c,êt:¡®ë1B(¢§CNez(ÖcÐ©Q±Óý]ó:ToõUð£òõTëÿ#Ï~ö³ðµ¯}Â0Ë²2öJ ÏÛ
¨sH4ÝÅy P~ê½¤Ï|ßÏÖCÊ6DJ4MCe!Î9ö}  ;þøãõûî»Ï9í´ÓJßùÎw
Çw\¡T*FQ4^¯×§K¥RÃó¼ >ª{â2(ÊYaÓ4õV«Uh·ÛK¾ûÝï.çÓÿ÷ÿþßÃ0°ïû1¦úge×óR­£PÚwtæÀ" XsÞyç­¿å[VÅq<àº®KÑæææ0c)Ïnµwó_¾fQXÖB aþÏKêóuNþ{&IeÁ{ÞóØ°a\wÝuòÖ[oMÂ0l¿ë]ï^·nÝ>)å´²Ó[v³6ÿW ÀÜ¤$"Ma3Æ!Ç¶msN$AQ¡n)J#@*Å9Ë²`Ñ¢EÐh4`vv6K%RqÛa"¶mu:»P(ß÷­þô§¥;ï¼sÑ1Ç³â¨£jwÜqÍc9¦Ö××7¥iZcÜDÕ` ¦  .¥Ò
  _"¸bþ1 %PcÜ ¥ Êív{Ñ}÷Ýwäí·ß>1¶)¥4"lÛ6ø¾?o*oÏË
óÒ<`«bUä¥yx§Ó `Çð×}áæÍ5MC1éû>.LÿêW¿ùÈGÄ%\¬X±"ÄqÇiàD¤@@eâ{84¡J÷NTÍúMÓaB»ÝÃ0eY2M(q'AÄ®ëk×®mnÚ´iîºë®ÞýîwJ)E)%ãw{å(¿ 2¯MÕ`I)¥ã81&t]×¬YÓ=òÈ#'Î<óÌ®ëZ«ÕZvÙeYNøÃJ%êééI!Ü÷}¹P
bÎSSbN§Åv__1¢(©s^È²,ò£ý~ùË_Ö<ÏSaA²Z­ÊR©$¥Ðn·¥ã8/I!çÓI À¢¨hÆ¢§zjÙ7Þ8X,½4²´Ûmå¯3oLä/|óÔ-«Ê'Ó©¦+/ÏO¯qq»Ý]×ahhªÕª,
s.$I|ß÷_÷º×Õt]âÏJ)qBa(\×ypÿPÎÿu¨ÚQ)ù¦$Iy||¼Ï=åB¡PRZAà´A1Aáódûöíç\¤ÁÒ¶mÜn·õô/|!ìïïgÉòåË­+WÚ¯ýëÙ3Ï<}ßGÏ>û,ºþúëÁ²,èííã?>úÑapÅWÀØØxAdûPRð3Æ4BûàLLL,^ºté³ÒBH'e?/­òÏ²ß? ¨Â(p½^gÛq¾8GÃX566¶æsûÜ×\s7<<ì[5|Â	'xW²,ëÙ èº^M¤£@À@ y¡@j 4cB¡4pk^o}÷iSÍ kªðUäæë|q·Quÿ]L³ÙBáû~Òl6#Ë²$cÌÆ÷>÷ÜsÎÄÄxW=í´ÓÚ6lzzzD¥RÑÆÆÆ¬={öêõzÏìì, $	æ#<Òèïï/a¸b×®]Åûï¿ßß¾};7öïßïíß¿ß¢H3{ì±¹õë×w¾üå/õõõHýº§&(÷ªÇdÊ8B©i7k_¦Á&²efÍ4ÍV¥RlÛÊ/MÅù¡Rì¨ÄÎ<§îBX5Uª¢yK|Ðº³Ô½§XH]k!N?ùäeYv»½4Ø¶mÍ4MFaqW5MãIè©ô1¢(2'IÒ»gÏÁÓO?½O×u·¯¯/[¶¬ròÉ'w^ûÚ×Ö=öØYË²ê± IPá§½C-ã:Æ¸Å9$I!Â¶mI)FC¦©üõà+¦9¢ðàöLOO{çº®3U*¶Z-äº.ª×ë(N#ø1ÎlI(¥Ðjµ`ppN:é$¸ç{ ^¯C½^ûï¿/^wÝuìÙ³¢( À²,Ç±<òÈ#UR/.JDJI|ßçeÆXpÎ¥mÛR¥àæý+óÃ{J)Ôj5HcµÛmp]7ÿò`A·¦úwb v^ü¡´>RJQ-Ë²*QUt]÷â8ÆS¡a)ç§Ê,m>ßæeÿy »¹«Áù$^*9°ªÕ½¢úÈ `õêÕpÊ)§V¯^yô©ga&ïl»Á¼¸{ ¥¾.í»²`¥J¢ÇAÍfS±Ú1 0ÇqðsÏ=GôV«ezê©Î§>õ©ÒÇ>ö±¡¡¡ã8Ï6ÍIÃ0ª ÐJYvI[ø±óçGW@ Úl6Ji!´ìç?ÿùê±±1ãø{ÄGt¢(j1ÆÂ é.wRÅ, 01@­Ú´iÓú«¯¾zic(4]×q$Èq¤jn¯â¤óÏc`F&çCl»Õù|ü    IDAT»,OÎQ ´¦i°qãF8÷Üs!$/¾øbîû~088X=ë¬³8s@JYEù)©F.CvN A	!&ç¼´sçÎþjµZR¾ï)%2Úí6RRÉC¹ÍfæWdT«UÚ¡X?ªØT@§ÓÁEÉ9gçsssÅ­[·ÜqÇA¡P,YÒ©{ì±õ7Ö1Æ«W¯~¢P(ÄaBX;¹âø°^ÿ1&ÒÞ0`dbbbÙÎ;û'&&O=õTùW¿úÕÀøøx¯¦if1â8FÝéUyÖnÙH%þyS.¡oþp¢ïû`YV6y[È[0'Ï¼8ç,5-ÝrË-üÓþtô½ï}¯Õ×××°,Ë¯T*IOO EPé¡äl`,Í*ù	¢Ú!ÔÚ qÎçyBuá;ßùNvÁvïÞí"tÓ4	 ¨'p0àCM*Jöw)Ö¡*J$I1_¼xqÂ9'QyA¸\p÷ÿù¶ëºþìì,þçþç}¥RIOgOíyÒg+ ®ëò0ã×½îuáÅ_'IÂU¡fÛ6ªÕjcz{{I»ÝÖ[­VáßüæÀùçßÃ9 4BQ½^Gº®KÇq ¢Ì¤þ¥Òà«Æ,Mq¦K×õÞ©©©%7ÝtÓ" (K)MË²:«=§
¦ü%o»ÓÓÔ?y¯|ã­ªzù*©sO.×jµÌÇ2õIý+W6BuBH[êºÎã8yC]P* Qz"ÆNDRºIô<úè£å(N§c0Æ4
Ä9a¨}#
Ðu]ú¾
¬Õj¨¯¯ÏÍÍÁõ×_o`uÎ¹,
tÉ%F$Ì4M$¥¸ã;àmo{sÎ9°qãF@ÁUW]?ûÙÏR
eA«ÕgzZ Æ5MÓ)ÜtÓM}þð{(¥Vêe¨Çyîóÿ¡âÿPn0¤W  D)%I0×u-!D/ 4£¿þõ¯¯½ç{VLLLqÄæÊ+ãK/½´|Ýu×O?ýôâ©§jõööÒÔIbý8J©èt:ÈuÝlªàh¦ÅqlpÎYj6%D*yjÂr&çY§yv`Ö]S¨FQHjÜmôÞh4!iF @×4­Àëg>øà²÷¿ÿýåà¢.ªüÝßýÝç¼IÁ `@9%7oÖÏ;ï<ý±Ç£  Ç{,^¶l~Çw~øa²ÿþÞJ¥¤² *Ð-Ëb¶mã(Æª×ëýÒÞ Bcá<ý_UÐEz/cIý¦ic xE¬¤Öch6Òu]I)MÂ0)¥b±ÎÌÌpBP¾ÛêR÷mÛ5ðQ£ØA9¿½lpoÛ6¤óØ8yP,ÏNW÷ ²¤èééÉþ^!*
xzznÝºÕ2M³oÑ¢EÒ²,Z©T°ëºÔ¶í gyÆÚ¼y³ù®w½+êééi¦1³Ùlò¯}íkUÏóüõë×ÇÇsÌ!¤¦iZ]JYR¶ã8ÒðDJ&I
!b]×ùÁ¥~°vKÁ¥lÐªÖv>a¡¦ý%T)P 0Ãðn¼ñÆeYc!HÇ(]ÙÙ¡z]×R1(9¸Z3J iT*¸÷Þ{¡ÝnÃøø8¬\¹ÞûÞ÷ÂÜÜüìg?F£5ãº®cÃ0mÛ¦iBÈ¢ÈMë\ây^Ì9çarBP	ÝÉ< ² ¥mÛrñâÅrß¾}*xÃDä®êW¼åY²*léw;~Ò½Â0®ër!D§ÙlÎôõõ=ûÅ/~±ð­o}ÍÎÎB¡ pã8ZE4:aË² Â003;¡¼¯´:KòDõ5ùÁækXõkÆ8årzzz`Ã£:
lÛ¹¹9(Yhb.«ú5]+(oW¥ÎnoÀ|ý«ì§ÔÌjLyd¦	su7£ÀÆÍf8Ã,Y¢_qÅÎµ×^[úÆ7¾Q8ë¬³
 0Ê9gMc³¤`!O Y¯÷ÛíÝj/åöJk,¥¤RJRÚûøã/Ai¾ïK!Ä>Ã0!ê)ó/$a?\ú§ò¹U}¦i$c]JYD-~è¡Vñ_\eYÖ"!Db`i½^Ç®ë¢V«Äj¥j|ïß³º®gë»ÕjeyÝXCþK}ú3rT¾VRgÌk_ûZY,¥®ëÌÔ|Ë[Þ2uôÑGB¦¢(jrÎ#MÓDÞW¹;­[ÿbgYÐÊ!d¦Y¼ç{zöîÝë¸®«¥Á(/È§Wª©òQ²HõW¯^qÃ®]»À4Í,Òó¼¼÷b¢(0Ba¨sÎ­0yEÉO>û;wîlÝpÃ¾¾>rùå °ô"C/µ&U¥ÝèºnÇq<´{÷îµ×^{íÚ±±±-[¶«Õªíû¾zÜe)?H$òRî´Àödòt{¶ä/¼é¸j$ò d>ÀÒC!hOO999Y¼õÖ[?ÿùÏ×7mÚTi4­8"$´,+RòÒ÷IFî³ËX5ã$ív[Z%Sv«Õj½øÄ'¦?ýéO'Iâ	!´8q±XDN¢(Ë² V«eÓ7Õ°©C#¥?×j5¶}ûvgíÚµaê»víòyäØ³gvüñÇJéìk^óæ8®×ëÙe^¼"ÏE!12M§`üò¿\´Z-aÛ¶½½½Ðl6³æ·R©`Ã04±wíµ×~æ3Æ(
õb±Õëu1­V!Rî0å±85Î¹Kéß·oß¢ï|ç;}ÅbÑ	@#Ô·å=º¿ó,|ºòKQGwgæ6Yá­¦T  ýýý`LOOCjZÎMÓ:NcÙ²eÎy |)e2qÿñü! RÎ¹aYVáÙg¸ûî»ËãX¥R%IBÂ0ÄIdSmÆ´Ûm©iT÷i`ÛvVg&),µÀccc¤Õja!2)°ÿç?ÿ9
h40>>_ÿú×ACCCøÄ&I$¥Ä¦i²z½îüô§?-àè s>«ë:ã8éfê^øS|åïÒn6¬òÕ4¥{¥ J¥Ôã¸Ä9_:ò¢.Z{ñÅ¹víÚ! (,]º¦)vïÞmÝu×]ÖÕW_m~ñ_dçwPJç!Ò[%rÍ"ã3Æ¥T »^¯£(²9ç}ßÏdÁy&ßlª!*pUðª)òÍo>´H
ò¾
ìQsúÿa¤ÓéÏ<óLynnnI¿vÏ=÷8ï}ï{ûúúúÌ[o½µºxñâé ¦8ç¡eYVµZÕ	!dffFÛ½{7ÁihÒ4öîÝK~øaãÞ{ï¥ ÀÅ¢LØ²,BAéÛ¶íîÝ»·ç'ZµjUc<!¥l@~>0VÇ5ýÝuYÇÈ4MÔjµ°ã8$cÆ97c!Ôëuîºn
B¦i
¬Î¹L\×8e
s!D|ÔQGñ'xB(¶z.y_·_ãB Õ SJ¡X,Âìì,ô÷÷ÃÔÔTÆîËK¡òÌ©üÏAÆ,U½Áàà h¯zÕ«à®»îÂÛ·o×â8¶W®\ÙW(¦iBÓ4<666588Ø^·nÙ²eùÏ|ô£m¼ò¯ãØ_µjÕÄ1Ç3¦µRÊ¦iív»ÝaùB8mEÊâápP2­þû¥äû{-O)%Rj§^¯GGGR!DÓÐ+¤üá»¥
ÀPnÀHÕOµZfgg!Ø¸q#\tÑE`þùèºÒ3%I«Õªþü¤ðîw¿{¸T*ÍÕj5\,« ÐªÕjÃ0BÓ4ÃF£Z5Ï"¡ûS2­¡¥¦iÊÏO¥Ï«óä|ÚçB¾©g~pKZ%:NB)õÇõ}ÿéO}êSèïxGûK.¾þúëûâ8îo4%Ë²\Å´, NÙÒÀ9b±|ßÈíû<ÿºCÔNCc² ²Î¾ÞqpÚí6ÌÍÍA___2ë¤Ô÷q^?]ýNÆBW!UÜàÜl6sá­Vk^0çjµ! Î9ÆÁÁA}ffÆúØÇ>æÜu×]¥÷½ï}###%Ó4¥N¦Y­V«­R©ÅqÄq,0ôBçÅóª^SÁ¹¯AIP]×MBHñê«¯î §§§NNNÖÇq.]jDQDÔý]vNS_üÛ^);¦7=ív{É\°¬Õj¥ É9§ ó4Ý$ùÏ¼{_w¯ùÏ*¨ïÝ½7°¨îOEþñ}
 äþýûÅsÏ=éºÞøÐ>4Eä×c«!!»Ïî÷ùb×ß4-ñ"ÞsåÍ7¥¶ÛmGÝ{Oú
ÊëóU+¥Ç{l±0 dF±êû¥
Jý¬[EÚí6K=©çybV«U½T*qÏóLÃ0¤2eMùi\ô @1¡Þl67ß|óð¿üË¿±¤Õjcz$ÂÒÈk6þHmîô¦ß%
|¡¯U¤úuäËûå/¬C¥+Ù¸7J±0Æ=×]wÝHOOOë¢.
7éyìt:Ò4MEHMnÿGÿ­.÷$L'éÒ4³çyÓo~ó'?þñÏ¦Y"RªèôéÄ2cYªéÚ[ùÔWÓ4ñØØûö·¿m?ýôÓhÃV¥R	·oß¥þ)ÕN:©zòÉ'ÏqÎ[¥R)ãX5*¹åpP¾FÀìt:EÛ¶ûn¹åBÈ"PÓ4±jÄÒT7D)ÅcÍ²,÷ÀwÞyç²·¿ýí8çV«
Jkxº6þGÌKN55jÂEfQÆÉ+I)n¸áZ­VX´h.¥$ívå½RJTìnòTõ|Z£zÎùIh÷Å¥ÎbÓ4³I}´h©üc#ÆX£^¯O­Zµj¿²¢ ÀC4CâøRy Â-nß¾ÝvGãcÒuA1­Å"DQ¥{« !Å0ÇAJEª©$ `Ë²À¶mpÎ¡ÕjAOO\vÙeëozzÖ®]Ï>û,$Iår:4ð<Â0jµt]MÓp³Ù¤ `mÝºµçî»ïzÝë^×£iÚd$mJ©ò$É­{êøR|-TåX(c$	Bá(H$BÈnµZeË²-ËZ½eËõ×]wÝ*ÆØpµZ-sÌ1:¥<öØc²Z­RÇqh«Õ¢?øÁÐúõëù_ýÕ_Åó0j @Ls6]1F|ß×ã8¶Ã(Öjµ¾jµêqÎuMÓH(?|È7êùAnêÉ¶j²Ýý³ç¥ZyYòúRMbBP2Úô8RÊÅA8W^y¥©isùå'år¹EÁ9/'IBî½÷Þò¾}ûÊ7oîyê©§ú¶mÛæÖj5m`` ëºúûûQ­V£££=Ïc¨ÕjJ}ÒóW¦?£ñÄOx÷Ýw_ï5kBsNÓ`	þb×ÝCÕüù$	qU«UÃu]RZò}¿$Ðc¡bÎ÷ýçyÍ8f³ËeÁ9GJµ¡k©_(Ë2i¢(ó­SzÆyõGt>OÕ¡\Ã0`bb,ËññqX¶lÌÌÌ@YºoVà®ëÐh4@Ó48óÌ3Á4MØ¼y3´ÛmèëëÃ0`ëÖ­¨R©ÀÑGgggµÛn»Íñ}zzzÄ¶mÛÈ)§R­{×yï{ßË8º®ËÆÆÆX§Ói.]º´®ëz'I "PtÎ«Þ@mÝ´_ÈìfrC[8ÜkÎ?Tï 1F9ç&Æ¸tàÀÑÑÑ"cÌDQ!V¸ù¦8ÊoJ
o6ø¼bÅ
xßûÞ¦Á¥^
÷Ýwß¼f\J9çÔó<»Ùl<ðÀGmØ°AÇÀL»Ý®:S¥6  æ8NMÑIAüA@µ¾ÝM2¯èQàöBy¹¬Ú©wêö{kPafj8³Ï÷ýpñâÅ3ÿú¯ÿÚÁÜvÛmKo¸áE·ÝvÛ@£Ñ(E1fv:=I¦ë:VÒç´×Ï@'U{äåÐê3[hà¬úüð<xàð<,ËË²FGGÁ²,xðÁ!B@½^ãH)¥ÃPÚ¶-óàç%IOÑ¼ZWáó!#iò,vÅS¡ùóÜ}R9çÈ4M<;;K(¥LJ©ÿûßw~ùË_.ºè¢Â[ÞòB«ÕÃp¼P(L7¦a¥4ïø~cý/µ®´<cUr5 ÂÓ À®Õj¥mÛ¶t]·Z­<øàèox÷}BT½.»ÂÀ«ê¡>thc8c!ä2ÆðÜxãÃB¡D)5rÎqúò·\È¢(ò
ÉÛ\t^ÝaÞ9ßå-×.¿ürøøÇ?.~úinfxê©§6.]:«ëz½ÓéD)§¤D9ÔóÞçÃ¢ªéOÃ?qabb¢çÎ¥r¹lÌ HmNå	 &¿ªPT:%UÅà+à¬³Î»ï¾zè¡lSæ½æÔfHÁ?¤$¦i¢ÞÞ^Ùh4°eYRAZ­2M3©T*ìNº®ÇÅ^/E)Úü½½½xddDKÄj·Û¶i hqMÓ0B§,öZQðÕgßÝ¨?ºÕá¯.GË² ^¯?/ f!z¶º0l$IÅJ©Fqã8¼üòË£R©wÞy¼··WÄqh(ð/½$÷ÐS~¥ís®ëzEQSJ9](ÆÎ9çÅßúÖ·ú|ßwt]WÞFÈæFùpu(aQ­VeËf³É®ºê*s`` ÇaúëÖ­«þíßþíèYgµÛó¼§ã8	 cFR«ÕD±XÌ¾_B JiQ1¼yóæ¿ù¿²,Ëm·Ûã8¸Ùl"Ïó Ñh Ó4%!aH]×µ:NÏe]¶ôSNR¶4Mr ¡¦i<M>¬oÎ¥¾Zc¬a= xøá\rÉ%ýÎÜÜæyNXiP«ÕæÈy¶Z+y¦ú;ÕÔ6_`wï_)%t:X´hÌÌÌ@«ÕB¡ÅjÖëuà8y$ ªúÐ¸®;$I ®÷gÖ×¡!Öjµýû÷cLÒ	2R`òLUÒK(?/e¾­ÇqP§Ó0!¢ìîSëN­	×uáÀYq¾gÏp]ÔëõLª *]×ß÷!C$	±,KCyßûÞ÷zO>ùä2BÈI¤
Õðì·þTÝbÄ¤µÖ4BasÎ @³,ËRö¦¹ ¸ÿþû×|å+_YE^³fMQÓ4Ã÷}:>>XÃ0ÄÅbíÛ·O^zé¥1!Ä?ûì³qGB¬ëº!RJÅÄÐ4jfH)=qQJYâÛa°N§[b!oUü*ÿ.u.aø<cìîruå­\òA!
hT>¤cÜét´ññqçÞ{ïzôÑG?üáÙ\ mÜ¸1%;vìpÆÇÇ£~Üyçîèè¨ avÇfOO­T*vîÜ	!T­VsNÂ0Åb-[õzÕëutÉV«E¤ljjÊÚ¶m[IJÙÊæ4B/¢¹û¤\" ÀajµªáJ¥R«Õ ,½ôÒKßpÃÖ¥^ÚÞ¸qã¸®ëÏv:¶m×Êå²_¯×cÏó¤®ëRRI¢BÀÌÌTw
mÓuªÕê< òÎR_uïäÁÞÈÍ D%½RwÛBÃ)õO¾^	 Â0±±1(
°mÛ6 ß÷Á¶m411dxxX{õ«_moÙ²¥ï¿ÿû¿¥T_¾|ùìääälooïÌùç_	ÃpÆ¶í¹V«Uw]·EÏ95MK!I³ÙL c9~~Ø(s5ÏòeRÛ%CJé=úè£åz½î¦©qÎñÁàeù 3´äù4ð<`¦1tÒIðö·¿öîÝÿüça×®]uêÒïA¥æÜÜ\ï9çK¥Réè£^¾fÍêÊ++'xârJ×õqÛ¶GS &=Ï#5÷>¥#óCõ|ÅBË!ÏþKÓvA}6/öK½g àÕj5`IÇq"ß÷ëRÊÒÒé§>~â'.[òü`xÓ¦MB2B¨`¦]­Vµ¾¾>7ÂçyYa÷Ý÷yW@²ðRB£Ñ ]×aÙ²eúzÃòåË!C0M<ÏíÛ·gÒo]×¥i2N)Ãàív[¦¬] "|ðE!8Å$x®ëf2f]×UÈU¦¡È÷ý¬vRÅ<ÆN¨{*
±myÍ&éëëÓ§¦¦¬³Î:Ë9öØcKßýîwV¯^]B<gYÖ$!¤j7ÍÐ²¬8··þ~[©ÚS­Úá af»Ý.FQÔ·gÏ¢¦iF¥R	9ç\)àûpîÿÿ¨RJ:®ëzÑ÷ý¡+¯¼ri=º®[cú[ª!k6°ÊÔ÷Ìÿ^÷ýÛÜíinªÿÊ@c>ÆõööÂää$|êSR©$}ßoxÃD©TajRê+5dêaË$JÂÞ}/ýÑ°§(Pz¨á85±³cÇÒ¾}ûÞÞ^-Iê3Ð¯Û¬^MRY:úºw¼ãðO|<úè£¼QGd-Ëf³3P( ¹Ýn7Æ~c¬øRj`e
ðÈ( $aë×¯ï$SSS` " adÌ,å)Öêåé¼Ñ÷ïº9»ãàUØétæ!ë¬Ýe,¾ ·ÑãE^z)7ÿã?þc,¥¤!!D=OÞ%K=ìd}¾Ý4þÕ'Ífâºnàû~2ù/|aâßüæ2Ji9RJmÛF*Q«{_¨]º®Ãàà ¤êhÝºu²\.GG}tmxxøÀÑG½÷å/ù3±'ÚíöÆxN×õ ^,eEÝÒ¿l2,¥Ô À©T*ý¦i.=÷Üsx×kÛ¶599IÃÈÀJÏó 	J)Ö>úèÒ-[¶´N=õTÒã8f¡1Y«ÕBÇqøá¾WU«~Ë²h$F¥(Ý}÷ÝÃív»dÛ¶) ­V«ª^¯gç[¥ñ<ªy¾ÈR »jÔ9ªd(Ý¶a0;;Y*4MH-[Åbe	JiEQS×õ/}éK{ Ð<ÔýÏ~p¿{   æý÷ßoE$	R"ÂafæA°¨Â9ïQ6å$EýYÃ0p¥8×jµl½XÉ[*
X­  Û¶³)¥òÂ±,#cÌÚ¼ysO³ÙìÓ4­`fÅ÷ý !Ä»Ç³öpf§Ba]×ïûÆØÐuÝ +" z$^uíµ×\wÝuK	!ëÖ­+LMMB:44=ÏgyvìØËå2ííí5K¥Rñ¾ûî6£õñµr¹pÎ-!Ds+;	J)J'IbrÎ{)¥}F£ðÌ3Ï­à(VÂîI¹bó+fªò°U@µ÷èªçÏ 83#Ó4A×õl@\¯×d¹®år´Ûmãßü&qÇ\²d	þå/o¿ýv ú#<R®T*!]×Õt]×(¥1FmÛ¦çaÅ®Þ·oDQ===¨¿¿ ÈjeAE0;;¥R	I)!Æql=ýôÓ¥Áááá¢Ò vzþÁv7ð¹1 ÚétR©TRÄq¼4Iû·[ñýd«;»    IDATïñää¤ù¦7½©ýÁ~°ÿë_ÿºéû>ët:16úðe¾ê9ªûC9OÊy{Zº*$F=ÿ¼¤òöSÍOEE
Ïó`nn(¥ÙÍ'&ªuP,Á÷}¸ÿþû³5rüñÇC­V ÀA#ÕgÜxã¸P(°w¼ãÆ;ìÏ~ö³Æ'?ùItÒI'E±¦¦iÎùlEuÏó:N'Òu]¤?JÏ<úÙ.t¯Iõóý	ßo °²) x÷Ýw{éYBÕ0º;¤ Û-?LÈy ù=ïy¬Y³~ñ_À­·Þ:u§@êv»RJäº.ö}aèÔj5Úl6Ýýû÷Þ|óÍR©ÔXºtélooïþÏ~ö³öúõë;RÊ6iPÒîçpÉc}}}Ù{ëööË÷´]D	;ó>øC*ïÕß«Wøm/¥Ò	ÃJ¥çµZ-)ç¼áûþbvppp¢T*íýÒ¾4|æg\ýõñ_,êt:}6lðyäÓó<!aá4|åïî¾>ÏÎS 
!v»+W®åËÃþýû¡X,fõò)§?þñá¹çSlö¸amJ©OIRGH©,I=õ'&è =cÐh4RR«2lÛ6IH)qú<²ý¬¼ñmê¯g0l&ãXj;j·ÛXÓ4bÛ6£êO?ý´ó7¼¡ôÕ¯~µðÎw¾³ØÛÛ»s¾_1ëºn-ãNºþñó@èßÆ5u:|hÖ45MCÓ´¢çy6mj4EÆ¦ëz´téÒ¤ÝnÇ!®>¿zðÃ |!ÿ¿ÈAS^RÚ±cÇ¢ÑÑÑ~Ã0\!Î9'©×ñ¼;U±X»Ýy½¼¬z!&¢b. Îµ|0R7(àVÝAÀ/~ñDÁa°©©)GÑO)]F&ùaÎQJÒç<¢&B9g7>ôbâÉùç¯Ìµ(
%×\sÍÛo¿}IÇ0õ8Ij¢òºÛkNm´èJ¶oß·ß~{æi¦¼@	q^  Ó43Eh6R*5MãóRùèG?::00ð4 LJ)[©É¯ÌhyÒ$:1f1Ë²¬'|rhçÎeÇqÌ XE8"ER
RÉ/nÿ
ÿn§üïçÿL>ñMÑ­í6?%VÏ¹»YìFåÓ¦¥ 
J!(cÝwß}Ä4M~Â	'´|ßo0ÆüÔ¸[vfn `÷!£iB (a t!«iÚÀwÜ1\­VKQpÐÈ«)Gq¢L·Õá¦&²a@½^A$­VËÿà?8ûñüã;îñõë×?îºî¡±N§3ëy^Û÷ýR*C·«ñWL'
 6 º®»æÃþðÑ·ß~ûBaRê`YX×u¤¿â8B¡ 333ÐßßZ­FÑÛo¿Ý  ëK.ÑO;í4j§©Â	üIÝ¬ç!HÒé¤A	c<R©TþÂ¾°ºÓé¶Z-RÊØu]¤À¼¬ºTò   ÌkÕ3UÓé¼ÕÂB  Ï(ÖN>-Mã¦@o1na8yî¹ç>õ·¼åqÐ^!D B5IÌK[þqäÞ$6 ô!VýÓ?ýÓaBÆK¥KP,Æ8åKKí[Ì) %ïûb&´Z­µ©¼p¨ë:¼ûÝï/¼J¥ÜyçÐÛÛãd@ò×U¶i BÖè!DÇÑ«_ýêæ+æ  !ðS Püoì¯Ä¤î76{BÖétlJiAJ9 XZ¦ëúFãÈ-[¶¬¿öÚkj6#¯yÍkt]/Ôj5#c*ÀsssjµZ(èééAÍf7M, µZE¶råJÃq!ÔÃÁN§3ÄB-b-",#vìØ±ük®é¢Èr¦~Ê(ïJ©ó&¯àPgN^§j´¼Vþë>z]c¥0Ç1n·Ûl``îÛ·>÷Üst÷îÝ ôB¡`qº®k1& º®ãééi400 ùÈGà¬³ÎÉÉIÎ9XlÛFé 
1Æ®ëH)NR³A°råÊêºuë!*¡Lx/V}«[òà Ræ/£{ì±üä'×ßxãGÆq¼¤¿¿¿×ó¼Â-·ÜbÍÎÎjozÓ¤¦iqE¡®ëq»Ý9FRjcR:´mÛ¶»wï"¸a2MÓp*-ËÒO$B¡Gº®gL½83jR¦^f3Ñ t×
R¬±$I T*eY`&ôööB«Õ½{÷ÂÒ¥K³0)%lÝºU®Zµ*þû¿ÿûöêÕ«gþú¯ÿú®ëår¹$IÃ4Í0mÂ¨BRº®Iè!"¥¦´ÀP÷ìrü©] Àâ8vu]®×ë«¿ñoÙl6	!¶I)qÝíOö<ÓBCz5DØ¶mÜvÛm°{÷î¢úûûçyØº®#1
 ëºN¥ZÇFÇVÇÖèè¨1>>Î8ãVooï$¥´ >BHía»»'IÂ(¥.Bhè{îYõë_ÿz1æÆqÌ(¥X}í¡ì/Òu#:CCC3g}ös¡I)e!ÃütØÿQÍúB ÄäRÕE\JB"Æ?77×z¹\®®X±¢zâ'69æxëÖ­â©§þþ~$	¶msÎQÎå÷DwÝ§Eª×Ì3077½/u¦4hµZ°mÛ6aJ]×yáÆkç'ì×4í clR:£iZÒIg1Öj·Û­ ZeµmÆXÇ²¬¨Ñhp ¾ïK:ªZ+õjSé§mÞGÐuÝ¬¿MAÒßÇIà(¥qÎÎ¹uóÍ7»=ô»|ùrwddDÂ®ëç\¤µs÷ÚÉ°CcPþ¢(Âº®c!Bh!SQ¶m{ñìììêÏ|æ3kÇãX÷}¿ýþ÷¿ßÚµkÃpRª|låBäÃ©[à=©Ï a¨iV@-Ù·oßÚ+¯¼ò)e sf%ÌëU=Ý=ØÌ?®dåçjÝªEun©:G±Ió¡iùïïÃ1Æ0==õz=öØcdË-z­V+ôööËå²28ç4í#Q:8U,kÔu>+¯K´ÿôþ`j°A Ðyä=õÿÂêCÎ_öAÌ{C¬ T,1Ë² IØµkìÚµ+£Oº®­V+c*ÉJRfûÊO*Æ;5UãD¶m·-Z4 Í4G5°Y
ðKá×u]
!D½^LÓlBjo}ë[[W_}u877'!Rªòf­já.$÷9©@[U«VÁºuëà{î§ü]ÔûêÞxªÙÐ4-}ÉI1çPJjµZ´,kèÒK/­¿óïèïïßïû~Õ4Í0ÖÖàì7,"T(PÇ¤Ñh0Çq(ôÖl6	Æ©DÏÎí%õ<44ÿÌëõ:x'×®]Ë_õªWgyf¥··÷Y)å.Ðs­VkÊuÝz¹\îø¾[%|ßiBsVàç /$¥¤ `	!zïºë®þð#k×®í±öîÝKgff°:øÔKMÑ%K ÓéB¡ w:¯Z­¢Ë.»6º}ûöàU¯zÕ¬iõ$IÎyr¸¥V-4ÍÝW$Icì
!úï½÷ÞÁíÛ·Ã00Æ4½¤@1ÂòfµÝ{,ÿÕï©µþºYÝx¼dDQårN;í40M®ºê*¡ìëëµZ-	Ã°sÜqÇÍ~þóßßjµf\×m@ ô×è÷gÿ1$>xCÓ8BHqtt´ff¦h¦Çqæ÷ÈCaB½^Ï¤¸y¿\U +Ï¬ü¥²«B_MÛËå2ÌÎÎ ÀÙg/ùËaëÖ­`Û6Ôj5ð<LÓÌ^U±aÆ
 yIú¯¸âá×¾öµ$Ð4­à7Æø¿³ì ëåÎu­S4)¥ %MÓâ8¹ÿþû¶lÙR¢¨¤ëz_§Óéqî¼óNSJÉöîÝKÒ´hD¨T*àû>!®×ë¬X,ºQÁ^Èyä>]×Ic¡iHÐøø8Z³fñ<Ïã¸üøãÛ¶íH)Y£ÑÀ¦ê8ÅPU `»Ýg37bï¦ç'áùs):ÕJ¾ª9T£RF£!Ûí6ò}_ú¾Åb§Á077¾ï£ÞÞ^$	JÃaY=y$IÆ~ö<4MË¼§T®ëtvvÖ¼é¦Ü³Ï>ÛEé³|±y¦ÞPÍ `H)¦-®×ëGmÚ´éè¯~õ«GÎÍÍt]·É¯ýë¨§§G»ækÈÙgV¯^-{{{cß÷mÛõ$IBJ©ãX1a0ç¯Zµ
¡þ=1F 0/^fff2µA¾Rõ<+JÖd+f²ò¬0õìU³ä8
Êß÷¡Z­czè¡ì¬zÙË^çA­Vß÷¡\.Ãðð0üèG?Ë²àsÎÎ95MÓ îû¾¡ëz$IBáejµ*t]O:N§P(Ì5ó*cÌÏ3,ò5pwàI~}çÿ'ïµÜ9f @qll¬o||¼ÀÓ1Æ4õÑÇÔQõØÍ×2ùZN9ªJÙVÙ]¥üm£]ÝYJâ©B9ç1F)¥!5MÇ1Êå2²,k^ë!ú«y^`
ÀRµzoò
SjTJ Ð£(²ÇÑT^¬>%MQÇq@J)Ûí6¸®+BR×uÁ9O$ûúúB)e»ÓéÔ	!UÐìgQÝ°aCõmo{[}÷îÝËjµZRªç ^õ <YCíë|¯@ÅRv#=ôÃI'I@µZÿ÷ß÷ÕZs®iÿ¹Ï}nö­o}ëÓNçÙv»=²¡$ 0 ðÍfïÔÔW­Võ(H£Ñ@¾ï£ññqôøããÑÑQ6==mkVÒu½@qeY%IB0ÆD6XÔûWCr¨6ÍLyúð¡ $ `ÇqP«ÕÂ¦i$IXÇÆ}÷ÝçqÆåÛn»­øW¼¢E+¥4`
 !?ã8 Ü~]=²ºP1FR,åIMÓ\ÜétV]|ñÅ«ÆP¡Pp0Æ""Åf³Ùq]7NÕ2r[½öÛ©²B°&I¢aÖj5½¯¯¤xïyÔ])¦E:êNÔî¶¨èêïgO¨ÎÛäÏ¥Þ	Ã5xýë_ON?ýtãúë¯/mÞ¼nÝºµ|åW.zå+_¹äýïÿþã?~/ç|b2z;«uH)9üFÖýáTÅ£v»t]§º®ÍfÓ~öÙgLRÖª¹Õ4Í&X±Ô¢(T«Õ,u.MÇQçyÙNM@¥i©§3=öØ¦çy h¥þ
 É^©WEÇq¨iZë¨£jÚ¶4Ís.R³T¿`·cóõïÒ¸åîÍ pì±ÇÂßøFØ±cT*ylCµå=Ê|\J	iÊ³LUêº®Ñjµ¼¹¹¹ÞÇ¼¿¯¯¯@Ñã8Æ,ß³zo(TÒ.¥§a.¦aE]×|ðÁánº©1Ö$I¤B>ß)×¨Ë;xúé§å¹çH)ý8kaÌ¶ÛíeYMP  ©<:¢(®ÞÚ $G~ö³õ1ÆÊJÅ>î¸ã´¡¡!üØc¡©©)R©a@µZZ­m$	Y²d^*ÀqñÀív{s^LÄ	äáq¸¼ß¦I))!Ä2£<===øü¤WÓ4¢QJ±º0Òd»yËn 3P¥Z%£jµZ  )û¡X%
8RA,Jæ°~ýz°,`bbfff $+W®ô¿úÕ¯6Êår!A cª!34V ªÿT Î9¢(]×½íÛ·LÓ´mÛÖ¦§§q
JÓ4\×Í`euEQfg¡¦*5/IÈä±L
Ül6¡X,BpáÂUW];vìÈÂAòþEÝò=Å:r8Ccìý×ý×Ð^¸lÑ¢Eû8çP'e8dÆøæýýæPÌ7 ¨Â  OJ9hYÖ0G~úÓ®Ü´iÓÈO<ÑÇ±mYE¥i¡V¯×çyØ²,Ç12jµpÎ¡\.C¥Rz½lÛÁÁAÒh44Æ799É~øÃmÛçy1&u] ¢»ï¾#¨ã8F½^· 0R©R	Åy/n¹[Þ¿K±ûó aéözË¨_+³vÅKÃª1õz)ÉhµZERdYÄ#Ïó Z­B
¤6(¨\.C»ÝÎãþã?þ#(§6Ðét@Åb1K4#K¼$ B¡@8çúC=ä%IRb9s-=ÿ^`.T§«XJ©ÀãÁV«µêÛßþöÑ\rÉZ X²lÙ²¢çyf©Tb©½K½¯áÓþ4¿öÚkCÃ0Za$©l®at)%ãzGR¯¯¬Î'ÿvêR¾zÞ
ØM%Çó+õµù UO0Æ²¾@­)u¦A¡P  ÉÉÉ<pà +Æ íÎ;ïtÃZµjA)]D))¥±iÉää¤LD6MÇ1÷</¤Ö^ñW<744¾ïGI(,þçÆüä ¾DMß÷{öì)5{``@ ¬Î(UÓ«ó£;=3ä5uÇ)ïÉ030-CHmc ÃÅ9ÏjRå	Ú °ÃaÈEïÒ0N$ÕY¨öÅB 1J×<Jû­Õj9Íf³¬iÒR¯ìäE: ïûWaJÚ®ÊÂGú¾Ï1ÆqDQÔN¤U,k>øàÜ?üÃ?4¿÷½ï±aP1c!Ä(¥JF+9ç¨ûLPµZªç«÷×­[Ë/ûï¿öîÝÕ.ç©EbÅÅ_qÆM)åëº£RÊª"J oÉ%f*ÆiÝÃ@i133S¼ûî»«ÕêÐµ×^;°yóæÒqÇét:V$¦iDý<A 5$WºòÞ¦©2©µë8©×ëÈ²,ÜÓÓCZ½^·~ò87ß|sñ´ÓNëÝ°aC!ô¬r æRFy1NR P.pw¢´÷aR1¦ÏÍÍÛ¶5]×óAÎùª§zêèÿøÇ+¥}SSSz»ÝnÚ¶Ý(ÓB:ç<Ìÿ/¥WÅæ>à$IH$ìÀ H:|7W/Ó4¡Ùl¾  ï³ú:U¿t'^çïÀ|ø¦"æäê¿Óý(¥xÉ%tíÚµÖ¯ýk*°wìØQÚµkWïèèèÐÉ'¼ø¯|å¾N8a/cl¿b
 ê ÐRú)§¡ Dw¾ÅòyÓ0eY,Ñ÷ýr­Vs]×ÕBD×ut¢îxeU(P¶mg[êý;oÎ§«¨©'HÆJÁi¦ :ã3Ú±f&ùèt#À)À )¥¢Ýn'aãçys¯yÍk7ß|s  & PuùªW>çÙª`ÏOæºc²EîÊVÏwË-°sçÎ¤P^*¥òPþù@y©4§45c¸ÑhÆ16GGG- Ð0Æ$",P²¹ÂPôûw9¨º¦ê@yi%IÒF¥?BÐf³i:S ^qÅG|å+_Y|ÒI'ï½÷^ p>±1/ÌOYó¬1ö÷÷ÃGn¹årÇw°K.¹DBÇq°´Z-¦¦Ê_1éË¼xzØa1aés'I7³X,²gyÿå_þ%mÛ¶Á¾}û225©TÌ¡¡!psÌ1¬V«<ðûÔSOO=õT¯Óé®ë.È¼è^KÃN/(Åþsâ8î«T*Ã?ÿùÏ{
Ç1Ã§ÉHíS ç/¼TBù¼©©´ÚÛ¥R)ÛªYSYUD«0	åó¤&ìÕj6mÚ±{\×i
£âo|ãi·ÛBÈ E1)¥ÿyodYY¿ëÙï=÷ÞÞ§gafQQ¢¸F© 1eB­¨¥eb4ZÊ¥ Æ2-(Ä 	EÈ2ìËà3ÎÒëíî»ý÷}Ìù\ß9ô ßúEíª)îÛ·ÏyÏgy>ÏçyrqøK±Êó\;D©àª8çGLÐÙå³,Ë¢Ö~üã×Ç±ò<gãà0Ñèè(Gçr_E¨ÙlQHBP«ÕBc4;;;h<À`)ÏsdÛ6rBP³Ùä¿n·î¿ÿþ3~rrÍÍÍ
ËÕb	>¿°°@¤lÅv¿ßo]vÙe+ÿéþi%cl!ÔUJ¥sç¹ v®÷ûûö:>Z­Fûý>µ,Ë2M³Á¤ëºÇ8p`óe]¶îk®Y5===Üh4<ÆÑï÷yQljjîè8CëÜi"ß÷ÆMMM!×unêa )%Í²Û¶McRJpÎU¦
â5»^¯¥$CjÛ6+5g@§j / 5BhPéÀ½G¯Ít BÐXÁ°â¾Ûl6Q  c¨Ùl"Ó4Ì>Æ
`0\vÕëuÁà¼÷û}djµZ¨Ûí".µH·ÛeCCCVE»ï¾{ü3Îha§Kù¼tÑEcõÖó9'Uã9}E®¼nD)EË R:y±úæoÞò7ó76nÜ¸j||¼e#`e§z
gYFJÁþÆSO=_xáÑÍ7ßÜïõzØ4MsÞå'¥0<å×Ó4õLÓ4çææèøø8|q[×ë­¯rCÌ×^}ÛÎ~!Ægw q ,hM###hqqq0Ø v¡R
MLLÎèÁÉÄÄòÉ'½EÊ=Ï¢Õj©©©)äû¾êõzjbb¢Jò<ûøÇ?.¹ä±¥EÚg¥Znxû/9oíX»Ã1¯ßï·~üã7b`îÁ!¯¡÷nÀÂòü\Òµqá}@ÿ »·êÀtùÜ`8«enTÝn7Ýë^:³D	K3q´gS¯£ ¸ÒuuWcø90¼ÓjOL¡cczzÚëv»­±±1/Ë2VµZV-Çz>RAË}ýr×XÒæ²ê«Ã¤IQ(¥r)effB)?õ©O%guVöÿøÙ®]»ÆZQys£(
Æ#åJ,Öïm5G@jØ|òÉ'aØN9å4==víÚ5`x³q÷Ýw»_ùÊWï{ßûÜf³)£(ê»®ÛÏ²,¢8ÃBRJËÚg	L9£^¯×ÞñwdY¶â¬³ÎZ¹gÏÑË/¿|äæosgÄ0Zçcõû}Rê>â~¿?ØÐk*õ-01BHQJgYFÔ4MÞn·Ío¾Ùý·û·Æùçïô£mø¾¿¯ßï²,«mYV§(!BcLJ)Æ0#RJ.¥t	!Í~¿ïñ¥¥%W)5Â9_}ÓM7múèG?ºq~~~RZ£ª$Iò6¦iv¤ºöå d¬Ök/ôÀ{èày×¤Æ0¥¶ÎLÃ0ìn·kìd½´>@Á"Ü«qZ¾]¯Yô!Ô+úêo5^B¼Ð{n=G vÅCO>ù$þèG?JLÓÄµZäyÎ=Ï3ëõºsÏ=÷Ôï»ï¾¡6LrÊ)+ÿàþ`êÕ¯~õÁz½>O)],bAJÙ7#BÅi¦¦ifyç1e0Cñ@A©cU&ã¯ëY	NP¥¤µãª    IDAT¦©ÿÌ3ÏÌÌÌÔ<Ï3MÓ¤ab)%ª×ë(MS´¸¸x®L#àðAÃb:³v©uJ/õø^Bãn¤2M³h·Ûi³ÙcQQ äK±Ï@u Õá­XPJëõú¡×¿þõs?ùÉOÆ(¥^eÜ¶mR^c¬§Ïµë¿ÜðÑ
ýëõâojj
µÛíé$S  ª¬*Xç4$ À÷y PJ)¹iÓ¦ÁÔôÿ^h?Xu¦	vNÃeQK+R¼hËØ4MeÉóû¾ïeY6çùÿøÿXñÓþtxýúõîYgÅo¿ýv+õcHNe!ÝÉO/æàÁ6}ìcÃo|ãéG>òónðßó÷yæcQõ,Ëbã$RÊcæyB2Ó4eìt±Q,ÀI0J©¥r÷îÝk5M¦)Î²L=üðÃh||\­]»û¾¯Úí6Z\\Äcôò¿|àê6<<¤¸ÕjÑ¡¡!>11a_sÍ5õ.¸ åû¾$QU¿1ý¥ÿ+îá_Bã8¶¥MBÈÄÍ7ß<Æ9¯Û¶m"h¦¸×4ï²ÞNo`!Ä Â×À³XËûåñÇ HQaß÷ñÂÂr¯¹æÑóÏ?ëº!ä	!æR=!DÓËrª.8ç¢R²d3êw©YZ ,'ä&¥´¶°°Ðzì±ÇêiRJj&Áãv»£¢4MQ£ÑH^a8Ð»2Mu:´bÅ
d&B°

,Î^¯70uü§¯< Iº¾[uXQ
^ãrah¦YÿÞ÷¾7~ñÅ¯9æc
!RQq¸ÃåYT_Ée<$¶m³ùùychhÈãØRNz·å¾ûîÛöío{ÓW\1j»QIÐZ­F  J)È¨Ùl¢ùùyDAA µk×ª¹¹¹#ô´Ü1Æ1KÇ±r]wW;Ba`2!p°µ}Ì,ñ5|¾ª{­ ^¨ëÅ=ÆºQQQºMßî¨Ö$`
kóz­ÒëõÌ3¨Ak ,Ø2à£f³J\¤M1¸wn·kBj×\sÍÐé§ÞB8%#å£5R¿`©Æ@ ³,·_Þét¬V«eI)±É0×oÞ¼yÝk_ûÚµZ­111á$IÂIér|ß'½^+¥F£1ôóÿ\lÛ¶ÜrË-MË²VdY¶H	8ç²È²ÌgM `Õüýÿ,	ýó:rü(F¤ª	×&C$lþèR¥¾Râr%æyn*¥h¦¶i2ÏsÇ±Ey+)%j62IqÖYgEwÜq:xðà´aNEÜ4Mòë@ßõAÆ2&oõß8NgìGiRJí,Ë¨eY¤\pU_ÿ£KTYÃ fYz½¢¢ÅÅEäº.j6hnnnÐSê¯U5f)ã*^AI_ùÊWöMÓìgYL+u´R_g¯Ö*ÀRÖ­Ð»êh¥NÓÛ¶M£(²¢(r¤¦aLJùNÈJÛ:åsÃ*B-,,ÈÑÑÑìu¯{]¼aÃàßüæÚ+®¸bÕÐÐÐh¿ß¯¦i+¥xe´üAÖäY,OzGA½^ÍÏÏ#)%È>¦Ë!7í÷ûiõK/½tâ¬³ÎZ)¥vgQFQ5òBCYKã²§¢BS)5eÙÁõë×ï9í´Ó&n¿ýö\pÁ8WXåcÎ9ït:$IÒjµçy¸ßïþT5mµ¾p\ÖRJ;KÄÀùÒ¾äýèG?j}üãøó?ÿó½¡ýý~ÿP­Vã8PJ¥RÊcµ4VJ1BÃ9`Ým·Ý¶âÜsÏulÛ®íÞ½{üË_þòë®»nE¿ßõ}¿Öï÷i1!$Ý¾}{ày^ÐívSJ©(×§^,lg¯1W²3aõgYfqÎëA4wïÞíZe ýu-R¥õÞWÝê3]ýÜóäõúE¯àgÁ¦k)ñKYbBÐ4MÂãØyâ'üÇ|è?üáÊ·¾õ­ë_ö²-¾êU¯ß´iÓL­Vk#:RÊ%¥0CPÌ9OK§{Yöªj2¹ÜêósÞ¢(cah»®ëÿüç?oH)Ý4MyERÁ.@½^?	:ã¥V«Ö3`\5Hd qÎ¬BH&åÏR)È)¥áÊ+;èðú¯¿$3ziõ.²kÆÌg1#¥\MiH)M×ui§ÓÁº[/½h«ºXýº °öþ`èÉºÃÜr/ÇÔµV*®t°v+¥¢6ôÒ4R9cæz_+Bç¸\õ¤y³ÒA0Æ4MSeé8§Ò0q)~Ncf¦ÆØj×u×ñ_\±nÝ:?ósû=ûì³1èëÀ¹×õ«G% wíÚEzê)Ó²¬ÆVöz½¶ã8¸×ëõkµZEQ¿^¯Ï+¥æc}P0MC^óÄ0¡9==íÜtÓMtllLdYw:B¦¦¦ÈæÍÉôô4" 5kÖ@°Ç###È²,äyG{öì![·neÛ·o·¿÷½ï5o½õÖñ·½ím-BÈc,("×V_lÏ/.YD)epÎkãñÝ»w¯¾â+ÆB^¦<ÏsRÖ]Qµ\$gWÿtÐoa­Oª ù¾?Ð¬Õj¨Ñh (PE8Iäû>m6æ={\rÉë¯¿½ímo?í´ÓfÆÆÆ¦ÇYPJ-E±1î )e¢*¤¢,²¥r@G×;èwoExÐ(EÁB6Æ¸ùØc-..úJ)«ßïÓz½B¨Ýn#×u¹Ñ÷}´råJ$¥DA z½z½Þ@×¯FSSSuÇ^¯úý>ò}ù¾?pÜXÙh4P0PJZ­ZZZ:"îWÍ /Â$Ë2Æ9wæççn»í¶ÉóãÆ8e	¥\ý{þR1ÆjµÇqÃqÉ(¶Ü~ûíÇ]|ñÅ[~úéÉV«å3ÆìfÛ6µ,L4ÙjµðÜÜ¬üâ<Ï±ã8hxxíÛ·5Ml)}X Ås/ÁÃJe$(IÔjµPe äaÃ0mÛpæ@ËMgûéçc¹<®ëÎê=ÄêºÎæ"Uçs=>Âû P^Bðú é`R2ÆPÇ¤4t cLò<gcçæoneY61®K)ÛBJ)@SLwú{¾@KpÁeý³,£IðÑÑQ7IeY«²,;&¢c¿ùÍo®1£µfÍÇu]¶gÏ^XXÀ`´aÛ6IÓû¾ï1Æð¾}ûÌ³Ï>{øüàºO>¹_¯×CÛ¶ÏóÂò®Ùµk×èêÕ«ÅÅEF)%p®ôÜì*=nè±î0}ô¯a®^#-g"°Üðä Ô_1úý>jµZxqq5"àEQ0J©l¦jlläÆ¸Ø±cªÕjöÂÂ)¥äÀEGÑxü}q¹¯jjzxdÖççç³³³n£ÑàqSÎ9Ãp TuÅu PgVb`Û6üÊ+R
-..Áª©þ©ÊúGfYlÝºuI)Õ3#)â9W uö¢¾L? {ô¸M½Î.Ç170Æ¬/z¾þOÐ¯Ù¬ÐÀ¥³)¥ í,'&& b×u­[·.ýýßÿýìé§¾ô¡}hïûã±¡ Üz½n´ÛmVê{âjß¡¯MÂçlÛqÎmÛègAa1$èõzÄ4MnYÛétF.¹äÕ·ß~ûÜüü|dd$¯Õjyiç\DQ¤ªWåµ å :$tBÒ)Ë²¦O=õÔÎ}÷ÝþùéO>¹!Ô¢º¶m¦i² 0ÍÄqü¬UUð%¨¤RK×uÊ97ÆÇÇ­ÙÙÙúßþíßÜyçãøÄ'VlÙ²ewû<ÏkçyÞçGQeiÊf³Ó45z½^£Ñh¬¾÷Þ{ûÂ¾°qddÄ¿îºë¼nº©¹gÏß0:BÈã¦YäyRJ{ï}ï{zCCCI¯×+,ËËÿK\Ó{ Ê³	!!Ä£(²=Ïka8¾°°0ù£ý¨$Õl6©Ã`}¹óXeñVqúó¿AJÕÜHÇ*ªÀåô	µIù9ä,Ë¨¦ImÛæR³×ë9³³³+®¸bdxx8:æczÇwÜÒ	'°´mÛ¶Åc=vfdddNJÙÆÏ)¥Ó4í¤iåy.J&«Òñ4ý9}>@úÉO~Òà»J©QÆØ¦øØrðàÁ	P-CîyIÓ×j5Bi>«X]0ÖÐB&×zá hø õÉ!DÎ>c	!zë×¯?ø±}l'Bh7Bh!sì¥¦_×1«£TJizç_}õÕc½^¯aE)eiFU	²úÿòàWQãå¸G:³IOü:eZ/þô`hb*î9J)¥¤:Ó}ÙË^vàCúÐNBÈ3ãÎyB)P¿P®FÀXRâ²fyÛJ©ºeYÆX½ßïûEQ´LÓ¥®R®ÄORJ'cEQLE±&ãc~øá­üä'7xâ«wîÜÙÊóÜ¾óÎ;é={ÈÒÒÖ5ôâd¹"©t	Å7ÜpºöÚkc+¥ð#<ÂÎ9çsîÇq¼rzzzå;Z###D)c(¤Js|Äôð)¨÷z½áC5víÚeÙ¶M!$"Ün·Ñìì¬¢ª~¿¯ ¬ÏÍÍ!kü(Û¶åÞ½{ÓùùùÞ¹ç;Ë9_Èó<"äË=·ÏµVú[Ln¸lyemÛcÒ-7ÜpÃ¶o}ë[kÍf3cp©ÂHs©ª>'Ë1ru+y`ÔVõhªNÐúsÏ¾²¥³	MÓDeá0±R
çyN1ÆæO<á=øàÍn¸adÇ£aµZ­áz½^£º¥&¥UºV¥7)×	ÐöõF~÷ßjÀBX±ÆxÝ¿þë¿nÝ½{÷Z!D£ßï¥)fa èfff«Sq#ÏóÐªU«ë ¡ÛëõÐøø8ºøâÑ9çèàÁµ uAkvÐäÏé>¤&_ÓæÂõz}pnÇÓÓÓùgÙBt)¥	*µt« ßGö:lÆó<w8ç~eÍ?þøqøÀ6<xp²Õj5¢(2ËÜ-³,¥¹B1)RIQea©²,S¾ï«8%BHI)aÒ²,yØüíð×ñYÜJÉJÄB<66peXKÝ,ÃYA¥Óá aPO?7úçtöä£*(¤âPTCàsz¼5áê]g³ê±¤)LÓ°BG8×^£:`)uNaQåy.{½^òö·¿½ÛjµæR)eBÐiôæáùúõ,7H¦Ì²,+C?Ë²QÇqÖÌÎÎ¾ìÁÜö±}lÓõ×_¿bûöíþØØ¹sçNúË_þ·Ûm¼wï^BµZaNô¤(
æû¾wË-·4¾ûÝïÿà?½úê«Ç¿ûÝïN\~ùå+¿ño¬úÿùá<Ï=Û¶9<IÅUðFoÐ; x¡éÒ·zà~ÃýF¦>ï×¾ª¾FZ9LV¯^6oÞ À%© ¦IJggÒh4HQdllÄqL\×Ås¼ÿ~ÁêõúüÞô¦½Fc&Ïó~9`/dù"k!da²,[{ÕUWm¹óÎ;WRJë!CA4ÖèàyÖëjC¹I×ó¿SJÑèè(úú×¿9æô³ýl0¥úÐûA*ÈÂ0ìwÜq.¼ðÂYý2_qñVÕßUJI0Æ¼(BhâÎ;ï<æ®»î@Õ0Æ^MÅºØxu [.¤²("<ùäçN>ùägÒ4Á«<Z÷Û8czÝW®»«R^KfY&ÇIûý~¬
]×í%gyfñÀÈ]»vQÓ4YçÌ4Mç9 F¿U©x¼_Á Ì0Dg0c:tsÎÕ9çSìß¿?÷</±,+ë÷û¹RpÎe$Ò01¥>±TJÉr­VpÎó4MÓ0Ó4CÃ0âF£½êU¯yËûï¿Õj5¦)-W¥	È6	k ¿:¼ÂÃeFµZ¤i  ysëð+¨AP¯Õj®çyeY¥ÔÃÐ*µß½,ËjÒF­VKdýE]´í8æûßÿþª;w---á÷û}Çu]^êË¥¦i.nÙ²eï_ÿõ_?Ñl6÷ÄqÜf%¥¶©ª:¿X>tY7¨CI)0.ç¼EYeÙæ/|á[¯»îºUÍfÓÏóÜÄSÆ8zaÆ¡s:ø§1RV	RúöbdFUÓÈ{zM¤àgÁVWynp¹>ËûH¢("Â9gsÃq+Ë2oÿþýõûï¿¿ñ³ýløÁ=xðàh»Ýs]·åyK)5Ê­ÈB)UÛYGÅn¯,3¦ij¦éOMM>øà,ËìV«E)¥$I¼råJÜjµÐÞ½{
0ZWQ4*ï³X	P´ÃÞ¥²Ûí"Û¶i*C)È^ûÚ×¦ivÂZ­vÄüK2+N ª(
aFB)íù¾¿øGôG½Ë.»,¥4M¥ëºtôÀ ¥zøu4øhëÀU}ªHN[M:º¬ùÕ¡ÁÚìöþdQE¦ñÞðNçK0Ë²¼Õ¯~K íÀCaBZãBRÊ)Â,ÂÊ²Ìï÷û#q×1Æfç¬Ýn»îºÜxãÆÂÂ;77×²,«uï½÷6mÛvÇFöìÙÈ÷}Ôï÷Bh°þ©4ýúB²RâF£A `iºûöí»ðÂÓ4'Ò4-Â0Lâ8ýÎw¾CN>ùäEJi7MÓÄ4M¡?§1UHÓ4Á/®Y³fßå_n^{íµñW^9ùÈ#LX5466æÅqÌhQtß¾}Ìu]ºoß>âû>9õÔSÑªU«ÐÌÌ:é¤ÐêÕ«Içìâ/v®½öÚ¥tsî«1t¿È zØ0V-ü¯ÿú¯QqMaPzX«¶tAôB¾ôy¹çærÏê
> ß0 çoÇ´lÖ<BñôÓO×öìÙ3ôÀßzë­áÆ»'tÒÜÙg=}üñÇOÕjµE)eß¶í²çy_)9QJ³<Ïó(rÇqBµºHíï »#HéXBïØ±£©²RÌu]ÐÌAµZíµÜ(ÐO<10Úi4È÷ýko¿ßG'púÌg>N?ýtÄC¯xÅ+çyèúë¯G³³³V© £
Ï+ü0ô©²µ¡!¿sÎÁ\ÃcÇÝ»wnÞ¼yHáB:e±)@Þã÷ý¢EQÝn×&¬Û¹sçO|âëùË_!¬KöXBeÁãÅÅEÊãy8¹eYf½^§(CQ6j*ÏsÐv&ßÀB¦¥V-s¢ë²)ºD 8Àæø±	¶;ô5òêIÍzÑE½®U
ç6@3LtJ)äû>¢[X¨³õ¢~.l@=Ï¸C^JrPJ©Ñívëwß}÷ðúõë[a8!N)M)¥ÑúýøuÜÊAä¦i/--ùÍfs"Ïóµqo¼í¶Û^ö¯|e}¯×÷<Ïïv»æ>Hî¿ÿ~!n6hddiëgØ÷}´k×.:>>ó<'as'Ë2ÑétDQeYÅââ"iµZf½^·$á¥öà(°µt³¾*ËKgr³MºÁßÑê¾*¨¿fUÛô¥A³ßï£n·FGGÑÒÒ÷z¨^%.Ý¢QQ"W®\IÂ0d{÷îå«(
®i ¾ÄE¡­tØÅÜ-¢qã7ÖcfçB$4±:ð«Åt£3Ã0²5poAX)®¾újô_üb ÓéûþÀ\gÓTú"T«Õ¤çybqq1}ÃÞÐ/]nCÎyVÅsö~ºäJU*úm þ¬þb !gYó<'`!³(
nA¿añçê}tí/]§¹|&¥BÅq¬ciB(ã8ò}?<é¤z·ÜrËÒ§>õ©ä_þå_
±*]xdd&X¯YuÆèëzP³èòRäº.¢pÎyç.!døóÿüÚsÏ=7Ü°aCÒR¦çå!A)s+Î ­ à$Û¶PN)M ÈLÓLN8áþg>ó·¼å-Ýw½ë]1BhB)ÕpÇRqÏóHi¶õÄ}}0q¯¬©p	ÆÃ3ÆRÊÈ²Ìê÷ûÞO>Ù(bmÛm×uÛõz}¶ÑhtBiQª(
.¥ôc«6nÜ¸æ'÷<ÏÃÐ´mgYFÍ&îõzpß¢(Úþô§ú¾?%¥ì`ÓÒ1V½ãÍÒxclfYæ1ÆcQm¾ôÒK·\qÅ+GGGý$IÌRËE«µ­þêì^¬tË±ÿª¬9}p¥×@°=¡­/b#ä,}#âä¹2.bóÉó2ÆbeYÒq+MS7bÇÙý÷ß?jFpÂ	'¬¾è¢Vyæ{×­[çE¡$)|ßRÊ0³Yÿ9* H)¥IpJ©wðàÁFen½^7¤ôÐÐRJ¡n·; u×ëõÁJ.ªh tÚµ°tê¸.R ^z'£(¦ifÇ|
MÓ|ÉºàTBqÎ%Æ¸ Äy÷Î=÷ÜÞ¥^VïRªP©ùS>GÕ)tqô\ þýzA°®S¥îW'åú=ÖwæuçàÒÉPd)ý·¼å-EQtÇKæûp`6QJ1±«ZñøãË-·¬k·ÛÍ$I¬^¯gu:!ä»®ët»]¾gÏ8N§ClÛ6&&&ìKaîÚµQJmÛ¡Ãk~ÝnwðP®°Ë1*Ã@Èu]R«ÕB~üñÇy$þððp!$aNg!TÇRJç9¦ârÕ
AI0Æó=ÃÃÃá?øÁ.ºhåW¿úÕuW^yåêýû÷AàBß÷!5>>nÍÏÏÝnEA¶nÝJ=öXT:9uëÖñ+V¸>úèð®]»V¾üå/ß§'å÷YnÀ/ý1¢aXcÿ©§úÉO~R§Zý~N*é¹Z\èE¦>U¯
ëëº©zªN¨`ÂnYÖ`%aÐñ²,+¥TeT)ËAÁ³9çÞþýûóÝ»wßu×]c7Þxãêã?~ñNèmØ°¡¿uëÖ¥V«5ãûþBh1Ë²Å4M{ó¨V«RÊa(0Æ¢¬ÍÐK8&¡Tºa780¶´´Ôìt:vÙØ<ÏÆÙ0èð<Y¢(¸^öz½AnÔÌ	Ðððð Ø¾};Z¿~=¢¢F£1X£Xý7ÅÒDià ¬k¯UWúôó$	.H)yÇîm·ÝÖ:åSF}ß÷	!¤Ì©âÿEíw¸qÆcccFeÍC­xï{ß;¾k×.·(
Áë®]»Vg+W®Ö¬YgsÕéth©jìÙ³Ç9pàùÔSOyQÕ:/BBrJ©4CÅÝ@IkÖÆØ,uÐ,Û¶¹i4Ïså8õa`âp@ÎÕ_¨« ¿Uz¤7`Õ9 n:3ÜÌõé;4Õà\ÂÆ{û¾?ð;èl5Ý½¯\EÔívkÇ:û(¢Áô>Iâû>ïv»Î]wÝÕz÷»ß=lF½(vY¨8øuàßQ¸túz[õ9    IDATeRJRÚt]we¦<xì5×\³þ;îXÛëõF$©GQdÞ{ï½BlÛè¸Bí2c|ÒI'©_üâcY¥,ËR¥;¨,TJÉ¢ åð WuwÅjm¡}À[ÍÇú¿ÊÔEÖá5 9®[È4Í¡Ëìì,ZZZÄG8Ã°F0ívaÕüü<"!ê8ït:n©'å8ÃKÃ¬oü>èÿéÍ¯>Ð,÷-P£Ûí=óÌ3J©eÛ6KÓX?ÿËTè} 5Z5:@ÃÌÞk¯½EFGGQ¯×Ô*º§>\<Æ9WcA)MN=õÔ !X  ò|¯ÁrÒáüÃà@gÕiÈDÁ:d'IR³mÛBXè7¸ù\ý VØz*Iä8(	s. ÈÓ4Í<ÏKÉ?üaõW¼B}ä#A½^¦IÚí¶iÛ6ÕkÕêj4ÄrÖÔjµl	|-°{Ã0ÄcÇ1áq×ÆèûßÿþÞM7ÝÔæw§§§³V«Ú¶]$I")¥ 5£*:£ª(
¥ÂÝnWÕëuÇqáyBdý~?j6SN9¥·sçÎðïxG²gÏ	!D+Isnöz=fYx9·{¨ Ï ÕívÑìì,îv»¨ÕjÑ(eYRÊ!ÆÜÜãy^«ÛíSSSý»ï¾»»°°ÂÖÕúõëéðð°µoß¾æ<0±}ûöf¦ÖO>É²,#EQ`Çqi¢(4ã¥.¸àà¹ç»7ÏóiBH¯4x¥ z±54ùZêYÒicÒµIl¸ì²Ë¶~ñ_ÜdYÖX¦¥åyõVà~èÚØú©®ð.'-PÅ<ªý5BhPGè½Îá+Ä½V®¿¯Ò)j/ÌÃIP!#pß÷%çÜNÓÔ¢¨¾cÇÆ£>êoÛ¶Í½òÊ+Õ±ÇÛ3M3H$UJa¨ò÷RGóxN °(
l&ãØÜ¿¿½zõjC)EfffHexbbõz=´¸¸8ôa&®¶mÃÅ_¦v®ë"Û¶Ðº±,ëÐö  iª2äaD¯|å+ûI±<ûOP!2MSaF*¥ìmÙ²eqõêÕ½éééb!¬¦9(«ºç8ªÉ½ºã®@Wpy_î$Q-Á«!$KÑêèøã_\»víLeó!TÈÃ¿ÔÀy J?¯>°¿Áû¢¯WQ±¦ióÎ;ï\ûéOz+¥tÄ²,sn"¦3Æ(cLÁQ(çNOOZ­F(¥8Ã 2h¢`¹j"¡S K1\
©Û¶$Ièðð°1e1¥T0;;ë¦ijRJ©mÛ@ùÒ¹OëÒ0"Ïó0CI0ÆaÌ\tÑE³ïyÏ{¦¿ÿýïPJkµZÍæ{<ð@óË_þrsrr²Q«ÕÜEQÐ$IÈêÕ«¡£Qçw^ãÐ¡C+¶mÛ6é8Îtç½@%?×óü[Np°nÇ8ç6c¬¾{÷îzN­VcJ)gu[eR,W8í¹ÒåªMfU[gØ6!9@ùp©ÕBÊ©%EÑ$I¸ã8²ÙlÚBïÑGm<øàc¾ï'­V+Ùºuk°bÅÅã?~é¯|e{Ë-Óõz½ZÈó¼M)í(¥zº=ú+ßK9.ñk"ê?üp3"OJiXEÁ±Û²,Ôh4¬~¿? 'êõú  à®Ýnh;wîD+V¬@¶m£ÅÅEôè£¢(ÐøøøgBÔï÷úã<kuS×3ª2 ²më9Äu]Nqþû¿ÿ{øÍo~óäg1ZÅç<<l¾ËßQ}ÇçÝ;Ãsµ´´Dÿà?È÷ìÙS¬^½zqlllþsÎI·lÙnÚ´)X¹råR­V[¢Æ!Õívëº<ãZ·Ûj>$ÃßúÖ·>õ©O1ÏóÒÿ÷ïaõûý¼ßïË¹¹95== ÀB\©×ë!d1Æ¾ã;Ò4u)¥8MSXÕ:B7´º[|uÍâ (åV5°¨æ^ÉW]Ö]÷ Á Þ£nä¯	ÂñP¸C	ùO_}××ÁÙ4Íg­ k'R)¥;î¸£µ´´4Q¯×[J©!DH)ÍAWRª¯ ¾&¢J)KJÙìõz«|ß?vÿþýÇ}ýë_ßt÷Ýw¯xè¡Za¸ã®ëRÓ4Q»ÝVa`Ë²ÔÒÒÊó| 
ñc~~¦jµ.u)lNGQJÕØØFá^¯Kým¬3r ¬°LÕ­=7A-¢;½Blæ§
êæ:chø¾$Içy(Ë2´´´8çhhhEQ<²,ô0\¡pI<ÀFy¨RÊ´m»~èÐ¡-[¶Ô$1K­)|4öÇïp ÿªÝzë­8]BQ®c`ìs¦:P§3_ô©ëÃ3ZeÌTï	Ä.Û¶Ur~~>s]7\µjUÇ0¾2@x']o£Ip&ÖcÄN]f rªã8ÕUÃ0¨aÆîÝ»kóóóC5Q^Oü[ºGíÝtÀ®©çy
cºÝ.2MSÂÀ©\!J)áû¾:ÿüóåää$ùË¿üK{ffÆp]EA4Cªg±¨ªìIpfÕóG¦vz½^ÇI4M©ã8V¯×kÜwß}ýìgûþð£ÉÉÉ8ã0Ë²Ô²,QÏ	Ð8¬²¾0ÆªÙlª~¿¯jµãX&I"F1N\×Ç®¾úêðóÿ|÷?ÿó?W+¥Æ8ç>cÌ Íë¤Uã` íy3¢8pØ¶Í÷íÛgÇqì?ôÐCÙ¹¹¹<I!ºç{0BfYfÙ¶íöz=Ë4MÆ#aäJ©¨Ùl¶?ûÙÏîÏóür1!
J©|¾ùéú(YpsNJFçyR:®:fjjjÛUW]uÌW^¹6Ë²ñZ­æ_CËuq¬oÂA½ìº*ã¼Ã5ëÅô­«*3~n~ß«³ÿ Æè^à u<l7H)1Ä²GÃRJ$	Íó\BmÛçyíÚµKþÅ_üE÷;îØ1¢v8çie@{Îó¹ @jY·mÛzúé§Í+W²ÙÙYÒjµP§ÓQe¬`B_EÍ~# ù¾â88µé«YÖÖ Q &GåT¥rÆ9ïxâm)eÏ²¬T}ISX l«$I
Ë²bÇq-Ë:túé§Ïýà?£zeñ(H¹ò-Ëh,Mà²²r»ì¨&*u^Îé Ð_««Bº£ÎÐ<ÏeE9B(z÷»ß½èºn»(¾25CêîF/"*3¡2Ã0lÇqySJÇ²,sâ8æcêº.3MdY!ù¡Ã6ôÂ!Øqìº.Ãåy>pH«Zë×O×>Ð )%Ñ Ù1XÃ¢(8c!¸çy4MSlÖÓ²°Wè°Ð¼B(Ó4¥R*£F¡ç|qbbâà^Xw]×A9ãÖYgµâ´ÓN[ý|`Õ3Ï<3²zõêºi&ç Ý»wã5kÖïÿûk÷ÜsÏøüüü5kÖD- bô+ù"»ïbEá---µvîÜYGc&¥$s\¥¡öþìèë:;®ç khYmäaýÀc½ØAKÉ Á`â¦)Å+!ÐÑ¹ëº&cÌBýû÷{÷îÍÃh4áªU«ú[·n]8åSO?ýôù­[·TJBÍ÷±
K °x¸d^YcïñÇ÷,Û¶mÛXE¶mÑ\3Æ&`¶@sEJ¢·¾õ­hÛ¶m(4<<~øaôØc¡0Ñôô4²,ù¾?Xcl6haaÍÌÌ ¢(P¦È4ÍAì¦ (:&[ zmÛ6Nzg=ýôÓ½{÷qÆãQp]·#H¢¶m«{ù¢Íf3FFFæ.ºè"õ'ò'èØcí¹®Û/cW¤ê+¥!DVÙo5ÍEQ¬ü»¿û;433ýÕ_ýUò®w½ká¯xÅ,!¤eYj@©rz$ÁQ1ÆWJÕ³,[ñÈ#lxäG6öû}"¥$ãpÍþò5 50ÍÆ83úÔ>Ã¡åâPuè¨ÄUYuGbø^X×úA×Ö_RlÛlèkºEQêF=y¥Ô ¯«¦8Cêû¾±ÿþú¡C[¦i:RÎ9OÓ4ÀÔ§÷Ï5<Å¿Ò
!!c\Ã¯ð}Ë}÷Ýwü7Ü°åî»ï|ê©§ÃÃÃv½^góóóR*0!ñ_`ß÷ÑÐÐÚ½{7Ú¼y3êv»hllEQLÓD³³³¨(
Ôh4ã8¨(
¬Ñr­WÏ2]Ñú¿é÷U_·ºb¥ÑÁuÐuàsÕ&L_¢VçL"!Èó¼ÁØ
õ¬­'ILÓDI`)%Éó&Gõ7:B~üD0BïGý¾èW&BÈ»÷Þ{½F£a`2®²WôaûrkeúYId÷ôA(<ÿ àalÛ~HT :á
!T¦¬]»¶ãûþlQPÒh4¢(³÷ÓÏ9Ä4}³	´ìÈ¶mý÷Uð;Î`Ô4M¶ÿ~gnn®Þh4Ó4u þM×<Õ3«zo5	<õz]kU>Wiª4.£³³³æi§Ö8ñÄÇøÃ69ç6ÆÐ{¢·áÿu-4 ?T²¹aîÒÒÒð¿üåµ§vZzæg&¡8MÓ¢ØL>J¡ô|BQA Ë²TÊ0Õl6UÇB);æy¯[·®wé¥¶7mÚÔ»â+Ò¥¥¥	!D£ÕjÙív3Æ(Æ!TçGÔóº¾6ÄNÀ.42==×­[G~ö³Ñééi#IûàÁ^es®4b1MbYE´×ëaÇqpùïªÕj©ÅÅÅc¼æ5¯<(-¢Ú óù×ò|!Ë²ÌÄ×	!cEQ¬ët:/ûú×¿¾íÿù×H)G0Æ5¥Ç1Cu#1 ðËéöUu «$ºdHá®¿ß*:¾ËþÝwAÏqzß§¡`¬á=.¡G?Bb£d¤b8 K¥?777|Ë-·}öÙ!ÄHxÂ³64àZýºfYëv»RÊÝ±c¹wï^$¢ÊÉÉI¡*Õëue*ã	h¼ PúUaWÇqXYu¸9z`ÃÅqës®|ßWåzYºjÕª¾ëºK¶mqgs^ÂSúËó\Õj5!¥L$é:3ó¾÷½oæª«®ZM)m(¥LÃ0hQí}ÚRuåÕÝqª«UtXéÓå@A}}¨êðV=º!~e©4Mç<RöÎ;ï¼¶RjÑuÝ(ã"Ïs©Ñîh8*E÷oå¦z½°ôp$¤Ùl²¢(Ì	;cÌLÓ$q¹¹91ÆãQ$çy5cÜétLx& iÂµª& Ê«T1FÊ¥ò<ÇBüÌ3ÏâÝ¨ìPu?G*¥
!4M³ã8±m;,bÁ0+MSC)eSJýÉ·½ímín·^rÉ%i£eù{öì±1Æ|Û¶mdïÞ½(MSúôÓOÛÇw\kaaardddÒ0¥T1aeçªlTUußÔýÖe1&J)Ã²,o×®]­{ï½×cAÛ¶1°KÊû;ÐdÓaõ$¢'(1¨¼ËéÑèº¦CªîÑð<Ã×ÃÏè÷ûVH9¥ÃåÚ0¢rÎ¹ëºÒó<åº®ãØË²¬ñÐCe;vìÿÑ~zê©Ý×¿þõk^ýêWÚ¾}û>Ë²äy~2eY×4Í$Ë²¢OÏbñVE/0+¢ºRTaáÅqÜ|ì±ÇêæÐÐMÓ³a­VC­VkÐ ÄO(BÕìµk×¢c9Ù¶= )´aÁ`ådjj
1Æëº¨Ùlêc×ErgÀ° Þ¬"ËÜM8çmÛÞÏþóÑ7½éMccc{1ÆmP$(¤JÓÝy!¸¿û¿\Z.¯³PJeRÊÞøøøÁ«®º*)R)dYSJ3BH^E1Î!2Ïsâi:¥ùYë¼óÎK?÷¹ÏÉ²l6ã9Û¶Ji¦»Y*¥°iØ¶mEw]·^ÅÊ×¾öµé-[Ü»îºË3MÓìv»Ô0ªÇ á¹¢&æ_ÊUÑ#òa bäY¢» i°Ü_e+ÃûÑc°Ü $zpÒÁê'OP S©¢÷7 /u½¹òó$ÏsNqî¼óÎÖöíÛBõ4MÛó#Ük¼õ¸¥3µËA&¥´(¥Ce­â'¶~õ«_Ý´°°0¹ÿ~_Jit:$IV®ÄaÛ¶±RdYÆV¯^Mçææpejlllà½´´40ÁÐ0ÌÏÏíË{A  *;KèÎ¾ºy5¯è9ç¹Vh^î¹×¼,@=WB9&½Æë­a"×u1Æ.,,pÏóÌ$I8çè¦çb³ý.~ Á¢|pÉ22lÛö h<õÔS5Ó4Í$I(ÆÃ3÷Zßî£¯ãÃ3EÑ æ `jÂhUþ]ª«Ä)¥´,K!Òc=¶ßjµ:iygaÈêÐre.ÄB¬S×u HÀöDYC©RzCõz=1aÈ8e	6á X­V£q*â·ÉÔë:}(£³´!³âã$I$ÆÙ¶K)£,Ëºccc¡îììlÌ9/B²ÊÒ>P_ÂùÐ{xOqÎü°Ö9??OÃ0LÓ¬;3ñæ7¿Y\wÝuùßøÆÂ²,<??O]×Å®ëFRÊs.!ª<_ªÜTãH¥*cÊó\ºh2ÏsQêÉÇÍf³ÿþ÷¿?zÓÞýéþiº{÷îñ$IZçy!#Ë2VAÓÓÓ1ëõú DZ°-æ£z½Î¶(týõ×c×uñÌÌ-7Ue*ã+6¬Å
!ôÚv¥Z\\µZ-ë÷ûý?üÃ?Ë²lVJÙUJÅ¶mQ©ªÚo³VÒñ}hõ N1ÆHÇÌ0cì!&ÇYÁ¦¯|å+[¾ô¥/­­Õj£çyãIÐrP`è³zþªaKÇQXC¨×.p¿ »:¨tÔ;½^o0x×=ªÎäÁê õ8ñÞÔ.wÒ4÷`2Û¶Mò<WQQÆ³,6Mæ"U©*	LgH ¢Ù¶mÍÍÍ¹·ß~;MÓT¬Zµ*cEQ c9LMMá¥¥%ì8)l¬£áp1 Ðª:È á8Î`Ú«¬0	dV ÔL$4M3;åS"Ji_JH)A;Lý4!ª<Üv-s'pÂ¡ÅÅÅÅ1Wj!J©
 ëEUìº¾¢¯Èè ¬èZbpt÷=¸?y£05Ö'(à5Appô®ëaFçwÞâÈÈÈ4ÆxQJ1Æ
B|±0:¡°mkeÛ¶Ü¸q£CKKKÄq¢ý~`ñÈÈBè°2ÆÖàI (çy¦'#¬ê¹>5ûSUHÀóXE¨Ùlâv»8$ÁãÖ@ÊïeRcaaYV\³,	!Îyoff&ÿìÏþLlØ°!ýÌg>Þ{ï½cÛ¶mkv:÷Þ{ï5BtxxBøÔÔT½(ñ¥¥¥µÓywó<O	!²Ô#cdYÖo\Û¢º+èWz9$MSª2vîÜi>øà¬(
Â9ÇðÜèÏ/UpýhvôUDUcGÀëL\ø;$* ¯Us 
3ëk1À$¢Ë²¦i6Q
û·ÞzëÐÿþïÿwÜqï|ç;W¼ë]ïÚ·bÅ
?C£,dé¸ù¢^®Ü'4±-¥l>ôÐCã?þxsnqÎYQ¸(
Ül6ñØØØ`º×r®SpÅívmÜ¸ 1Ú»w/j·ÛsÍ&êv»È0EJÓ%Iâ84/À<ÆV!õ<Óÿ*xQC8IjY}ã76O:é¤±.ºhHJé"ºadRJñ»
üéÍárNj!Â2&õB¬\Í!yy$:¼öy`yÉ:Ê®»îºüµ¯}mÿío{×ó¼Ù~¿?åy^cÜ+ëª¼âRÊ®B8ãoß¾}Ã<#
Çqh!XÝàò¯ÎþÒ'ÔP¿ÁfFQ¨ßïòK))1ø714Z	
~ 8ë¶ü©¯¨ëLÀª©U5öHt´Á) UöþlCLkD0Ó4Ûo¿½uÞyçMlÜ¸±E))","WJ)ÇqPej9YêvÄNB5ÃF?ôÐCk/¿üòµ=öØØüü¼[²o£03¥TA)R<77G\×5²,³1ÆæÈÈ	@Ù¶-ÇAJ)U«ÕôA.YrÄ²,F)eIPBC(hÓ¾9§³ÌuSôú^ûÜWsÔLU@å®ëù>tÍ%½î¬jéÀ¥7Z¦ibJ)9xð Ý¼y3A¿ZËÆ¿¿[%.å_,ßn·GùË_6RçyT)ó<Ç°ÂVmváÞèÿýëºGÔú:p¸øZ,WË+I!¥LÏ<óÌ@J Ó4°ô ¬Oø½pØu]\90ôðþyèy,B2Æ²ð<OB²4M£4Mã§~:=é¤
J©<îÖr.ÿ×`Ì¯{ýe¾U§ÆXrÎEQEEª(
Úëõ¨eY¸d?Ë}¹z`êëú@ zP!.ë¦©ÙívýZ­&/¸àyÏ=÷¨¡¡!<66FJùeY²RJÎ¹Ê²L¥i*MÓB¼ÌÍº8ëº2Ë21??dF#½öÚkÃ¯}íkÝ¯}ík+]×õ<¯.¥´³,ãAññqÒétT¿ßÇ@°IÓt_T]Ngð»E	!*cÜï÷QeRª@·z?=eY]×EiªRVMu»]a2::Úyç;ß9ÓívÛÃÃÃAÇy¦Ò÷}$Ò~Óçl¹-Â*É¡Ó aLc¼ÔÊl&I2iÛö¦½{÷ûo|cÃ7¾ñucB¯(
CJÉÃÀø°Í@Ê¨ªXÝ@@ã«ªaC½ß)k$¬KmÁ Ì¯÷j $Iïûg Èpú`D7ÓP;Àçt¢àS@0MSµÛíbxx8Þ´iSK)ó,Ë$cLýÿn1Çqd¯×+¢»Ýn×ó¼Å}ûöaBE¹oß>& aP!Ëó¥iJ<ÏÃ¦iÍu°	$(ÀÒ4Ew4(.`R,ç|²kBId¯yÍk"Îy\N^ò ËLvT)n!zCCC'xbï§?ýé ð$eä¨SúTh9qËj2ÖXçMd ¢T}}Ê£Ó«öïU ²j ²tLþøÿx±Ñh´¢è®6g£ ½ÎÌó\rÎqÚjµ¢,Ë2Ó4E$ªtÅBÔn·1BhàrV«ÕP­VC¥þÖà^07è¶!#0Ô!¸:óSwé¾¾¾Q¯×Õëu\®c(|ôiþrÆr.Uê2%@M!éÒÒRÞjµ
)e>55%O;í´þUW]ÕþÎw¾³êÛßþödÃk×®õó<·oºé&C_ó×XeMMM­²m»1Nâ°ôce9ÆX	÷7êrõ\6êå²,Kan·aÓRTüì½y°Ýe}?þlýìwKn6	°$²¤@*Q&ÅH    IDAT¢VÐQKe:RÇÑcµ3h«¶N+­3µÓgjEvët\[fDP¬%!d¬7w¿çs>û³ýþÈó>}òáÛEÐ~Ï¹÷Ï³¼ß¯÷ké÷ûÖª)ª^ào az~&ÀöÑJqÕo°ú}«6Ø["±|Ä`sjÞÒ4Å)Jcì¸®ëù¾8îÛ·¯ñgögÍÝ»w·>ö±ù]tBZë2Iéºî+z@³RÚ) ZëcÜÙ·oßÈüü|}ddÄs]e	!htt­^½?~<vÈ«íû$ÇqP¿ßG?ü0B×_=ºñÆQ$èßü&{+
<ÏE4¼W°_»8 8ª¦P&¤±¹ÓÓÓµ§zjs>1n	!Çtî_ið³ÐÉ²RJJiÂFv¦cÊÒ|Í× +¤HdpÁÌ¿æ5¯I&&&RÎù¼ã8iÆÂÜ'Ú âcì83áB¨{õÕW÷¿þõ¯gsssc¬|ß§ö:«Ê]ì3¢j¨´-ó´ÁÀ¢ÓZ\C1²hlÿ­5¶j MU`û­ðNJ²×rxÖÕúJ¼SJiî~ô£ÆF7mÚÔ!EQ011 ìßvð</Î9¡:¡àïÿþïÿùÿYó<ÆqÐxpÅWt·nÝÆq,$ÁA¸G©7ÍÎñãÇ³³³1&ÄæÍUQ(MSm~ÅI ²,©ÒÑZ±cìAÀãû¾úýþ¬%ì`hZa  k3\ i19ö ²m?;XS¶R@G;`¡Q¦lïW{ ÍanàcÇ 0À©ó¿òIÀ 4»eIÇq	!Ñììl3ÃÂò<'ý~X¤Cp¯Ê ©Ê²&ÛÃ:ò@ÇCÀJ/2xþ8!ÒZZëøª«®Zæ0ÆÅ©ãKª3l§p	!4ÏsF)eÍf
!02¶	 BÃpÃ4ÕÂÍÏ-$ÉREYcl0666Så<Æx µ.ÑQFZøEÍ+±pÖ¶ÎFòÊRÁÌÌLëÄ5Î¹+¥¦¯4sÜö´Áf`C=ýìw)%RÊ úý>j6è7~ã7ÐøC²¸¸è¸®H)Ã0LLÝ-1Æ¢¢(¡L) rû³c¬ûý¾@5Meã8?ûì³{úÔ§f¯¾úêîýÑuðàÁUkÖ¬é8¥iê.//SA5¶o¸¶ÔR$	j6èØ±cÃ}äº..Ërhg¥ÃÝÚg:MSíû¾ââ/ÎZ­Ö ßï§eY¾ïËÁ` $ _(Ût¥5ý%¦v%1G)ÄqÜö}]ç?~üÂ;î¸ã/}éKkÆÇÇG´Ö5­µkú¡¾ª:°NP£ÀïÁp1Ë24t(]5:bÇq°ïûÃÁ@)F¹Ð©@?¬Þä(CP9mÐ÷ôâUþJw`«=ü\Æ6Lçrbb"ít:P¦µü;cüß9XçïûKkÖ¬9ú½ï}/úÂ¾8qbüØ±c#IÔ¦¦¦<#yóÃ0ò<:EIÓÛ4H=mÊ~­VC1d"Å¬'[ÆSÃp ¥Ê²ÔA(Ïó<Ùºuë2B(&1YMÁùe{UÑt3¹PF+¥»víðeYJß÷5øl@h3l¯]\Û·À¤[Ù¾fàÝh_ìP(Úxõb±)®`Dé ceY¹mÛ¶þ¶mÛRKÒTkÍB
ä!ð>_f PC^;£c¼,Ë1ÖÕZÇ|rrR!t·ÛóaQTå0õÌ¾4¢@EQ z½>LM8àª2àª/]ÛÖ!8|äÈRR×u±Mm?ÓÁ	\ªÍ¾T@FC*¥$!¤\½zu&¥]½zõÔïýÞï¸úê«7~þó_ûõ¯}r||¼366ÖüÑ~äOLLN§S£N9räÕ«W§ç	)%¢hÙó¼s^j­]£_êýW9DÁR@û¾¯DopùåÏÝvÛm³wß}÷H¦a»ÝvºÝ.1`\ØÓAÛÞnW¢µ¯ÔðBÓRm¬ ²ý´V	íf©*¶SÎ*Ì Lð÷æ	0ä¢ q³F£á.//»ßùÎw\ß÷õþéæ6lXBôÇÉ4ô8ýÿË
Y,@¢µvãzdjjªíºnØjµCJ)h0ýþñÉ¤â»´´FGGÑèè(A_üâÑ]wÝ @a¢±±±aê'<w(°·Y ¶e°ïá<·pëNÀfÐF=üðÃcßÿþ÷×¾þõ¯?B)B$c1þy1£¬v!9¨ÝøÁ +%,mÚ´I\3Æ2ÆX©µÀü;38£RR*UJõ.¹ä¥U«V%³³³%LMHÕükl&¬\±MùpÆ¨©É´iààçhø±ãxÈh7?ØN``B¡m³Øm@Î¯jØ@mR=SmYZÕlKÑlï¦
èHÇqÃ'|²}ÕUWDQT×Z»çe&-[¯(V3P§@ýeÃPÿøÇ?ÇÏÒ4]ìt:âK.éþñÿñô¥^zsÞõ}¿ÔZ!D¦éç|Ã?üÃ?}ò$F#ûò¿þù"$p¯×ë1;yòdôÐCÞu×]«Ö¬YÓÃõzaz½`Èv°}ðyÀûµk70¶ð=ìTqÀ=ÓyZ½ëª0»ng¾Ò öLLQh¶¥Ç333C&ÿJÀÈ/"@îðX[H)	ç!üûî»Ï_\\dFTÑÔ¸Ã¾Î¬¼)>¬}Û§öøÎ¾Ûþ4·êU¬,KaÑn·{ív{!´1Î¥Âºb1_<´ñ@ùµZ-PJç¹BÚl61¬¹v»´Ö¨×ë)­µã8sg H){g}vwçÎñW^mÝºuÐn·§Æ~×uç8ç)BH¬TÛüw<¸^j@Ðgá9Æa855UO$0^¨Dkmê3²RíóÝfýV×P« ÓÉq"¥dk×®PÇøk®aïxÇ;ÂøÃ£B®RjP«ÕrJ©RÊ£(J9ç¡iqcYµæp=A RÚq1ccce¿ßkµÚÒë_ÿúÞ-[zýèGÏúö·¿½¾Ýn1ÆjRJ¿Ýn;EQ`BâÄià5ÜA6¹Rªçæætâ8Æ@ºú ÁªöRç¨^¯#BþÈG>¢ÐRJÝëõÐÈÈÈDUµèz©ú£,´ûÎ9 ¥cì!¥T!´1¶åÐ¡C}âØrÏ=÷¬Ý´iS+Ïó0IBá¬¶S6\µ
Whqq)¥t«ÕBõz]çy®Ò4U1*cÚYÔxâcÓÓccÓ4ÅEQ ß÷1 ¹RJäûþißàCªÚØ:/÷«rk³qí­Ê®­Iê,ËäÄÄD±uëÖDk`K45ÙÏõ|Æ8s]w1ã×^{mrÝu×ív»cSSS«z½^ûàÁá}÷ÝW{â'ÚÇ`v»Ý¨^¯;I­5¶'%³í ¿)­ñËév]WÇq¬'&&ÄÜÜ\¾aÃÞYg5eY¯V«åEQH+å²A©N½x0àf¯¹æeÏóÒ<Ï¹k8Dª,±ê÷\Áäò4vç\C ¥TGQ-üPæØl6Ñ-[PçèØ±cCï*û`°7¦
­ÇÑEQ(Óø¤·ÝvÛR§Ó.b)Tk-´ÖÊJ
~EH(ÌúÖ1É9/0Æq£ÑXÚ¸qc|èÐ¡riiI)¥´çy:"ç9²ÃrLêÏiSûâ´µúv¡qÌ±/w[be Õ6_IeRÊc9Bj 3N|ìhHá²j`®0ÆTç1sÎ»¡ß÷gvìØ1}Ùe­}óßüªüãë8°!4òïÿþïÁ¹çK?ÞÞ¸qãFÆ_»v-Â»BZëE)e1ÎãðÊ"³=ç¹À§¾ïÏ_|ñÅÏßqÇ­n·;zÏ=÷4ÇñÍåõ¦¦ðÁÅ¦}ÿ,0¬zQØ®-Ýªî{û½Ø1+]ævt½àÛ¾Lsl+§¬1ÆXAjµö}Ý{ï½e­Vë~úÓ>^¯×OrÎ{È¿RÏç1!B|Psfff|0´Ï=÷\_)Åæççqç¸Ñh ÇqÐÁQ·Û,ö´ÐfÀA&&&BÍÍÍ!­5EJ)´¼¼<ØÅ ÍlsÔöñ²'ÐöÚµv ÝØ5cÌó<ÿ©§jÝ{ï½«_ÿú×¯RJSJu (Ê²pg¼@Ûâþ­¹p_}¡ì0«Lµ2¤ÒuÝAQeç8A)³,1åy.Ëò´tÃ
ÛI³SJ3¥Ôò5kæGFFz&,KrÎ5¤Öb±]T	x±_7äiÉÑZkíº®ö<O%I"\×ãÈ,ËSgSÏaÇqB!B¤iaÚ÷íf¯6;ÐfÏV¥ UäövÒ¬ýO¬Â:ã8ÁîÝ»;³³³«Î>ûì!$ $Fú¬hýbl¥ ¥:CUÏ²lpÖYgÍ,--ò'â^|ñÅÉ5×\3SÅç|16àc)ÐBt?óÏsßûÞ÷.ºh1ÃB¨`É$I´Qc`Î9­×ë~Ç#¯}íkÏ~øáÑ#GÆÌÎÎbølÇª6Àc¸Jh¢ÛÞÎv½Ì¨éª GÉYe©WmKìï[]ð=ªìÑêg-x(¥iã8ÆSSS$IÌ·Rÿvóiü×¨ÖÚÁ»=öRJãGé:Åã²,Ö 5«ëêY¨½Ïí>¡Êð±+Pr:#¥å¥^`{®ë&Bv1@l¨Ô`Dkí(¥|)eRÚî÷ûããÅq\w]×Ô÷}$	C½^O!T$ù«_ýêå[o½ujÛ¶mSFczllì$B¨AJ)M]×í×y×u3ÐpPmu¯ÉyñZ-À·cì8p  º¾ï­5	æ#«	óðüá÷m°P/HØËyc­5R²f³$IB9âüÍßüMíK_úÒd»ÝN È×­[W^xárrrR¬^½:ït:K6mznddD!
1¯ö	Ð³BTeÜ¨Qc,Ï²,¢(Þ¸qcïk_ûÚâÝwßìcÛ0;;;æºnkvv6
Àu]qÎ	ôjãàZ­vÚßH2®ëj¬"­zeIR\¤¦ðçÎ² Sv#^Q¡ïû^»Ý¦à¡h~ àêfË*TeDá(¥<ÏÛõz}clËO>¹í#ùÈyßûÞ÷Ö­[·®Í9z½S¯×r®44¨ì:¡×ë¡f³©9ç:I°J©c\ôz½"MMïj­RÏsÎ	!J)15á³|ú¬õ­Í{Sößßh°±´íÓéP»Ãßá¡}FZJ­µVÁ Ü¼ysòº×½nck­s.*ô"ùÿóyÇ$]×Uór²ÙlÖ;N!T»äK¢ßùßiÍÏÏ¯ãxË­·ÞJ8À¦§§aÁ"zVdHLÄ£N§£ :$Â	!P­VCZkÔn·U¯×Sç[·n	!Ëa&ý~×ëõW\ZìÏ³ÑÿÒZ+ÆBäþæÍW­ZÕOÓ´ãX:£!Ù³*®Ng $s[â3Æ´çy:Ë2íyNÓTK)uYcL}ß'Aèååe¼}ûvtË-· 7¾ñè_ü"úÂ¾0|¦PXVÍ'« RJU%÷</Ý¾}ûR­V[BôÙºÄkéòrËÁQ¡MJô}¿À'cccÅ#GÀ³p(1 ÄN+_4M:I l p%±ím`ãp¨u0'Zk'Ã°(F£ÑË²t  =rFf  ÞÃg?X©¾ï«<Ïëº!$Röã8îú¾?sã7Ü¹sçï|ç;>óÏløéO:²°°lÛ¶AÐ>yòäY¾ïß÷CqM)u\)5Ïë"Ò\éà¦*BEQ$¥²7¦GFFN^~ùåÝ{î¹'KÓTB!°=uµÁØújÓoËÃW2·ßÍ°}Õß	¬tV%VÕÐÄ
; ÿ caÎ9®×ëN¯×²,kÝÿý«nºé¦5W\qÅ!ÏófDãÛeYç$6FÎøÔEÆ8|þùçÇêõºev]y§;n4znnSJQ³Ù²§`ß@Â z½ÞåÛjµïûhyyµZ-ä8Z^^J!(¢ÓÃ*l3<ªÞ]v#nû ãKÍð¸§.àÚÁÇ§¦¦V·Ûí¶ã8³J©Ä½¿òÍò0$PYõ2{á·ÞÃR)U0ÆD³ÙDsNIµî¹3I8°Å2!¸®Ûk·Û©RB¤ëºÚyµaâ­Øtb³¸ªëÊjBL¤DeBÔ$ÂKß÷5(=:^\\ds!i­}ãH÷Öig}Ùà] s¨Ê|µËÕfÛ¡ìÔJûûCcjjÊs~úéÚþýû[6mª3Æ<Î9Åx¿kd²FÞ¯¢(Zë$Ù»ï¾ûÙÙÙÙîøø8ò}?]XTJu{½^^«Õ¤yWSJo{ÛÛ²7ºããã±ÖºÇqA¦©?Q¢j­ÃZ­6Bccc«öïß?Úh4")¥322¢Mâ&¶}Ùì4C«ÊìÐ([m {¤M+5öà©ZVýÈVûÚR`¨+mÖ<|oûÃÚÚI)Ez½%0t*ñcVfÉËþ/0 MØÖZã(Ö;vL8p Å÷8ç©¯|!ÓZS3"RJb<¥qQØ¶°¬*°ìeÏÊ*Û¯ºV[Ï]û¾¯ºÝ.¿òÊ+sÏóR­u)O¥séìk°eßh­;aNt»Ý	ÆØ¦G}tÓ¾ô¥± B­5%à pÇ(c]¥ dãããï|ç;DQ´¯,ËcaÎÄqÜw§ÐZBRø¾qÎKªþ]_ößÏp®00ÆZkz(åøû÷ï÷0ÆsN`ò"Ã:Çöô3ÐËW«íÈ2R¢(ã8x||ð¶³ÿ~E?tè|øáRK)wÞygvíµ×Å»Zk
ÁúW÷¦1ÆÚøì	)%E½^Ïz½^|ýõ×gW_}uï÷ÿ÷×>òÈ#kz½Þ¨ã8uÇq¥BPÇqøÁôD!ç¹j6¢×ëiFEÃBÎ)-¥APm!°çyÈ0¬sB)uÞùÎwFþçÞºùæ£¢(\J)åCú²)äì½¡Lv¢¢(j3ÆÖqÎ·<úè£Û>øÁnyì±ÇÖMNN¶1ÆÁÜÜ«ÕjDk=L°_©×±3"ì~ÉCÚÌBa((¥ÅììlêyÞ`ûöíý/¾¸1.Ù'jqRJ§ßïÓn·KcÎ`0BQ»Ýöz½¨^¯ãZ­*BrRJÉ~¿¯¤:ìy&P­55kÀfuVëû«ÆìAñ -ÆÇÇ{Û¶mC-§iGQ$,Èÿß}1C)ÇqJÆ*N	 ûss>ãû¾o&¢ÑÑÑÌó¼V¯×0i.^YÚó<lË¡`öÆB3Æt¿ß×aêV«Ò4Å¶ñgAB-ÐµZM·ÛmyôèÑòºë®KcI·Û-Úí¶0æ¾ñ¨^f#ëYú¾­Zµª<räÈ0úÛu]m¶)²UïÃD³YJk¿J,B!¥TAà¤iêaÈ¢ A ~ðè[nA®ë¢#G ,ËfûmvQ)Ð1çy¹cÇ~§ÓYpgIk*¥¸>iZõ²PëJ¦@!øèè¨èv»
cF±¥-ò=M·W ¡æ |¾U¦ºv,Þi·	rÖj5OkÝkµZß÷½$I¨ïûøÅ
Ë þÞ>&UÅq¬<ÏÓ¾ï+¥0lÀ²Ñhä¡ç|9¢Ånºiéª«®ÿÚ×¾¶ê+_ùJçë_ÿzëùç÷zè¡pÃëvìØá^yåµÕ«W!(JeüÓ/e±TÝsm ÈÜq¾Öº;::Úw]7Rr±¯W·[lcó&³g2u¶AAx°6ìÀd+1ª²9» ³§óÐ('å`08Íß4÷ºV«a¥R²ÑÑQÿ¹ç«?øàÍk¯½6ä;ic³0^±{`ìÝ»þøÇ?ÆãhÆj6zrrRw:¤B¨×ëAåóóóCv ìçz½(¥hqqñ4ÿøZðÅæ0à÷g³*à®µY~ðáùÚÊÅ[çÔu]÷ÀÑO~òæÍ7ß $IÍÜI¿jòÔ<·\µö¨4Jàé'ª×ëÈ©«¡!ª&Ü[ 0mµap)e¾aÃ"8çÚº@¬ýÁ¶£:«zÚ)yãè0µBE#ú7ÝtÓÂäää<Æx°qãÆrëÖ­Òqôì³ÏâååezôèQ¿×ëµ:´úñÇé÷û¥eYvÅÃ»ÒàÂ¥V~Ø  |Í"©CTöÞ³À¬µÆaÒ¹¹9ïG©íÚµ+rÇÍóÂ^þY/×uO«±(¥cu»Ýz½.×­[7c<#ËV«§iPJóz½.ÌdYVø¾_lÛ¶­çy.Ë2/Ë2­×ëBHB`Ó0Ñ¢("<®ºöÚkãzSJÕÒÒ¿7x°ð÷ÝTÙêÛ¾ ö@@tÀp¿*á¬ågbÚà£ÜÚ^§/Æl°Yð,Ð)í÷û®ëºÂ­ÚÕ_Ða¿ê÷ûÜó¼Áúõëg?÷¹Ï=wï½÷ªgy¦»gÏÑåååºëº~ÖÚï÷û.;UðRUJÈ°Ù5!ì{fE1{VÏYk-PBÊK.¹$ó}?ö´ÖZÃßÍ³0Bj­=P!´á¹ç;gdddí­·ÞzÖC=tvY£ay3Bf¡8Q«ÕBÇ×ã¨x B,SJ§(¥GRsã$nT@RÁÑ©øÓ«ö ¯à¡F§B2B4;aRbÆpçLwguøl3 S¨oÀ
dâJ)T«Õ@MÝÁcÁªU«BHåy®!2sÞéµZ-b}öz% uEp¿I)¥ò<OBäÒÒït:Y½^ó<ýÊW¾²þßøÆ¦;î¸cãÁ'ÆÇÇ[Hkí1ÆÇqñ.ÔP« ,Á «×ëý|à½ûî»O?øà~Q­V<Ïó¢`RJZ¯×ëº¨×ë!`*¥4!dH®ñ}§iJ[­[¯×~¿OªÕjTf/5p%BBecSwt*00@µBëÊ²ÜòànûÈG>²å'X·nÝºvçA$ÎÄÄãåyígf+lë»V2Ù4MQeÙëõRÇqzÛ¶m[¼þúëgn¸áé+¯¼r1u»]÷Ä4MëyûGq:äîÛ·/ZZZÙ½{÷ª8[FI³,CI`CnÚI)sJ©@É,ËpeÌqÀq!DÉCoßh4N÷V"îØh`"´KBH¹qãÆ¤^¯÷´Ö)B#ãqY]ïgbl \ZZÒõz]d\J)Ë0·Ë|æ    IDAT3Îyê8¦iP¥fMôû}Ñëõt¿ßÇ®ë`v2
$Âál¢(t­VÓJ)!G§Â,0¥pÎbH1:ÕÇÈríÚµÙöíÛJ©´ÝnsuÊ¥þW¦!9¿1È²+@ñ_Ä2ÓhòÌÃúS!aÌm¹Rª,Ë2÷<¯Dñ(ä^.½ôÒÚw¿ûÝÖóÏ?ewìØAÞð7`Búþ÷¿~ô£½§ ¬²æÐßø«1Æ:Ïsåº®À§7ÜpÃÒ9ç3­ZÂ§ZkaÑèµÍ>{% Àè£ê,ËçyêÜsÏUQi#ÙÖðgmpd7àR¿êièöeYØþo@A¶Le_àg$0¤,Kg0ãFQ¡ÖÚ¢þàxÁ:³ý^@®E$.iÎ9ò}_¥iª´Ö¢,Ë"Ïó¬ÕjÅQ-#¦ÿàþ`ä}ï{ßØ£>ºú¯ÿú¯G}öÙÚ½÷Þëüó?ÿs´mÛ¶ñË.»¬¼ækÊ;wö(¥	:%#}IeÀgbÛ	!ShÏóRqÿÂ/\ºà?þxA  pQÙÁ* À PgïûYWAïêÔÖù Ad%@û{ÙMUu/ÙR;Ênàà¹C#	L0R:IÄ#EQ)%;|ø°ç90ð+ýÜ½fesU%?tèP~üøñ,¢cÌjµZT)91[­2©¡h0 ,ËçãååeeÙiA ÇñiZZZZÑchH;³ÀöZçYöÙòNX3ç!×uQ¿ßGc<;;xâ	ò·¼ïÿõWÕ|6øú"çR¢V«5ôì­ÕjÚN·/U ö¤aDiãµÊ7oÞÌÛí¶ìv»ÊHá 2YÍûÃ¶ÜÎÞó6 ÏÞrBþM7ÝtüÓþôÁM6=¯µ§¦EQHß÷õÎ;1¥ÔEÕëþîïþîü}ûö,ËX­V#½^Yû0M±ÚH_Ô (Ø¬?XßÖgsZ@¤c{ËY1¦R¨ÙlééigÏ=á`0hý
½Ò@¦Z«&Ve©´Ö¢Õj%Zkçù²ëºº×ë©f³)ÌðP`µ	¸ÂAÎ9÷}?ã×j5ÁãÆâF¤-!aH&±4Ã"Ë2e2ÊT%GËËË/`WÚïX$PËÛ~ÍÚçy8d¸Ûl6=d² å=iWª{m­ªJDmÀB]ÌûÅRJR%;vìòäÉÚøø¸o@²Ò>øU ;¤J×u­õrç_÷º×W]uÕT$ãÝnwÕ³Ï>Ûùþ÷¿_{äGêÇkE!!/¥ô´Öc:CµÖÔ¨H½^ÇJ)ìyÉ²eAíÁÖöÙ÷Ü
@±*Ë7líÚµqV%ÃPe©-<PR!"ñ8Bèl)åÛ·oß°°°0Éw§Q¥E)bèë¶¼¼êõ:QJÑ,Ë¼Ã{ÍfSi­3!Dây^¦©ÄYB¦*sÆè*Cî"¶÷×
lIªµöÓ4mÑ'N4B¾ã8´(
õ^U9R% ÀÞ´íHl)0l¥ P÷A 6
*¥$jRª8ç2MSÜjµèøø8¿ì²ËúZëä¿öùnûÂ0îHJ©Îó\û¾¯;,ËeGQÔÃpþmo{ÛÒW^ÙýÄ'>±áßüæ$ÆxÔq¦R*¢ºóóóÌq¢Â&AZ»9ïv»Ý;î¸cê=ïyÏñw¿ûÝâ?øAýË_þòè~ð²1662Æ\BS%Bà¥¥¥á{ÃPe©$£££e³ÙÌÎ;ï¼l0aÊÁ` ëõúpürHm»ó"J)G`[Q­CmÙ·oß¶¿ø¿ØòÄO¬m///£££N¯×#ËËË!| k¼ö Ö IØ¼ßïg½^oP¯×ço¾ùæ©÷¿ÿýÇwìØqc|!4Ê»ðÂkã!äI)=JiBõþ÷¿~á_pµÖl||äyAYt]·lµZ}ß÷!Ye£Ñ aËËË£ãÇ{RÊC]tnµZèá>­V·	 pWÚ0 +5XK)ã8üsÎÉR!¤¢HäL	äUbÉÀf³	Ye¦Î²,Kba"C\eeBÑÖh4°rE¤Ýø  t­µVRJYeîû~"¥ä333xddÄ	ÃÐaQÎ9ét:ÔH±ïûs^dÞäää¢ã8ý²,!HÙ¬®N_)²ÿNÍ½ÅÁsâº®ÃfffZÓÓÓ¡Ò!3aà2µasÉê ´XÒT)B¥Ô`Ó¦MË]vYrÙe¯}íkÕ¥^êu»ÝÉ§zîß¿ß!ÐV«Ç÷Þ{/ê÷û(Cd32×ÒzàYX°*Ë¥;vìXb-EÑgR0Z?#`ñr1D ¶YyZkuÎ9çhÏótÈó¼¡ïûÃ	øì9 å68d¢C±ÁåjeKx °	cLõÙs]×A§<ðÏ*ª,û2_¹\6
@º®+Í2ÆºeYFÒÆÅ_<úo|cdvvvdïÞ½­Ç=öØcÅ3Ï<¬_¿ïÚµkE	ÖKY(UÛ<K R.MNNN¿éMo{üñÇGB¡sj\ILs!ÙX	PàÇãUARíTmÛ×NªNìõPeWØXV¼a-Åq<§Û­ @é6p966&|ßRJðó<£GéËý½"ÐàÏâû¾¤ç.¸à¹óÏ?æðáÃNYEÇµ/"æ8%°Z­F:QJÎ9
Ããöy¯×C¯zÕ«p¿ßGÝnw¸À«,4|ßöy!ã!PE¨ßïÙ±á ÀfFÁY|4³ivG9ÃµÖùØØXJ)7®ÕjÚøÌ&É«2|~Ùo/öÿmÞ.ªl6­ÝÄÚSkóYkÛS¦Ì»Éf8!$)¥|óæÍùÊÅÅÅRJéÀ9¥ÒycJ)ó}Âyëåö` V«9£M°H$#,\qÅÏ=÷Ü'²,;À[@¥RJ	Ã¥²,=PÒßµkWø¯ÿú¯íz¨V¥ãû>1aÃ Hð>l	¨Ý´àLyØðÙÆq|ßy¶Íj Ø´º(
äyò<dÕ¢|ß×AÃûn4ÍP)åPJifCd³¦ÍôÂéê(4¤GWjVl&ýJQÅ2Ë>+bî{N)RÅùç7^ò}_@Üëõ´ëºx0)Ûj{hÈaíÂÿ3ì~va"­5ª×ëxyyyRT­YàWóÐbk'<C;Æ¾/m Ø¾m%,	®Õjt0xÍf3ÔZ{ ÷Ïc{Hþ«rÎQ£Ñ Û%¥EQ$çé¢(RÇqf¢(ª{×^µjUýúë¯¯EÑÞ»wïøîÝ»;?ýéO?þxóÄ¥T8<çº®Gq!¬(
*pc4Ë2EØÖôV¥üðü¡ öÙCÊu]¦iñêW¿zê
!Z­VfY&tRÃýZ6òJ·×ë5Æä6_ýõ{½ÞPR#¸XÂEQ`£ÜÑabãõÆ´Öþw¿ûÝÚ¥^Bh¿ßG®ë*Çq$!D#jÓÀ¿WJS]ãSk­	çÜ©×ëÑÌÌLsnn.$8J)	§¶åÚh{âd÷	vìi`$ß´ÕËRs$!HÇê¼óÎ+AÜh42t*E3ýEWái¼4öMÊ÷}1N)ebbbñÿñ§>ÿùÏo¼ë®»Ö:th­Özl04&''ýÁ`0	1gu©µ4Í7½éM¢Ø¿fÍÁ[ÞòÚUW]5yÿý÷O~õ«_]µwïÞv§Óiôûýºëº¾QÎ'Nàf³ëº¢ÓédJ©þêÕ«çÆÇÇgjµZOkA µÖêÅ·G®²¨WJ|;ÚÂ°©9	c!\)eèºnRºs~ÞôôôEüàÏûÉO~²®Ýn·]×<Ïsâ8&æ~ÆPÿÂdßÁ{5ÓétÀ§M¢ÙlÓÓÓ1cléµ¯}íì{ßûÞÃoxÃµZ­£RÊ)Ð"cl ¥ä àB\¥ç8N¤µA§,YÆ&&&Ê¹eËµ¸¸¨£(Òív§iªçççåøøxöÏ|fáÆo<<77·äû~Ê9w èìÞ½[èCrÇaisÎ9ßyçèÈ#hïÞ½hnnXØ§@c«4 6ê÷û($\¿~}yÞyçe¡ÜX¿(Î¹¶ëÿ©ªe ZÍ£¶ôÈ
LÞË²¦ÁÏ<óCÑ²,R
Û0(" Xßh4  Á ß¶mÛÒW\1sàÀxß¾}¸ÛíeY×HÆ\×u½0ie:"ÃÞæÍGGGçý,Ëz½.«ÓÙ_È°Öb¥TxìØ±æ`0!®ùìÚN÷µCBRª«®dõ;ÎÜ\0½k×®«®ºjþ¢.¢hç¹2þkýìg<òtGK)Ñ³Ï>¦§§Q«ÕBO?ý4JdX¤CgO}ªi§@û¾/Ë²,/½ôÒþYgµ µ^Â§!nÂ?þÛÙ/²²ðFRcåº®°'OÐXÇq<dÆÚLHø~ Ø_{n¤WÔíÆ±êh_¼ð½`ç8°m)!¼ÿðÏ[üÚ`»õ«¶(iLê¥ã8R!zZëEÏófó<¯5Íúå_^»úê«J©J$R.+¥B9zC$ÌsSZkYEÎë6]vÙW½êUG­k­]ã¥F9çsáà·j¿ãîLr'ø,m-¬êú°Ás[\õ¨±½'ìé.ü9ª>%ÐxÛÒþ8çyºÑh¨8Ëõë×'7Þxc¯,Ë!ÄÍ¤NÛÌÞWÒËf³KBB(¥ÎÝrË-Ö¬YC}ôÑåÙÙÙÑ'N<öØcõ#Gø!â§iê-,,0Î9«ÕjtÕªUR ·ÛmÜétðÂÂÂPâküý0Èôlß+;ÎS#AÍfsØ<»ÂNS´(hàûÀ@Â4Ô,jµZ9;;¬]»vñíoû¼¹cËz½.-ÿ]îÿ_IÒ|)&èÿÝ4J)ÅÇI7mÚÔ[³fMï'¨zÇ1x2qÀ9÷|ßg&yÛ ¿0«4MSø:céºnú®w½kþýïÿó¡ZëÃEQ,eYDQ¤¢ÐEQ ¥Ô@A×­[7qÉ%lxøáÇ´Ö¹óQç:Ïó!ðÅÉí3	¤«UöÔPwVÁX×uwÐ`0@Aè0²S\	Î9MÒN§çy.c¿cxþ¬gf1Ö«!"+YYhëkìÿ~Áú1õF§äcmØ°aa&¥Y"5 16L!ðÏ ¼áÊ²DõzÓ¼j¡®×ëz0(<Î = °ýdm¶^u Lö|à*»Q¯ï_%Q°ñ¯súý~855ÕÜ¸qcà/ÅK1ä²>wé8Ô°e¿ß4M×q²,=)¥O).¸àö¶mÛeY¶$YXXýéOÚ¸ÿþûkO=õTcaa¡1Â4MýF£áû¾Åq47Ïsb7úSJ9ìì~Pð<ÇÑ)lß¾}qrrr¾,Ë¾¢ÃP
öx½^Ç&ØÃk·Û­ååå5ûØÇÖ%I²ªÕj(¥"Î¹W%B`ß÷1 ÓðsEáíÙ³':yòdmrr2
ÃÐåhÞ/ÃðëL ßD§¤ÝÎÂÂ¯rM:ï´ýY­BCÔ²vøcÕÿºjµ±Í·DlùNÃYªPoØ°A4ÍÒJ¾ ?¨Zù¬ðh3ÈÖAp­µJDPJËz½k­ûsïyÏ{fn½õÖû·»ô¹Ï}nc¯×[Çq»ßïG®ë:QÇqd·ÛMwß}÷óaîët:ûRÎºuëFßúÖ·N^wÝuë$Y}ë­·®FM9r¤]«ÕB!ët:¸Ýn£^¯'µÖY½,Ë¦ßúÖ·÷<ï$Æ¸eYáº®2kð­G>¿#<#û¹l"ã°,ËÜ êãtâ8^ÁæùùùÞõ®wmyäGÖ/À ,KÇ|jµZHC6~½VÌR"EQõz]ÌÎÎ'Oì­[·nö¶Ûn;þö·¿ýÈæÍB#fR]Îy"(ÍàSJÖÚ%DÆ·!¢Ã7:ä...¢§zJy§c¨×ë3 WÍf$ãùÑÑÑi¥Tâû¾1Öóóó«ggg!4³³³èØ±c¨Ñh¼`¨e,áïÀ ºæî»1¾yóæôU¯zURå¦!âÏ{±jäp¥Y¦ËaÉÞ½{	!ÉiÖÂ¯¶L-Ïs¡BÄ»ví:ùÉO~r¯çyÓÁ@MMM5ï½÷ÞúÓO?.,,G­ïß¿¿ç¹Âý~¿(bñ·~ë·fÒ4]¨×ëq%H¤{¦ecïÐ¡CA¿ß÷(¥$6Ø¦ß2ÃË9×iòË/¿<¹í¶Ûf®¾úêgW­Zµ?Ã)ÇqAWQzçBV'|dYF}ß's|ìØ1´¼¼öìÙ:tZ{UÚx{j Óö¢(cL(¥ÒË.»libbbº,Ë%Ji1>-ý×¾d^	Ï·êíd¦M|bb¢ÀmûwÁ¦KÑNÎç:ìAÛÌ¿êéhv¢Ù6H ª70µ´´Ù,¶Jr 2á."¥R*3Úr®ÖÚ-Ë© §¦B;Eö^qi­¥1îSJO¾æ5¯9¼k×®ÕwÝuW»Ñhøý~A &Ô§BPDU¡»ÀWò#´¿Þ.ª)¯ö×WEª@a50Öý<aO 	ÍñÕRH¾L·lÙ²øk¿ök³eÆX!8#xûJ`jÃÿ3ÃZRÊ16ïyÙµkWçÎÏ;3vôèÑÕûöík;v¬¶gÏÆC=ÔzægêeYF#ãØ=|ø0eI:!N2Æp³ÙÄ8ã!«d@fE0¤ðÁó©ÕjhíÚµèØ±cC&0WClÙö M
ÅóóóclñCúÐñññywÃ0Ìs\UÓá|âíÿ½þgwûÿ`Ík#§ÓQK)»ãLA0a°51	@¬]»ûSSScGii­tÊÿl(«zÅXC\m¤Vs.ÇÇÇË·¿ýí(æûýþB£ÑXF²,+¡.4QÌÜGKQ-lÙ²¥'¥Ìc"C%Q°Þm¶Auè`É`5³-³g2³¢Ë²Ôõz];£Ê²TyË²,RJ8SH)×uû;vìãßxlóæÍ3ZëAÇ%¥TÕjµçp:gíý÷þýz8LQJ©ÒuÝ8nE!DÑívëº4Cmä° «Ã¡áç9 /ÀLÓauezddDqÎ%ÆXöz=Ýn·1!¦iÊR3Æ0H²aè	¢Â?p¶Ù¾gbNÙÑªÇ)Ü_ ¶0ë	!0caýÁ`^÷òJ÷Î¯2Ð
ê f)Â+Î¹ Èf³Y&IaBåSÇqÜ ¥O)£(ªOLL4Î?ÿüÚ-·ÜRë<ùäcO?ýtóÉ'¬÷»ßm%I²JJ9^E­,K×ó<Ð)@5 ÍNÃ£(Ò¦VVÁ@¶Z­sÞ¿ñÆçBóRÊR
!¤	RV3æc1%y·¿õ­oMÞ{ï½k×®m...®ëºs"Àívk­±.A&¹»®	!Äø GQµºÝn§ÝnÏÇq3Æ¸¹Ë/)óÝZç!½ =~ü83÷±ClªT[¶ÉV%Ù{ÙÞn@b °oÐ²OÓ;iÎ¹Ú²e$ó<ôÏêGV¤ dó.£(R!ç¹RÍf3¡öµÖÝ÷½ï}½w¼ã½üã¾úÕ¯®Å×â8fZk966¶¦éÉë®»î`£ÑØßï÷aØ3©½³AL5ãqO~ûÛßÞxÝu×e£££ëã8nsÎ=J)Aív3Æó<?ñ·¼åàM7Ý´Rz!ÔSJiXáÿ+ tu(³R( MÌ³Â1R%;5ßóyOA°>Ï=÷Ü¹ýèG7ÿð?\Ûl6ÛZëRêh­a{b;Ð£jYf³Á:niiIGQ¤8çÒó<¾°°	!z;wî<yûí·|Ík^³¿ÑhÉ²ì¸r1ÖgåÒaZøòò21ÃpÇqsÞ!¬9|øðº?üÃ?lë[ß"®ëý~ß1VN³ÙZ;EAB®ã8ã85C¤ñBÑüc7cê8 'Iþò/ÿò4µ\5pÎ.l$!¤¤B)_tÑEËëÖ­ÓZ/céw°j*WõÃj"!zâÄ	NE¬c¥Qð2C)ÕÍfSSJµ)³/¾xÑqç´Ö¤ÉÙgí}øÃöBç¼¶°°Ð>yòd§×ëE»wï¦?üáëº½k®¹æ¨ëº³¡XJÉRÊ÷}ýþÁ&Tb1r$Ó&4À"²è³Ãô@Æ°¼}ûöãç{î^ÐÞ,ËNBzAäJ)L)me9þøãGG©)¥\¥ÅãU«Vaß÷ñ<æææBhXt­ä?fOmt&Í'''Ó;v,a8Lÿ=ÃëPÏXCè&pÆXºaÃ~ÇiE(èRJ¦éiìÝAD¸ý¹ ;uµeOAªvoÞÕ$D(ÌÁkpjj
Ão3Óþ·&+H´åm¥Ñ)s|i@_!áSÇNLÚ¡*ËRfY&|ßÙÀ?XÏfM+­µ(")b¡Ýn¸áß}÷ÝcIÔB®¹$°daxæÕæ¿êx¦5¾Rrý¬Wj¢WbÒ¬"lïÙ¼Çà²1øw(ÔàòvG{§ºÝn±zõêÁoþæo.DQ4N¿ãáÞ^É¤ùpÞÚ	À7çÒ`qqQ¢ÒZ76lØÐÚ°aC]JYïõzíLt»ÝÑ={ö´xàö#<-,,xi²f³é,,,¸q{'OtRN§Ó¡RJ,¥$£££R¡Î²lÈ¢7þÃïû¨^¯£tôèÑÓÒ÷à±×m¢Í6=&ØB{J¥TÿÊ+¯~Ï{Þs8ãQ-gY»®+mææJfýÿïõÒ¾ÌDXE!!Bh¡Óé<÷|À½áÏ=÷Ü1¢(*×¯_/8çÏ~ö³ç}êSrÊ²dRàßÎõºÂó<í8ã¸Rf®ëfyJ©Òqç9¯a£î()B¨?999¢(7þu<þìÆÑf@ÛVûõ´¶ÌXôï­6>ÌÁMá¯$çqPI)Í1Æ¹çyÙúõë«V­ZzÃÞ°ðë¿þëÓ]tÑóCYÍ·Z­!$Ò4Õ0`û9AÀëÏZç&Pöa)¢È9çñÈÈHrôèÑ!;æyN1ÆÌØÆÍæ5	ìî~¿¢(á6Í²(Rçy7M5h~YçyRe©9çØÉà¢í5mcQöÚç¤lÂÀ|ánðdìfMz½N³,sÐ© CR©ÿÏ¼ìföcLK)Iªjµ. k­i¦±çysÎ¤çÜÇ»Qãããµ;w6¯¹æz¯×kEQ´úá>ïÑ    IDATGÅwÞy'MÓ B^Àîµ ,Î ´!-(Ïóïû<ã´Ýnw·oß>$ÉR*©Õjs®yÈ¨ïõz8"¢rúý~xçw6êõz4==í5fÖ.Ëu»Ý¡Ýó<D)Å1]%ÆÓ0½(É.^zé¥ó¡>Æ¸§Ìéä/ãZ¨Öb{÷î¥sbB8q5±{¥zÎr` $8ª`ûJÉµ6ÌV3LÐFM¤¶nÝ*ò<ã(ÓSèjübµµ]?`¤¸vGBÖZ8SBÒ0»÷ÜsÏì»ßýî¥Ûo¿}ÃóÏ??ây^866=Ú½ýöÛ§ÆqÐ´ëº±Ä÷}µ´´4èt:=)eWJ¹0111ø§ú'ý»¿û»bïÞ½ãµZ-ê÷û^Ä÷ýs>óæ7¿yÿ§?ýé=­VëPes¡Ôu]²÷´±Âgó<ö2J)Â#RòµÖ-BÈñæ}ûö÷Àlü·û·õ{öìp]·éy^`XwÄÈÉ±Áìsû¾·-"@R«Õ´BAÀ¥Åôôtâû~÷öÛo¾õÖ[mÚ´i/¥ô`¦Ó±¥ !DQ¥ÔZ« t¿ßÇ­VEA1ÆÆx1¶ñk_ûÚÆù9ÿüóÕyç·¼ÿþâñÇ/$©eYöû}OJé`©çyÁ'Æî»ï>µ{÷îñ³Ï>»¬ÕjÎSO=Õ¸ÿþûÇ8çaYÌ÷}ìº.zòÉ'O«QìL ;j.¸/aÍA Òq|ëÖ­Ïóºó1V2Æ kø¹ï3VM¬¤}Ó]\×u§§§u³§àÙAð&O!D922#¥')¥Kæ/Bò<w\×õ'&&¢F£Q¢ÈÛ±cýèG?ªâ8Î	!KãLçy>p]SJ¿ì¯ü¾ÌïY^^&EQ`!ÄP7ì84íCÒ4ÚqYeÎ[n·ÛÇBÇBseYf®ëJ±Ë9\×¥eYFy¾ï;A<Ïñ;ßùN´zõj´{÷nÇñ5Põ-Ò*a¡Ã¡m¼%Ë-[¶ô·nÝºÀ9_B¤1 Î¾¢YZk1.Rýv»=_«ÕúJ©s.]×Õ`¬¢(í× =C¶q®=åâüíéýç@lK{ì¦pð Äµ§ÃÿÛÓÅ*dÞ¶Y&âZE¡0ÆÂ÷}Lj¸6Àø&é³h	¤ªÆXc<õº×½î¹÷½ï}£õWÕ¢ÈËóoTj®z(V=6~ [õy¬hªFÀU3ím6î)}XÇ¦±ÓÆGåyÎ¥ÙÕW_½tÃ7Ì!c	ç»®«^égoÅkÀ¥µ.Í¦Êó¼BôÂ0\PJ!Oá×ëõÚå_ÞÎ²¬}ÕUWüöoÿöÄÜÜ\«ßïO<ñ÷ÿñÁ={y7ëyeYzZkF¡RJ6H¤V«SahrÁ·s>ðMOO9qbº®;lÀ­mË­Ì¾ãäQußûÞ÷N5Íãi.`×uÖZÁýZõfæÝðy¼+ðL/ËìYº®k­¢8tÙe.¸àf³ÙôÀ%"¯(Wy7Æ9cÕLø¶X§ÓvÐ0r0ÆhaaAÿä'?Q7ß|³ô}_Æq¬:mBá´c¥@§¬7nì^rÉ%É>X¦i*=Ïc0´´­0ªòZ»ö3©Êuí8Î0PË°þ´çyÊu]%PRJ¡µR^EeY¢µ¬]»vyçÎ½k®¹¦wýõ×/mÚ´i!´Pÿ{ßkiUÿ®Ûwß{}®sfÎÀpqÄ)`¹ö÷H«V´Ô[£µ^Ò/±i6Æ?jkZiRÓ¨mÚÐ´m4b
"R``¹9÷}û®ë[kýþ8ëÝ]gs  åK&ÊÌ¹ìýíõ­õ¾Ïû\ªe­õ¥t9N¿ß/@Að={,Ô  µÖéäääÊ={ï¿ÿþÎÄÄ ¿ßï3Æ_×uH)ÁM80À:½ýl#l  n4åÂÂB¯Ñh¬ú¾¿6>>.c>ç|¢ªªÉn·$IBlÐÓ°UJZ|º»7m¸çöX;¹ëÃ|£Ñ?þ~[wÑ'x^vÙe~gzN_QÖ?áWUÖ»8çÚ²âê(¨õÈ£ I)]C¼(
¯ªª0ÃpjjªUåÊUW]%RBV³ÙÒ4eA0G:ø¤ºÙ¼èen6º,ËÚ÷ýRÿÒ/ýR×÷ýUß÷ûY!ûÏhAE@)n·k|ß7~333Ã 	\ïXçØ=Är¥T¸ÿþ?ýÓ?Ý>99¹ºcÇÃívÛ·é ¤ª*bÏ]óóbx¾J[ `¡ò÷îÝ+ò<gu]×{x44Ç­1ÜÐ%db7éÔã½ëêp	¬ËvíÚUx'ægu9 ´Á:m©ó<'çZë4¢:ÏóA·Û]}ãß¸úò¿|éöÛoùìg?Û:pàÿò¿¼ÿ»¿û»GWWWçÆZRª,BaXEQ@Çq^eµgÏõÿðýCÍüà?h>øàñ½÷Þë÷ûýìøÄ±?üÃ?ÜWÅ£RÊã±®Öºd²ÏsírPâyÑZSJ)å3c   ZZëmÁ`çã?þÊ~ô£çíÝ»w ÆI³ÙôÓ4åqSK" £ln]V¨ýwcÏm³Êååå4Ë²Î={?ñO¸â+yæÀÁªªNrÎ»çeRJY×µ¢ÈXË"Òl6ieÂ÷ý16	 gýË¿üËÙ_øÂ¦>ð¨w¾ó§(¥¦(ðàÁ÷Þ{ïD]×c«««cwÝu½ðÂùÝwßí¿ÿýï ¡*gfft¯×£iúÍf3BøJ)æû>ÑZôÃ!c§³¸îA$IL§Ó©Ï9çbçÎ} PJq ÷çg êàCðÏ"ÆÑ£GÃ(.¢(6(Ý4`\ý~<Ï3q×y¥´¯êÙTÐÊ~øDkÍccÌ3Æð8I§Ó1Íf³.ÖYÊ+´Ö
W_LÂÁWç9[W<¯Gn¦è¹»#51UE±uëÖµ©©©ZëycÌj)ee³lAÖï÷½S§N	cKÓÄq×]wh­á'¦Æacì×{æ¶Òl÷îÝ«Û·og­c6¤ÿnä§CAYÖÆh­µBj­3­uorr2[XXRJÔlíú¾Q!>¼n¯+ÂµàÊ¼ñïp?
ô¸ÿîô#7Û~¿sâ&F?×ÙèýsÁ`ô¯Àýsnðuc¨Â  dYçýBq< l¨9çµMÂ\nµZGn¾ùæ©£GßrË-1cL0Æ5¦£ò\w¢Å|øT Û»kd³Æåéü<FZ<|ÜÍÑFËMv«v½Q¶Ûíî5×\³033sRk½ªÊ ¨ÑÀNiO»jWG¥ò}ßt»]Õh4*JiÞétÒ ïû¼®k¯ªªÐó¼H)LLL´¦§§ã¢(={öüàµµµÉoûÛ3·ß~ûä=÷Ü3eYãøñãçÜï÷ûcÌRrBgë	 =v	z£Ø½=zt88p×¨úiá³nYãÆïÈ²HÏ:ë¬ån¸áRjRÚ­ªªô}_õz=Àn:¤z!m½<£µÖy×±R5ÍçÜ/ËA@ÖzLk$I2Æ¤µIyÊ=ÀµíÀd eIVWW©1EA°i¶V}j(¥ºª*Å+  ³eËÅK.¹díûßÿ~®JÊ²ÔZköõ+ÝÄ¶ÀØ³  Dß÷!ÏsVJ)ÆXm©Ê²¬úý~ 9 d;vìè]sÍ5Ë×]wÝÒå_¾0==½ ] èe¹ }4?(Ë2§I(B©ªÊ.$5 TaªªZ<çsI)ËËËf³)$áÒVeUU5(¥¾Ö!p{6Øö^J©ê÷ûeY0O|ík_;|õÕWÏó¼ð}?¹óÎ;ÏúÐ>d1æy.ì bC½ãî;®âºLÀ§
±Âº×+)¶R-~¨EQR
Â0Ä¤!ð©§SmùóºÜ¡°b®µ69=)ËÒacÃ9^¯Gâ8®cÄÊ©1	!RÎ¹ßëõÊ Â4M;ÿõ_ÿ;v¬7¾ï£7ß¦¬q÷³f¥N¤VJUëÖóÕ@Ñ{Ík^Óáw  +Ã!Æª£µÖuEùïÿþï÷n¾ùæ4Ïó²ÕjÕRJÆ#ÍfEa¬Í]$ð}Eá<y2þêW¿Úþû¿ÿûÖäädXÏópÎ!I!x8J@9×Õ½ ®
Ë²l?~<b	J)µÞ¡C¿ÏQUÑ¨/5Êh1 èQì$¯oP-¡ü¨ZÅ­-\¥ïûR*9çùøøx 2 z¯¡Âh³s´NqëþìÚ<Ï]»
³²²¢¶mÛaBzu]w¶nÝzò¦nÏ{ÞÓ~ÿûßßxË[ÞRÎÍÍRÎK){iIÔÍ9'6%X1Æ¤RJ®®®æ;wî\8ï¼óÆ®¸â¤Õj5öïß¤iZíÞ½ûdQO ÀI¥TÇ²­û?fWÃ»>(¬[p)¥°¥sÞâOk­Ï=vìØ+û·{ç>¸-I±F£u:±uëVF¡eYQB`¬ö°ÄúÔÊZ)UgYV¤iÚ[øøÇ?~ü½ï}ïÑÃÒc p a[¬ó5zÃ`0 QÑº®R*È²l,¢-ÜñÅ/~qËµ×^ËÞúÖ·ö)¥­µ."ã¯xÅ+X¦ìG?úQxìØ1ÿßü&;pà SJùeYr!Z]]5eY( pß÷Y¦¤Óé$I@Ng¸?î}®CD·Ø*Ë²ºøâgyæ* ô8çEUUÃÀ×óY.ÓÐ A( ø±æ'&9Ò øsVUq#ØÑ«¥ñMú¾o(¥º×ëIJi$I§®ë> äJ©B)UYCZ°)]TÁRÔqC]×:Õï÷ëF£¡`]"hÓ)@!"1A¦ÂèòTÁÏe8) #¥4eYj ¨Î;ï¼´Õj­i­{ÆLk]1Æj{+á¢ßï3þ»wï3Ï<öîÝ'NØ0½swQãTÿX&ÖZËf³íÜ¹sÕ³\×uOk]rA¡ÑÍùthÀ\;9Uu]K­u966&»Ý®Àe	ý~,`ò&ÅZë!EÞ¸ ;y5"wå¤£ÆÙî!í²µpC·x¦)!ë|yò|HbF?»Q?G7øÂ5±pAAdÜì^Gîjl¢1¥² 'fffÚþðÛwß}w|äÈ_ÁÑ§ÓÊÇÉ(Ëz`û) á½G?û§7j÷àz
º,Q<¬ÝIûúR8ÔEQTþµ×^»ôú×¿þ8!dRÚ)Ë²tÂ¤~jvÔÏûrýH\æ	¦t¦iª­²CI)¥EQ!#RÜÞß"$  ¤áÔÔTëÆoø­ßú­é'OÎ~ï{ß¿í¶Ûf·Û;zôhcuu5!!Äó}7!õ¤nêyEùC7ÁyÔÏõE2~=6ÞÆÍ½^/}ï{ß»$ÉRQÏóº®k§ÜàÍµÙ$ÿ¥ëù­ìyo´Ö
 0Ð¢²Lcªb *¥¨R*BHkU±ÁÉÝFM¸öÃ0Ëì£«««Rê3ÆRÙ±ûÐG¢¬d~EÑêE]Ô£ PÃºÉpà®¥Qßÿ¼åÿ9+¢0ç(e±ªªÄk Yyg Ðß¶m[ïoxÃÚµ×^Û¹ðÂ;Û·o_8åyÞ¢Rj%MÓ. ¤ç SJK eYÖë³uÏRet­¡!DæyÞgüÐ>´ï²Ë.+<ÏÛºu+ãØÛÞò·÷ÐC1J)~~Ôel¨+lý®ó<±Á»ßýîùO}êSû·oßþ ¢¨Ìó|ì5¯ylµZcªÈìÐË A<®lôF÷\ÓyÏ$Ñ¬§p¯Æõõ%Ê­¦ LUU1 ø?ÆÑsíÅ~á ÒÔ»Í§õÒ4¨Ørt ãásgCýUéÁ`@`EN ÀûÛ¿ý[Þh4xFcÃpÑ­_¥¥.B
!òÁ`Ðg!ÝªªN\uÕUóç­EQ`èMÍÆõc8çÄ¦U«(
­uçøÀüí·ß¾x×]wMEØ´RR¥Bý+Ó4ÅGì×
)¥øða±¶¶FÛí6 b# ß÷!úÏ¡ÏDéo@)mæy>Õï÷B?fÞ!ÃÈÝ+p¿vûPü:·ÂÚÝî¸,P$2J#]ELû.+½®¦¦¦úóÕ,ËQUOÇ| X÷èFU¡Ý{´=¿ª¹¹9¦©ÖZë8Ó,ËRÎù22ÆÄó7ù¾¯ºSSSKeYfccc5öÖe)Ë²ÔÆ5>>^®­­uÚív`ôàì³Ï-Ð×`µ®ë>!¤4ÆÔRmåÏO	jþ  ;(!ZkëÖ	Ö: F qÎó	­õ¤rÛÞ½{ÏýÜç>wîÑ£G·NOO·µÖAç""ºººJ|ß'QóÜm`j#ðê°?!Ä!´ÖºÖZç«««K.¹äø§?ýéÇ®¾úêG£(:ÒëõN$I² ]¥Tj)1ÊcÏBâû>Cð/¢clÒ3{Ë-·Ì¾õ­om¾ûÝï. ðúý~"¥û÷ïoßwß}?úÑÆ¾óï4AP%¯ë5¢µ¦ À$1¶"RJÒívÉää$	¬­­AÇC}-ñ½»j®ÑÖÚ Ä½×ëÕ _zé¥kÆ ö0öùú} ù&´a-!Z*>pàÀØòòrÌAPËìRh]$ÏóÖy;vìèwÞyeYvÃ0ÌµÖ2Ãº(
bYDAÜ`Ïó Ë2ÁéÇEôbä4êÄÊ¬!$RJ5A¤sZ©ë àn¸hÊÌf³©·mÛVÁztE)­µÖÚú cVU% ìï`ÆÊ#Ðn·ayycP×54ÈóüI¡QÊ9cJk]þù½={ö,sÎW1¥TVU¥GÁ÷g EN:¯±l0eÑkkkÃ"  J)ôûýRHÊ²ÞC,}ßß ÈúúaÓäNÓ\hTêÁ¦j­IUUd0P0Mídêy´ñ9Y½4Ë®ßÓáówð*Ë²&du]/K)_yåÉÍ7ßêS¥¬'«Ñ<Ï©m É(òÓÜ5M£ éHÓTY °²þný]ýÏoF¥£ø»kÊbR*µÖÙäääòÕW_ýÄ;E1 }!DiÏuáò\]xÖ¸Lgo5Nð±LmYµÖZZÆ^^åÀJâhYL!!ç<.¢¹}ûööÛÞö¶ÆM7ÝÔ öÃ?<óü`ò¡jïß¿¿}ðàÁäÈ#ae~Aç~$s.Â0dkkk´ÑhPkzOFÌÏ®¶âg¶EP½^¯í¾ýío_*bÅ÷ýA]×ç\çynìðíIMkà>*qézîÙ;Ølj­RsÎ¥M¬%1j@"Ö¢B;õÃm4Ña^3\$Zk*¥ôöíÛ¯®®¶ÆÇÇ¥·¾ÄÖm\»	TBò0{ç~'I¬×ëÉ85Ëø|¹ûçýÛÊóØ³FQ¯]gY&ó<O_ùÊW®\yåK_~ù©.¸`aË-ó¾ï/	!: Ð%¬eÙ³LÖZrÎkcL]U6Æèº®uÇ¦(
SUÁ½ît¸F÷Md;Bj!DZåïûêÂ/\®ë:
ÃPTUÕÚ²eËàâ/;xðà e<fpØxyW@ïê«¯>1;;û¨1fQ'Ã0TÍfsraaabff¦÷ÐCU333j0¢(R4àCeàû>ãï2®·1îOn]0|
$IÀMu$EQ­µIR&C u¦u¿ß{÷î­ßñwüB=Ñögî0 ÿëÈº®k"Ü+·vç¤b¢(¢J©°®ëñ/ùËÓÁ ,Ëkç,6Â¶W4Ö§«RfsssËðpòÞ{ï]ªëzõüàW½êUæy¾EQeYíû¾4MMÇC-$*Ïóp8;ÿùÇ®½öÚñ¢(¼^¯gaÇ~ç¼®k*<Ï× ØGEQ;wîÔ6À ðøBê9Gú( ¬{ù âªªeYFRJáû>Í²ÙµBdF>1ôz½!°31þ·~pÁA\Wnø¡Îãà½ÑhcÉ&''»UU¥ð§"$î©ÈRDù2=v¿Ñªâ8ÖY¥I¤RJe!RQUYeaeYªV«e À VbÏ2³¯£ÕØØXeÃz +·÷Rk]PJ% ¨<Ï5ÀÄsµÑc¨Lò "4cmBÈd]×mcÌÄ©S§¶<öØc3÷ÝwßÔW¿úÕÙG}tjëÖ­ÍÅÅÅÀJþi¤®k2pôs½p_Bd[
!4ç\æy^dY¶vÞyçûã?þãý¯ýë÷RJ#Ì­¥iI)KÎ¹ô}_K)Á²	!j­ñ}AQJ§¢8SJyöÙg½eÏ=í¢(äã?ÿýßÿÍn»í6oïÞ½Í& FQägYPJ1Üh­ann¬®®ÒA@¢v»kkk$¢:e	ív{hñ5: so7Ébj:Ë²ºÙlf/ùË×<Ï[R1cL#¥(y@É7).Üé>õ<+¥üu]û Àõ}×uqé³óáÎ²L	!ÊÝ»w÷ÍfGJ2Æª²,1F[Óõá`%tÃÃÞNb+E§³äÙ°Ì}µ}_Ñ<qâÄT¦Mc¯µf(ßD#lôìA°%8=WJ#GhXQèßc¥T)%|ß²,k?~<.BØ¿'³³³Bî¿ÿþ8.<ÜìQáyäy»ÝËÖÍª1Ù®]»VwíÚ5OY­ë:BÔö³Òázº|x_]  ÛguÙ»w¯Áµ `mmmèSde¬&8ýÄ)k]×EÑ0Ý§øµH·)FX?èã^_è÷r_BDQÖÜ>òÈ#"Ë2s.êºf£)ÀÏµ´o3àÇõ2DÕ-G"¿ègÓy/Æú®) ¨1}!Ä©ªªÂ|ä#É¡CÆ¾øÅ/FÆôJZkfâN4*Ôc³bÅGï)Þ;{ÿª0+¥Ôj¦=!DjöMNOlè~&î}ÇÏÁ0RRy§m¡Ò}ÓÞtâ7ó7*¥ .1Æ2cLM×Ó1 ObÚd¯h556¤v²k,kýÐ Ïó P)åRÚõ}¥ªªS àWUBóÎ;¯½k×®6¥tâäÉ[~üã·ï¿ÿþÆ>øàØ#<Ò("ªë:JÓ4 x1QUSJQë9Ü±BÉN±mlc§cUUU~ðaç/B2¥di!Äe°ºëã¥ë¹wôq­cîDl,Ø°U×µnµZFkmâ8Þº0:ìÁgÝõÀÌóø¾Ïªªò;6öÍo~sö]ïz×òç| ×ÓeòÆ÷}S²2Îäääò^Õ¦    IDATØ¹ã;¦Ó4â8æÆ¬90Ø`ú§}rJ)2Üªª!'IÂ<ÏN§Sû¾îs[¾øâmß¾ýÐÔÔÔaJé¼1fÒ±MZ 9c¬ÒZK[h£Áz~Æql0ÔÈeÖk|37 6	¸ 5¥´çy¯µöcSeY¶vîÜÙï÷ûUÚZÛdw]$Ibúý¾fÕ Ýxã«J©EcÌb-ÏsC)õ¦¦¦ú¹Bv»]mÏ6¬9ë}ì$Ç%I2Ü³¬U±PkÛZ|­Ø¤SJu$æý
 di«ÕJ¢È11FcAá¾Ð\ÏfqmL`eC@Ö¸n°öÈÆ´½	XI?eÙì?ýÓ?ÍcÆÏC£("îãµí>`,«YWUUe¹öÉO~òð¯ÿú¯?ô¾÷½ïH¿ß_æ¯TU5Ï[Ä~ÁªZ`Rh$e.¢ï:uj~Ë-ÿùÿ9¾îºë Ã"¢±f»Ý@Xo3Ãy´°rz×®]µçyª,K#¥F£ÝnÍæ¦ûééfá*;Fö LJ)üñ Ë2Ï÷ýa+ÆçÓoÂÚ=Î¢(4M!Ã!Øjµ Óé-p?@ðëKün_ß]ûúuQõÜÜ\eY.Àg[ÃÅÌ3¯nÍSÔ¿Yw°î;¾ï»Þç¼BUU1Î9µ@ºÃ°Æ ¬4MMX?Ë ²,UUU&I:"bÁ¡1µ¬RçymBãû¾Ë¸ß Æþoú×"
½¦µÖøûÒÃ0ªëº% n­G»ã;¦öîÝ;¾°°Ð~àZ<òH ÉÉÉhuuÕB0ß÷©z½	Ãâ8*âð³GpØ²Ã1ÉÖctYÚ÷})È?Þ=þñû¯¹æcûó<?N)íø¾Çq\w»]Í3 ¹Ì÷} ^QçyMJéxUU³in?xðàÙ·ÞzëÛ·oß~ë­·Æ>ú¨¾ç{èÚÚït:ÖÕ®çk­YsN1]R
àyø¾Y;|$IÓ4Z!  Ðh4Ï~&ØSTUe¬ozyÙeõÏ>ûìe­õ"Ë²¬ÃP£tþ¹P'ðg@y'?îÙfnV"K
7dUX¤TI)ËW¿úÕBÈ@k]TU¥¬<ìIôüQ/ ü÷«o}Èº$
 eÙ¬KÊ¨õÜàá3þ¯-êçy¦©Y^^6RJ^vöûîBÝnwêñÇoRJýf³ÉÖÖÖÈ+_ùJX^^ýû÷oðÂÂÉõcqM-]1FE!£(Ê^ö²­6ecLRY`ØN¿ÍÐÑÄ¬F£±!Í}0løÉð sýþr¿|Ð	Üô]E­5ð<A¾¡7+Ç u]ScX\\Ê²lú¾QJõz ÿW'äÏ¦C¼ Ê<Ï»¾ïÏBÆ~çw~gzß¾}Íï|ç;¾çyÌzDëdpÚÅ6¦§u?8èkÊ²Ä§RV½^or1¶_)µªµf¾ïÏ¥izNgVUØé¹ Ô¿R
QÙ«èç¹&Èªªò¹¹¹o¼ñØäääY"ô1ç\[~ºy¡ïÍ#E£yuAFÏP ¨´Ö ¤`=U À°(sÌÌÌ]ýõÍn¸¡ÑívÛûöíÛòÈ#L>úè£í£GNÞ{ï½­'N4IRJ¦)ø¾OtÙnQÃ8ÇSEQ¶Z­î¯ýÚ¯-LLLêv»]!D!PØãîA/]§Ý4L¥ö³ò%Õn·kÛ´·©qÁ~wØ!+Y!u]3¥¯µnüçþçÔÛßþöIBHL)ÖE[ÿO,ìM5c¬HÓ´3>>>ÿ«¿ú«Ëßÿþ÷·
!!¥$u]ëc.0UUé,Ë4¬oÔZ)Ui­Kß÷U£Ñ 333~Eñ<àc(!Dz¾ño<uÖYgí!G¤Ë`=Ðê ÔH£h&ÈD7HÐN÷sÈ2+ûÞJ  GIÑfAÖÑsRJbÁYªµæßÿþ÷½+¯¼!TYµçyJ)Ucf³Yi­kÏóR[_d{?6ÀÆàgËÑ=o°!D Ñ*F´m¾¾Ê.SÐ.wël¿RªfeeE&IR~ç'ßõ®w½/.Ð¼¿HrÂHB1B)Õð<oË<pÆ¾}û¶4FY^UUÔó<âz.R7ÏóTeEÇ«/{ÙË¨ªê %I²*¥ìk­û po8©ke¹:ÃZ)5ãx¡ªªà¢.bÿöoÿMMMm½õÖ[g?óÏl±ØÃ=Ï£H8±ûaÆ©ª/..zívû¾O}ß'ø;1|ôµî&G65ìÎ;ïäh5eÙð<p¡è]÷ûß÷A§N!üÊ¯ü
4øÖ·¾(e¢tÔvtÈ8âûilèÚ¾}» &Ï§xºryÄ,qÅ9'EQ¬vd\ ï)×Rmµ1¦-±ØÔsE¶6?Ó&ÊÌB,	TUE `1®
  IÓt2ã­Zë3?~ö?þã?Îýä'?ùá8vòäÉR
!ß÷ïû x$LJIÐ÷Þõú`Ùn·+2Fz½±}6ÆÔ;vì¨yäLJÙ}óß|òãÿø£^zé^BÈ#yÃp­ªªÀ­Vj­¹Ö0Æøy±Äó¼!d ¶}ýë_ßñÝï~wÛwÞ¹õàÁSSS­^¯çu»]°Xõ}ï«ë(¥ÐÈ:Õs­XV#i6Ãôy7×ÅfFý]rsei¢(21cíH×¼æ5±±±JébÖë6æ9:¼	 d6%6¸ï¾û<ûõé¸éáw¥ öp7Á@7s^sÍ5)eRrÎçyO´v¬ÿ+&ã®÷¢3¡  üA)²ÿle¬`+Ù X]]Åøtã4d=P
 VVV'O´Ö¢,K
 ¤ÙlÂüü<ìÛ·oø@Rü]©ê,Õa¨RÕÎ;{×^{í2 ¬Öu)¥dR~:yÿNõ6c&"½×ëAÃäNÀpJr§0!"(ËºÝî0L@ü\Q?ËõòÂi¸ùÆqRJsªªH]×l||ÜOÓ´9¦|ßozçÛIîÿGìç¶«Ã0Ì)¥«Ýn÷èyç×üÌg>9rD8p
!õ¹ @]¶Qù©ØpI´Ý}ÑN ª²,+BÈ*cìØk_ûÚÿúÈG>rW§ÓY>rä·ÿþ3¿ño\Þëõcl«bÜMÃ³)]ÌhñïqíZÖã«,ËJ­u÷úë¯?ù+¿ò+µÖ'´Ö õ`ÎÚ¤ënnòB 7{£ÀÁfkÄ~VÚzHV 3Æ1¼®kÏ0Æ â8N.¹äñË.»l¼ªª©#Gl[\\ÜZ×õÖ~ô£s{÷î%çQ1; ®ì÷×ksn|ßG_Ø ²·½ím+Û·o?	 K¾ï÷)¥ÙQSÍ®ÓD&ªeÆ(Æ)­½²,§ò
JÜt^ÛpÎyôõ¯}lmmm¼Õj%ZkÏJ)cÏòÒ£.^rÉ%§<Ï;³(6!Ä÷<:~  ZJ©ó<×1I PI)3ÆXÖjµ½+¯¼²ºêª«ø«_ýêÖÃ?<{ã7¶ ð(¥u¿ß/c 8Q×õcÌq­u×H«.Ð£Às5rºXPü  [Ê¾_JRe²L:³Y¼Ë±rr®µ?ÿùÏ7Ï?ÿü±±±±ÐC}ß¯¥5¥´¼ðÂ³¿û»¿Ë$© À³µEfõ)5çi­µRjË<6B¡72ÚÕØá¨1ÆèªªMp®¬Å² !¾~c;  ò$IÒV«%·nÝjcÅôôt¶gÏÞìììüîÝ»B,T¿4ä|Öä×ûB ZÝnwö¯þê¯¶Öu=N)£(âyS×ÚÅõ -OLL¬}öÙG	!Gûýþf³ÙRóR:
DÐÞý96xÂXöYÝï÷Ë$I:eYòS§NéË/¿|5Ë²é÷¾÷½;n½õÖêðáÃ¬×ë±ñññAJìl?J(¥4ÏsþüÄÛ¾}»BÐ,Ë   ÙË£¡&ô²§U/ãôXð½{÷2$EÒ4Z5 7"£i½.Á(ÐívßãD\	ºÛS¹Ö2£! ¹Äµ*p êçó¹FzìwqM#cë\º¢Òón½ßØLçsN  eY;8yR¯ðl/Eªª"aÒ ¨çyâ@\UU«ÑhLÀ§N:çk_ûÚYßýîwç~üãOv»ÝVÁÌÌXõfÁbªBµqÏ®w¾ïû099	ý~Ùº&Ë2Ã9×1I)-Ã0Ì÷ïßß¢¨óÙÏ~öÔßøÆÇçææöqÎey\k½fÉ9çsy3cïy^¨µ 9çMcÌ!dÜ3uèÐ¡¹ï}ï{[?÷¹ÏÍîß¿ Z[¶l	çççýº®ùää$nðõcÐ±ltâÖÓ®];tw}ú?¿¡¥ ªô\¬ÌMÎÆÏÙö_º,KeÏÙ^»Ý^Öº²ªã>??³àÓ ç<Z]]m=ðÀ1¥T %ÙXÐ¹(?¾¨ ç\BJÏóºç{î"¥´#(¤uYÚJ{ÍSiôê¾XÁQéµË1ÆÐµµ5¶¼¼LÑ°ÖM­t7Vw27g;Ø`Æj¿?½~¿e)0àå3Îf³	O<ñÄpº¯µëéæ8!!è<Ïk)evÎ9ç¬îÚµk¾,ËUJi¦µ®mÜúðó?Qï:ÜPñ½¾êU¯Zõz=(â8~åX8$Ivâ3Ü4\ 8^	¦²øùº¨1Ò4Å	ãåR*Ê²VWW³³³ïûBJ@â6/]ÏÜx¦VUU XPJù¯~õ«Å§?ýiúáh­	ÊÞ`ÝnZ/Æ'øü¸èQö»/"¸?  Àó¼ªªªüu¯{ÝþçþÀîÝ»÷@·Óé°º®W~ã7~#þ£?ú£©QJûýÞHðÓCkìºC9n4u·ÛÍÎ=÷Ünºé¸âxUU+ç¥  º(ïÒO9 xR6.¸fìÿÖZkiRÚé#RzSçÅ±sÏ=wËgy¦çy»¶mÛ>|8BJI=ÏJùF÷&4!FV±äk I®»îºf³yªªª5!Ä0´åÃ§9ê¥ËÚÀI)ÍÆÇÇ{Ö£TâÄ­\!»o¸L@ô^&seÓZ{RJRÊ1Ô²øÐh×¶¶~) ,½â¯89==½¼´´4çyhgj%vºªªZ!R¥Ö:ÓZgQõvîÜ¹zÍ5×¬]ýõ+W\qÅ2c,×ZÒíNÇh­ç¼ÁSRÊzii©°¦ð=ÆX1 z!Ö®Ù3Î4
|¼`°25d:"`eA¶&Ý07»/ ,B8ç<üæ7¿9~èÐ¡é={ö4cÖZ*¥jJizñÅ¯j­W:NÒh4LQ>¥A@¤Æ)JJ)­½ÔZk¥ÉóÜ $
  ßï#ãÅÄq¬ ¨¢(Ê}ßOcÙôô´ÃPMMM¹¹9Ø¶mÑSSSe«Õ´Z­µº®Ë,ËÌ-[2 HA:>>ÞIÓt1¶deàÏJ*øÒþ²Q`HBÚóóó[¿þõ¯O7ÍÆ`0ðèúE<Ï#®´s ¼TUUå¥^ÚUBÈZÇý^¯ù¾_BîjF Ø@#ùÁJØº<99YÀªbqzz:ûÊW¾îÞ½»5==i­¦»Ô¶y§ÆväÈ$ÀA¹ëúL§3®ëJQUU°´´äQJZáùPåD^ÁZ­t»]è÷ûÐn·¡ÓéÀßç*Jð¾¸ òç©°q+#ÐRJi­¤ºu]§vhôçr ý³óßï	È]Ô­ç±ÞÇ¿Ã{@1RJ{a·ÛªªÈØØ SågsY±ê ¬,Kañ9çç¼9&â8Þ
 Û¿ò¯{Ûm·í¸ûî»·t»ÝñRêÇqÌ `6DÚ¡!±¶_P¡xÁÊÊ
$I+++j4MuuÇÕòòrAwqqqå}ï{ßÂïýÞï>>33s óI1#»6¸Ö:ò<¯íyÞRj
 &ÁÔ>8»oß¾ÉGydbïÞ½?øÁÆ¤Íééé°(
¿(
N¡­VJ)M¼¥qzi2
B»t úFâ:Æ÷íÚà×¹ä,¶b~;¬·lQÃ«'''ééé> ô1¶¸îO ¯µnv»Ý©ååå&¥Ô·Ó¨¸+ot^Nû0]nÛ¶-k·Û=dB4mãÿ_:G'ÿÓ3®×cRJ2K«u)4«ÅâÕz'ú®FÉ7z ç9[[[cÆR×5lß¾Üu×]ÃEÈµë?8Z,¸ñÖ1Í«=ÏË.ºè¢Õ(³,ëEQTÕu­FS6K>>Ñ÷èþÁmû¾ï&,ËÀ}qÁB	Ù¨#[ÇÜßãûþÐÍNÝ Ì`0  (Â0f³	BÊ9çNÇ'4Mçy^b >kPJ©´Öe]BÈq­5}ç;ßI¢ ûØÇ0¬Ø@b¢¡ädTZ>úß=êIiÂAÀøø¸Â§ÕjB*êºèizR¸µèál_wÚkcUUUEÇw¼ã'/ºè¢'´Ö'=ÏëBÊ<ÏMæ3®Ý½zª}áö)ÚÏ¸òCXOóRV>!)¥sN|ßgJ©TJÙ%ôªª*|ßçJ©Ù#GYé(ÊuFÁ×K1Ë.ÖVÊWü¿ÿ÷ÿº{öìYð<oÙ²ò+)¥¢,.Ü¢å¥ëô\È²rIéA°Ä9ï)¥JBÂ:k4Ï/7lù 0½^O_~ùåÒ÷ýÂó<iuíø<ÏÓRJUEÁ9ïNLL,qÆ«ý("+õ#ý~ßpÎ¥RªÈ²lÐn·{W]uÕÊ7Ü°zÅW,uÖYóócÌRª :MÓV£Ñ¨ã8ÞÖh4fò<í:ÕVI")¥¬Â£ä×ØA$À3ØÇ¼ÐëN»ÇrÁ¸ÑFÛ2¹á¶	¢OkßqÇ­={öD ÀmøL +Û¶m{â¢.j>üðÃÐëõÆµÖ!eYF¬ãXzÍÍÍõÍf6==-[­ÃÐLNNÂìì,ÁÖ­[ ÐAHû;ó5ÏóúIJ©ÚîØ!5ç</"m4²Ýn¢(JÎyÙl6+)e¡µN w$Ò®RÌùÂÅþÉc!$¹ã;ÚY5}ß÷Ëó À?¬QfsïÐ)÷ìÙSx6"Ë²J!mº8²þÌfd	l¸­ÒÆh­ÁvT `¢UU¥RÊÌó<277×¾ñÆgÿýßÿ½EQÈãu]S­5qyÂ9's¶²²âqÎý¢(DÇBÐÂÑítî5ígHaÝ* *¢yüøñHJ)!Ôó<" øÞPå5Î3ìÕ ªª Ë²VH.kÎh» 	®-Ìµ¨+,ÂpÎUQeÇ½;v,I){AÚþ|Þ7|?.Øì¦h[(bØcâ+Úü ðS$IÆìÍLçDkm&C]1Æf³ù
gZoy0	 ²,9!Ä£Æ1Îù1f6I¹üä';þú¯ÿzî¶ÛnÛÁ¥´$Ièû¾à3þE¬<v8@vbCcò<ññqc{T$¦*)e­Êú±¥·¿ýí'>úÑ=Á<clammm1ÃÕ$IúZëkS¥¯ª*h4 pVQgß}÷ÝgþèG?Ù·oßÄ<0qèÐ¡fe Ä±sîu»]Þh4h]×Ô¦"5´DsÁ}w}¢üw4SîGý]hu^Ø³»jNEb)B¼àÓÓÓkÆ¾Öº´é¿8Ì}Î
|àÿP;!VVV 1ÆD5¨Às-e Ýn·¥Öº ©Rabý¤Mýÿ7{0:S¶á¿EAÒ4u»i° µØõúÁÍ;QQbï3!P¥ëõzìÔ©SCo4~=tèÐä>< FD­fRc½ÊmÛ¶õßð7¬PJ×|ßÏêºVûÿÍ÷/ú@Ý¬èp_SEónð~XUb¡- UU?ªYÚ1¤i:Üúýþp=ø¾?¼÷nJ¶MW2  ø\á}(¥&MSS<x\rÉ%4Còb7Á~¾pUe9Rá)¥äø 9|ø0ùÂ¾@Ó4eBÆ#EQ0ªÐ7þ\&àf`!þ]Y"üîw¿»ãÃþðç~Ùétz½	`ÛÎßæy^T×µçyçzxb!X(½ªò<\}õÕï~÷»xw¬(<Ï3ß÷¥ïû:MSãøEÉø÷ù'ùaJ¦ÕÒöìUë½RaÒº®ªªÌ<ø¾ï!Xçe7îy1*²á@¦,K£ÒQÉÁ`0xóß¼xÆgHÓtsRJ¥õ¥1RC$À§÷\»v¤1&£öâ8Î´ÖÒICö ; ±QJÏóVÉ7¼á9ç¼¯µÎ FI>nP[]×Úó<YUUªµ^¹þúë~øÃ. «ªJ(¥ÌöíÛå5×\_zé¥³Ï>{åe/{ÙâôôôÉ8êº^-Ërµ(>c,BTUUñ J ØREîy^m}ÓívAkmÖ¢ZÀÐ	°gzfG,n³úBT¸gJÉFkËMlgÀ&5Ó¢(X$âÛßþ¶ÿÉO~k­I¦Jk]BfggüÇü¾óÎ;×zè¡-[¶ÓÓÓLA¢(2[¶lQqUUõÆÇÇ8ç=ß÷KBZ'ñãÖ1Ö÷Ïx§  ªë:'¤ç!Óäá6È¨n4Uç:Ç±*ËRi­ñ ee}A½¿uõä¸aÊfðàFQùeYòªª(¥ ü7IHÓôICJÛ/â«²,«K/½4ãRÊ*Õï÷M«Õ2¶®5Oö?e¹UUë;¦2C¦i=66fúýþ!ääýÙÍßqÇ[ºÝncbbBØÔsá¶ö¦ÆÑív£º® I)çy§ÿÆýæÐû ý~ªßï7Ûí¶O)ekkkHî!ø|ºC\;)%t:!ÁBpA2x}â(¸<ê ²M°ÇÏ_WU%Ï:ë¬¬ÕjõªªÊFÏû9ëîápÅéí@é¨Cñ¿Q2Ç±1Æ¢(4çØz~Æ÷El?HºÝ.¢û¾ïçyÞò<o16çù÷ßÿ[n¹eî®»î]\\Ã°Çq$ð)¥ÌúRìQÚV«½^ox¶¸=©­-L]×Ðjµ´RÏÏÏË$IJ)eJé¼îu¯[¸ùæ¿üòËët:Gó±U¥T¿Ýnz½^Ä¼ÆUJñ b Øò¥/}éüûî»ïü}ûö¹ÿþn·Û HáGQ$ @aÈc´ÛíRc±bñ*âûþ°ÆA;Cm´ôr.Éïþwîz"Øhq4ãû¾±jXUe±{÷în³Ù\RJu!!¤v6A3ú\=W àè¢RqìØ1ß&[2àÃì&{¹aªªLYz0¨v»­ÁÊò<0py¦ÁNö    IDATÃáýT¼,rxØá7 ×#7\Äè/7>>¾ÁÐ.¢µ¦J) Á±cÇ¼²,çy7s G}t¸ñ5àïpMg£ÃÑpÎë^¯W\pÁ;wÒZ¯cr¥Tíû¾¦¢§Ø¦Å÷éòÙHõ`1&MSSU±a&F¡)¥´,ËaJOYÃ_­5¤i
çÁØØÁ&¿Öeº ¹¦æz©äyn,P£-¥Sþ<¥BÔçÕcccuçÊ:ô¿T?ûÊ ù4 äiB¤ª*òÙÏ~ÎÏÏo|ã~¯×B
ë¬jfr²Ä÷é)Ïp-ÔuíÙt±q ¨ï¸ãËo¿ýö!d5MSÖl6gºÝîy p!$	ÃêºÊ{ñÀre®ÄÜès®ò</¦§§Woºé¦'Î9çCJ©ZënUU%ç\û¾oqMÞ(>
R½4Owý4{Ç¨¤±`tÒ¾Ú=h­©½ïRÝ~ûíÇ{,,ËR0ÆhQÄÊþ>78È:Ë²rË-½W¾ò p*®Öº,¢ö<Ï¸ûN²_º^à´±~i1V&I"{½Þ¦Í»q:í&¢ÚÂ]Bê.¸ ð</¯ëÙÚ6Ã"×î@ÑçÕó¬®ë¥÷¼ç=<,,,tÏ8ãrñÅW»ví*¦§§{a.MMM-j­)¥ËRÊR*µª¥õ3ÒR@aÏ0½²²2¬1°FPÐ]ó.äéÙQ6ïéèEüÓîM.ÐlQ°Ä±Çûê¥í÷ût08¡Ñhh¥T%¥ìæy~lzz:¿úê«O¼éMo à @Q*(ÐZk)¥Ì¢(êÕuBéâx¾ _²£Ñ°XR@J!ÆØ0Ø¾¡7eYªf³iúý>!ÉQ(¬Ù0|qÍ_ºþµ±v&¬®k¿ªªè{î	¤¢ÑhÐ²,	*XPýÏ üâETUUÕöíÛÓÙÙÙN)eUj4ÏÄ§{FË¬2RÖ£ÍTUk­»ívûT¿ß?öþ÷¿öóÿ|³ª*1Æªªâ6ÜAF)õ[§NÞ¾}{;ÏóSEQ5çÜäysw]>xúÝ*Üa¡Æ ÑÁQ»ÝÈÞD_YTú!éÏ÷3]+YkÇjêI
´Q@Íe_áþÊ(Ûoc>çs$ 1©Ö_ÐÏýç~ø:å=àsL8$xØAìð{,6ÆÀ!°±Þ¨æ§Q_<Å6$q)¥X£ÑÒ°,Ë1f+cìÜÇ{lç-·Üræ=÷Ü³-Ïó ããã¥ÔBðååef!´ Á`(¾fd}"«1»7ÂcôêêjÍ9¯fffÒN§ÓÝ±cÇòÇ>ö±¯ýëlÛ¶í±4M·Z­S±Nç9¥´,¢n6uUUÚ÷}c±kæðûýþØ¿üåm÷ßÿBÈö(ZÍf3°!RJ³,£UUa¨Ê«`Xþ~¸ö\0ÛÝw\Üdt½»¾®?ØÈ¤u¿Ç÷ýÒaüZú¬1å;±¥4õÁönÍÿ|Ä÷}:??Ï¤T1ôuÀ´âLÎ¹KáJéÐ;íÔ>¼{Ï*´1Æ©©)h4¥£nzº¾çA¿ßß@?m6£÷×îíTB¢ªªG`ñIR¤Ùl¢(ÈÁ¡ªª!Ð ¦Ýº@ ÞöPÔvúZÎÍÍõ£(ZÓZ1BÕu=L}þß6Õ?oÅ&ÓuJ©¹¹99>>^7ºÓéÔHwÆÔ#4ÑÅ	§A»±<`1-	Y£´b÷@Â¦/CôBjµ¢Èxg,(d8çR*ëºA0h6Y³Ù¬í$8ÏûKþÿÛtÝ8çº(
iCYÖc Ä¾ô¥hmm­õ­o}+Rz°n¼L â¤ÔÎ6*nà>¶Ðô¬Ét·ÛåA4¢È(¥¢×ëÅfãeYzRJÏ>§§XÈàÏÄ5k#íM5!$¿êª«ßò·RQJ-3Æ²v»][SÿerìS%3?Ó!¼Y0Êö¶ÅAJ¬)¿BÄEQ´ï¹çVQ¡=·Ë,vÓó\ðÕ2MÆSk­³n¸ae×®]'µÖKÒ¾ÖºRjû5Ãb6¢§ùå±ÙgVSJçyÃàÑÀ¶Ñ}Ä];V²eêºÖcccrÛ¶me$EUUµ1F£W«DÀàª²,Me5ç<R.MMM=ö'ò'õ`0hNNNF#cå¬(®²§µ0ÆR ()¥r½g¯ýÙT)Å!µÖZaBµRÊ`Óûn£ÃÍ+n"òfÏéf¬ëÓu_r_«Û\×uYÏw°ï·õ}ßôû}³sçÎaj²Re©$)  3??/gggW´Ö¬(
R×5#º®RGQ$¥¥1FRJU]×ÆµKA°È©©Rª9ç¶uPÚµPÀ?öß¡®kcÏ­«°Þ 0ý~~xÆ½t=}ýë$ËaJ©¨,ËÖñãÇc$À|ß'yÎ9qìF3¼4 ÔRÊ|×®]«[·n]0Æt1EEJJi´Ö÷l¨iPJ79ç&MSB)ÕaBQ2ã´(ÅmÛ¶=ñ¾÷½oê¶Ûnkîß¿ßk4
!¸ú¾O<Ïcu]û{÷îmÜqÇozÓÆã8lBe½6_0}A@þðÃ{333,Ë2­µñ}Ea²,J)Á^CÅé~Ä5$Þ eÙ°>Á½hô¹U¹XK+$è¹¹9e©}ß×.yäùº\"uÈÃs¥¾¾ïØ *ÌÄnðsÙÍ>üij¯Mzfÿ¬Ë¼}BHÜëõÚQÍú¾îøÃóÿõ_ÿõÜåååÙÁ`Ð^XX¢ðµÖÂzÅÓn·K$^¯G\yYC@û|ÿsÃÐôû}eIDYeIQE¯×ë-½öµ¯=þÉO~òØ/ÿò/VJ³é¾KUUõ»Ýn1>>.µÖÚ÷}-¥²¶³,òCúý>k4Þùç<y²ÑétÏó¢F£áu»]e	A@¬,´Z-8vìDQ4/'''7nV+à{ÃÏÕníäØ$lØï\àf5«à´¯Ócç¼Ü²eË@1Àa¨:=\7®´øg Ý¢Á¾±¡ £GKM,ËÁâ¥Ôô'\<ÈBpg ûb¢ì»:!Ëb4G18ñBé²yÙ.=5Ë2ãøÿ³÷¥A]eýÏYî¹Û»v÷ôLOÏLÈ0Y `Hà/H7*R
B©|PÐ²q£,?Xe	
Uð!K)¨¥R%Zâ(Ä ,	$!3µ§§ûíw½ËÙÿ>çåô;=!f¾U©d¼Ý}ï¹ç<Ïïù-pàÀ'21¢b±$¢Öêêê®ápØÒZÇóóól0D/|áS0ÑÞ#(MÓéãnßø»ÿÆº®M§Ó©~ôGtãªª*!vûyÅ×Õø\·á|uj*8çãápXäyN¢àJ)Ê9'Éd|ç=ã8¦EQ°¢(¢v»ÍRP×µ7á¢0mdüû$¥<Ï½<ÂJ)%!¤t÷ZJiÂfræynëºVFcÔn·OÞyç+QVVVÌ®]»ütpÛD³ï5(»#t¶éý^~oîÀGg lR J ècNÇqÜúÝßýÝÅcÇu|ðÁ,¢HkM>ÌJd¶ÿ¸Ð³¥åRa­$Iæ´Ö79B º®"YßOgeÇî3±,KBx¿ùÒ¾tÜl6×  Ç¸bCÁ8=Cö<úvòk©p~:{Õìú}Æ!`1Ã¦^UUEÑÂ¾ð½_ÿú×ç MÓ»ðâÜaØ½4ÌÀ3UUÉ(&?öc?¶ÖívW¤=!DIÑqcxFÃëê^~ïÏß¤ÌÊSÂ=&Ëb cÌ+ú;î¨çææÆÖÚ¢¬µÖ{DE¯ktÐÕ	«(zRJ\ZZcbD®ÎÌ½Z¡¬µÊW@ø
 RjcbÃ¡ãØxöô¾}û¶x\ª¼ü·|!S+àe	UUA·Û¦½ûÏÝu±ª*K)U/~ñk/Á tMAD;??¯¤Ô¯9Ïñ{Â³H$	MèùåA-Ê·q»û1!ô5ÅûFýb ùÎuY 1Æ,ËHQs4Î>¸8ÚF#FD&¥$!ïÙ 0=[" ºªªâõ¯ýcl½®ëBúpHGÌÈ·XOù¥_q£p£1F;õQÏZ{¬Óé4ßñwdïyÏ{8"Ò,ËÈh4JÍ&R(ÈÁ£ücûØüë_ÿúkm3IA)]*^¬¿öYbM¨D@DòÕ¯~L&èõzV)e£(²sê{IÎ9ñª®Ð2MÓ-ìK ÏÃeø0ôÿó5K8ñÃñ,Ë`<C·ÛÑh×]wFQu]ã3{©øohÎ­Z yplÖ;É`MU¡,x;0t»z4 bù0ÕZ³8c)e cÌBeË±ë~õWõÆzèÐ©S§ö*¥ÚI¤ý~?Z[[cÝnrÎIYàüþ¦$B¸aËôùùÕÙM¡óGî©¥r<ÛíöF£ÑXy÷»ßý­_ûµ_{<Ë²§ñ4"®Åq< BØ zÀËHe`ñxìßkûö·¿Ýþë¿þ+Y\\dEQ°ápÈc4ÏsR8êºªª ÙlN¿ÀÖÞþ^úuèÏÒéÏY¿®} ªßBEOx¾` _ûáð4MSÞ¶ 8räÈ \ú/ gk²%AûXû|;ùîìa¹¶¶Fü4ÑqoA°ýÜNNæ7ÿb!@J¹¥h{¾_³àl¦ºi!\\\ÔGµBô©~jïW!Ä4Ái8Be8??°)É¦¾9/Ç ²Éd2e eIÜ{ï½ÇñÎ´èÐÁ³×üOJ):4yñ_Ü'5"ÆÓ*¯Ö¢n£3Ò u]åY__geY6ëº(¥¬®kJ)5IØªªÐå'ßK(¥8ã4M¹+X/B¹Dè­^ns¶©µ-..®ÞvÛm«»wï2Æä`00­Vc¸±±aäm·Ý6ºë®»NïÙ³çI)åéùùù¡óå4þ¿¸ÛIG·f¾k) u¦i°iD_ @O)uâ;îèþÎïüNû·û·gÎ[kiE,xowï/çYÌø9	·vD8Üq-B )<f=¡fd?¡tL	 ¥µ¶"LÂÁÎµðn_-m!q  ã¸iÙõ¥/}iñøñã-km$	 ²±±sãxZP_|zºµ¶~éK_:xÑ^´Ê;W×õ¥OLÝy×fÝ03}&1êüHÁZ;µA»0%Ú[¸áFQd!ò¦neYÖ£­µb¬µSfN¨HøöVáþg1ccM5FDë@BC)5ÎWÔ+ügLÓ³½´ÙÉ85"ZD¤øïÃóMÚ9"?{Î(ÎK%m5eJk]¼â¯"bS/='±õRÝ-
ÿmG<½tN¼B÷w¯ó)òR!3ÆÄ Ðüæ7¿Ù!4¬µ©µÌ²b|íàS39¶UJÉ(Æ/ùË×9çZëÂZ«v8ç|ÚÎÏ.÷B SáX!ñp8\ét:ÉÝwß-;Fî¹çï}ÚF)"òV«EZ­[^^Îzê©¹'xbÏ­·ÞÚRAÄ±ÆüY}õGï÷hyäùØcU­V«RrÇÄeÆ* ÍfÇcb­%I@Ç0C ø~4<cü2ë÷ ¨JÅ=°äÁc)¥k0c{ÓM7i­µRZÎ9~/ïýl?r1îËéo.çkl÷ç>ÀBJIB)e1¶ÈÛW×õ{î¹çà=÷Ü³ÿäÉûRq·µÖñ`0àiÒn·K]I|H'Í¾{AàåTf¶®k#PQUÖÚÑÞ½{W_òøÍßüÍcwÞyçcJ©£EQ¬Bú 0ã¸Íð®0Íy²ìIgB¯d³UXÞpÃ£¹¹¹²,K.5YáÙåÄ³2Ã³.½òàÞl¿2KÊ
Ï¸(1;@
køÙgª¶Â÷À×_n`â8®÷ìÙ3?Ç9Xk+ìéõÎ/µ µÖ¤×ëm) B´ßÜÃBÃ&¥Æã1!à¦n<Ï¡,Ëé$ÉË ¶YçRåy>Ù·o_uß}÷iÆ:Ï·é¤Í~~ù¨%$ÁÝ»wg*íõôQ]×ÉÚÚZD)õFÎÐï÷§~³²ÃÙ5¤g!c¥È9×jïÞ½ý#GEÄ>¥´RJi¿q{&àµò|üÁ	fèç|uïÞ½ýáþ!ýÔ§>ÕKÓ´ ÑéÓ§ùÒÒ¢HQJcÌº$­èÀYQó>úèÒO<Ñqæ5o2ê7ç©0¥;	!¢`¦éÙ÷¾÷½ß|óßüX³Ù<[ea­Uu]c»ÝF'é2£Ñ¨ßR®UUµÞjµ
¹yB{m¼ÚãíÚ/6{¶¿ÿýËß?ãµ±1f5ãoýìÏþlûË_þr÷ü`#¢Ø1p	ÝÜ4Évrß§s¯ÜgK5;ÛyëÌ°+¦ûy åABCSUãØØMº8S³ð{>Ú:|ûLØTpkmÊ9ï®­­í¾ÿþû!y£Ñu]S~C4?(Ê~Z*¥T PÜtÓMë< kIL\sï7ø Ï;×UU;çaÅÇqÌðý'ÒÞ¯Ç%Ì¡³37Í" @:À/´»ßA@ëØ}~9á¾;ÛìIH)µ¨ h6ÃN§S"¢rÞÅX \ÔKù¹z]ÁXUÕT®3~¯öL7PöàoÝjµ7ß|ó9 @½Mr9ÕÓÝD.ûÿÏí|Èw@¿ï~}Õu2)eÂ9o|þóo0Æbø¶­ÉyIô¡,=`zMÕl6û×_ýY)eRZRJ½Õ :OÇ-Ïð;týVUyÑhTeY¶ t÷îÝä·~ë·ìÑ£Gí¿ýÛ¿a«ÕòÉÚÚ[ZZ¢7ÝtStèÐ¡Æã?Þ}ÉK^ÒÐZÇ À!D)E\/sM a+BÈ@k½ÞjµxQ5¥4SJ²,REãÓ²,K¬%i8»ÇÄ×®¾ÿôµWç'øZ%{ ÐUUa«ÕÂ#Pû÷ï¯­µªÑhxïÙ¹;Ëª=¿.a|¹	ôYëÄ[Ð89 ¤J©NEËÖÚÃ§O¾áøÀ>þñïã/0Æ:qç£ÑHìÙ³;w0ÆóÎ$u]C³Ù$I ,ËP58Ý~XRJM§ÓÑ£Ñ¨îõzEEýû¹;úð	!i­O0ÆV¥£,ËÊªªôÌ¹²eï 8¤WD¬q°wïÞÕW¿úÕýO}êS¥¢Ç1!Sfé¬êáBûIÈÐó÷<ôFÀÙ=m;ÿàíû~½øþÊõæ¨Â<ÏmQò%/yÉ$MÓ> L À÷çWäâÛ!Õ!E8"2L¼®ÇÃÕ¢£³Úvÿwªª¥¥¥©éoh>¿sïø·'3îÁó<_ßµk×6McMa(ãME«ªòè¼å«n·+@ûfÝm²ÄIÈØd2a½^ZkIhbé©Ý³ZÈøô¾þsàãØ0ÆêÃ$éE1IDºÃçë.= êC))¥«Y7¿ùÍ_ø_;{öl£ÛírB?vì?räH=êf³iÖÖÖ¨µ6]\\\(ËòÐ/þâ/òo|ã±Os1ëç%ùÍÌSò½ÒB1f|ÓM7¾ûî»á]JyÆZ;Éó\çyQÙ¹¹93*üUeYª(oÌ¶X]ílÀKMË®ô÷¿ÄÕAÿµÖ+c¿ñ¿±çGûüç?ß¢H8¿?³þr*fÃ³)¾! þyÈÙ®ñ{ÿ=¿61PTUÀì\¾BJ¿×&ÝJé®¯~õ«{ÿçþgÎqÎ¹h­üzÿÙBß#év»ÅáÃ{ pNk=´ÖÖsÍüÎuKÆâUb­åîLá @cÓ4ÇÙõ¾»aóe±  [­VÇñÄS#¢ö¾Äb6  :ÖØvÀ ^À	!k µÛíµùùù! ÔÖZ
3I¿×oß³	{Þ¬r#dE8ï)DDBØº®ÕÁ RJ=pC3<s®  øLã;×wqyÇx£sEQ^Eç+_ùJRê1ú^ùwÙK³½ý\Þzë­km'I)5ãñòyVQß©BÅ{» kÑBr4õR077gÿæoþÆ¾éMoÂÏ~ö³Ðív1ã."&GùùyúÆ7¾Q(¥Ò¤Õjñ(¨ÖxÖÛµ°û6"¢AÄ
{ýèGúÄ'>Ázè¡õ¯}íkÝªª:B\k-&	Ï²L(¥b)eT×5sá( Øx<fJ)æ|ÑH
 àeÂª{ÂçZÆøCÿì«ª²çyÑn·ÒÂ[RïWºï¸ów³]ÊúìbÀHIçRÊµÖép8ìFQ´räË_þò-ï~÷»8qb)ã¹¢(òv»:u*ºé¦èÙ³gi«ÕØT@£ÑTxEaçÓw®,KLÓ|àåd2±ívÛ¦iªWVVäÙ³gF£1Ü»wïúwÞyêï|çñüÁ|¼,Ëoi­W´ÖÓRJ$H@x! ß÷¾RJò$qL)]{ÃÞ°ñ×ý×EÇ*ãØZË<Òét (iÀGXùúlélb\³~Á½Ît¯íßfrC)øE	ºôsuë­·ÒBk]SJÍ\ßü" "-­®®RçHü&4Í6ßaÚX¦0¦h¬7¸©qæó}Â6[<»bK"â8ã~«ÕB¤µÖ
!Ðã½OH M®eé8«f³9&¨£(B ÖZÊ£eYÒápHü³	=Âi÷ôÏ°ÑLÓtê)C)EJ©¢¨~å+_91!¤¢zïk¦P¥»ÿ¶	 £²,ç|ÈËÚívì(ñìÆodÖZMQRJh6!¤}öìÙëqá?ÿó?ëº®rú")Ë2RN¥Àè%~ÞcÇMIeQ£_ú¥_Z]\\<QUÕI¥ÔJçÅÆÆIÄfYNNYa»Ý6¨³,3AÛ=«ü7çp¯¹Ðþs¡¿ól5d\sÎ«º®7ò<?yàÀÇã7~cîøñãÝz(ã8RJÑ©áêÓøZ³)ÜÛ}ßº³S«íî··pÞ6ý8(ccè¦W#x|Â(¥	 ´¢Ø}ÿý÷/®®®¶QCJ)%¾	Ø×ÓáA8ÅÔZ£cjÊýû÷_ûÚ×®@Ok=±Öª(vÀ¿kèqg1a­5±ÖRð¾íp×Ë®ü>ÃòG­5fYf\P¬ëZ{ÿvF0¨gÎÛ«àÛRJfÜY@Mâ8æy^Xk!$fmaÍÊQ©¤¼kè»uD®4>­2cPJygTJÙo¾YB¼<Ë[lgí\Ï³i³ eÔuÍ£(J8ç'|r÷©S§:±\(¯B¦?ü~ãÛh­µsý#?ò#UÇe¦Ò{MúÅ&\q|És(F#h·Ûv8ª(
¿Þ«ªÂÏ|æ3øÃ?üÃðÕ¯~Ë²V«ÕN$*Ë{½yùË_ÎµÖ¥I))¥ÌªÞ®bð/¼=Óß÷}ßGßó÷Bt«ª?zôè®£G¶~ßeè&    IDATøáôÑGxà¼ßï·«ªÊcsek­ScL$Ç\)E¤Ñh@]×0§à±¯GfS>DÔ?í©E$¶,KM)­®»îºÁ®]»ÎBeYÖQ]ñàKí»Û1×Xý2=!¤iÊR¢®ë´ÑhtæææöÀÏþó·þò/ÿò¢(öi­;Y¥¨,K¶ÿ~º¾¾Nªª">¨ÒmA­B À4MÁÄÙñxl&MS5Õp8,Ã¾ð½;î¸ãÌßüæS¯xÅ+BNÔu}RqN)5BT  RFUU¡/à{õrZ¥f °ñ¢½h­Ýn¢(u]ªªx§Ó!¡Å_[>°%Tlèn×gúáFÈmBýv `øx<%c¬ªÊ!äõ×__
!Ê`ðvÅÖøT<Ã:!IªªWWW£$I(!äy>ýæ}vàûÔßl°Æq<5ô7ÀLÏ÷~fÁy´W#bÍÌÏÏ×sÃ³aÚrxÿ=ÕÕ!ù¨²EQÔyÒ4]GDï÷dÃ$¨ÉdÂ?Îz½mµZ¤®kâÑò­xC:«±¼Ý%²Ù¢(d³ÙüÀü@G±L(3¼VD![Á¤(cRZ×u=`±$IÈx<&qÓªªlE8h·ÛÍ(¥Q³Ù$ï{ßû²^¯4MîC:W÷ ¾ àAt²¨r~~~ãµ¯}íÊ`0XÍ²lÃ3ªÙlpIxyû0 Ê6ñB@ÐÕÒÎ²Ü.V n]Ék»Þ`Ã¶J)eÙ¤ßïk4OÝu×]»_õªWí;zôè|Q)!ÏþÿúÞg'§³`Þçå4þsý?Yù}Bh³Ùäq)¥Ëaí\Û%S¶½XQJiD)Í(¥çÎ[þâ¿¸R!1j­	"ÈzîÌ?Í©¢eéº®n·Û{ñ_|F)Õ£Qiççõ=õÒÙ¹¾»½ÑèS&cÕét4!Ä:Yo
=-Býw4G\^^¶sssÚ5Æ~ÍÞ{iZðBÛíáÛ$ñ¢«WÖZ!bÅ9WDpgØpfÓ.î$Ô0ÆP)·ß~»Í²Ì8ïÐó¤vaÝ¿s=w/ß¯c|"wÍÿû¿ÿëH)ó4M³"aàkZ¿öBºÍ /}éKf³YBT]×RÍfÊ²&¡Þ]OsôÁÄûqÎÎ9¦içÎÃ¿ÿû¿÷¾÷½øñ¥{µÖMÎ9æy®wíÚe³,³®ÇEÆ¸ k	ÌÕ)l¸©¹¹¹³Ãá0k6#G´o»í¶ìg~æg Ú=öØ®|°óÈ#dO>ùdúè£¶Á|QsÖÚv«ÕJã8æ+++t04M¡Ñhl~Ã½"<;ü¹ä¤S¸µÒ4E­5rÎµV8p`Çq2©ëZ¥ij]HÄ³Ú^&H÷´zÙól}}òKáÖÚscæªªZãøðûÞ÷¾[ßûÞ÷¹ùæ÷UUÕe¥EQð4M©R;wºÝ.©ª
êºÖ>à¡Ñh cºÝ.F#Fç¹IÓTE!¢¨RkíäöÛoï¿ò¯<{÷Ýwºã;bRá¯e9Èó|Ç± íX¸ IxÑ+°·ñgµÖjD,(¥½N§sæ¶Ûnë=ðÀ{¬µ9"F>°ÖC\ø4¤&;¥äyÖfáýöd§Éfm7P?ËâÌñþïù3·®k«µViN>Ü'LcÒZ2 ñµÎ·&PØÎ±UeÆ¤Tk=E==r¶éÛÎ*z6àlJäNá65ÝEgm(¥zyyÙ¸>e¢UUM¯KÛÂ(0Ë2d óóó,ËúZëCß-çc"FÖÚø©§âîOá'4! ååtfÜèØB(0£Ñ¨¾å[úËËË«ØGÄÊ£Á¥ü]+çÀ&ojdgÑZO' pQä  $Ïs1Ò<Ï$Iæ>ñOÌåyÞ¢HÇ1ñïÂp8Üâ[&rrÎ½ª±ÖJcÌðî»ï>;??s~s>BÄº(
eFEøbÅý7ºtÀm¨«°¹P0ÉÅ~ýLOj,C|»1fëºó	"ö8çk¯~õ«Çÿú¯ÿ*Ë²´Pöë|§ìÅÒ/$ï½Ð¯CNX¸y»x¿ßO«ªj¤ñe |°"}gû7µÖú³wîøñã»þïÿþ¯mI1,Ë2:L@)5-@ü?á=x¾¶ª*E)-9Ò#¬Õu=äO½?/´n®Æ@ ëüwÝ×ÆKÑÍfS-,,ßTùaì,ðìAÞ8pÀîÞ½[ÍÏÏ×  ]Ã¾å}Úg·õ.èqt¡}Þ×Ë9÷IÁç5ÏÇKí+^þëÏ©°÷J)%dY£ÑÍ&TUsss^³çL*r5ü³­ð×;û×wÙ ºõC)%q3BH\×uãþûïoDQB«¶G<IÁ=Zkïë©Ò48p` µ0Æ¤³>òLS-¾Óº,là½5IL&eRÚñx¬üµZ- À=÷Ü7ß|³ùó?ÿóº®ë]£Ñ(ãx²¶¶V7MC±yl¦b_çÃL½7õh%ºÕjQÇ"¢Xk@¦©¢(ûþïÿþöí·ß#bF)m;wnñäÉ×=üðÃ/øð?|à qÓ<Ï	cÊ²$qC$0§C'¢ ë7Ñª6PqÎ¡®keFòû¾ïû
cLÁFÃ|¯<ä/dî?»7^Îùékp¿ý:ðO bmD\àïF/øÃ?üÃ?úÑ~Á^°ÜëõºJ© 8¥®¯¯f³Ic0 ÙlÂd2(¦}½g;)0ÆØ<Ï- h¥T½¶¶V4á7ÜÐ_ZZZ{ÙË^¶~×]w­ÞrË-'ó<?g°<R­V«6Æ( °RJË!ýèEïgÝùÄ\wö)¥ãx¦éÚOþäOöþû¿ÿ»èt:ZaÇã1óÌ¿0¤4ÌªðyÃºP]Z§¬æ5ÛOuSDn±NóÀwEPdYUU(ê¹¹¹á_øÂsÆ½¢,W>Ë@sr4Æ­µ­Ó§OïªªªçyEÇÄiô½·Â;¼Q¡NÚ³á}-\³)X@^Ækì¦ýNå»>.<MÓ-qJ)oÞhºÝn$IYUä[)%É²)¥!$­ë:òÉ'DäÉäyNªª"ÖZ(bú=bÿbøâËKV9çØl61f¢·ÞzëÄÅ|  Bæg]+Íù,¸¼ÖÖZpì?BÔuMR¬ÑhÐñxI)xâ}Ç[äçUUENÆMÀù0e9eþY!¬µÖH)º®{oûÛO·Z­ÓUUõÃaÕl6Âei}ì¹qº½9ï¬ç¥§® 6l/%oõ{³|¡/³È{Á?óïÁÅuDÄ(¬[VJ©RnjHOÎÝ.÷bSÁKH0\0ÜîërÎ+ÚsÎ¤Ñ'²~¿ßét:¹+§2æïu*óµvùbÑµVh­[ °ð­o}kn0äÍf3FÔ> $ô6ñCÏ¶PJ¡ÖÚcäòòòðu¯{Ý ôò</QùìÍw®gïòÅ±[È9·1Ól6-¸ -7<:ÏgÉ0<ûÏm[DÔÍf³êt:D¬Àz1_Ä^ì¿¡MèI·Ý¾áÀ+ sN£(úQ{iÏ,Cè»a]« ð.o·3ÜúáAxîêkkk³r[ÉÎõ¼:£12Æ1&/¢óÈ#4	!1 0JlyýûçÕ~Ý¹à Çq½¼¼<X^^>W×õ ÑhÔitxÑ½e»ç¥ bß·¸5iÆµÖ*/wÇ8í/ýÒ/ÉüÉò\þÒ¾ÔíõzRÚ×ZKWËád2v»=ëãuUïÁ°Ý~­VËRJ¥µEÁÒ4eÆê|!$"$¡µRy¦/yÉK·Þz«ýüç?ßøæ7¿B"k-õ~´Rèõz[³õ»ÿ^16MSCñVà¾>DQd¬µµ1¦|ÙË^6æÉD¹@ô½ÒÕ¶ÿ>Sõ·÷p  Í{BiÀ®(¥×}å+_9øGôG×ýïÿþïþV«µûäÉmG8áêìÖÖªªf3øûçÔ{$	:LMEr2ÆÁÁ×Þô¦7ùñÿñÓ7Þxã4MW	!ëZë5cL¿,Ëae%cLºÁ³ÕZ[HÆôaóû3ÞKe]/kµÖÊZ[PJ7^ó×¬cÆ(i¿ßÇ]»vÉdâv!c(Ër=VÛ%÷ú_Ï*BµßÓ¶cöùÏô?s½êÂå%`EÈÃ4M­R8p h·ÛCBH¡6"¯¬8 /zÿqÎ³~¸eÉ¤¦iJ|¤»õÂôÙðJ)¡Ýn9²%¦YJ¹Â·i¤Á4dËB¤âÒÒ ôû}È²!0 MÓéÂJÓtªÝÇ>Þ,lzùÍQPJcÆXÇqãÄ	 ð8©?«ª"^¦éT&2ÿ< Ðs!c\__·Ru×]wUJ©s.1ÆûàßÕÎ ½Pä·ß8çèQ~)%¦i
Æ¨ª0Æ(ç¸ÕjµKþð¬µÝN§CÎ£Éd
ÈÅq<Ëñ{×RJ)²,ËÑwÜ±ò²½ì)¥Ô
 Ó4­¥ ¬à<.þ}'ÓÕg ©ÖþòFµUU,"²,={mË¦3RH¶|-Ç~;ï òÏ>LWtOÒB`Y&MS$õ©³Ã§ûf'QOçªQãiÝQDäÒ 3ãßrof;×%_ÜQÆ7ÆdIÌ<yréoÿöoçÜ¯ùd2¡RJÇ1ñþ&>ÞOØ]8:¥jBH±´´Ô{Ýë^wFkÝcRJm±1Èº-Ø¾s]ýà÷uç3RJ1MS t*úB6d,{û72Æ¬RJcÊn·;´Öse­µQ¡cúãlÂÞÅ6ûõ¥Rb!R:hÇ  ÙlB¿ßß"[ÒZOPþú|ØC.tÃÃÐÉ^QâúÞëõË_þ2±ÖJ§³«r?¿ûÎõô/ÆlllVeliÇãÅx EQb­ånxbK`à·s¬ë£(2ãñXÞyçÎù  &¾ÙuA4S¨0hãRÒËxÅ!8\å16Ic­-8Ð{×»ÞµtêÔ©Åo|ã|cccýàÁ4M"Úv»Éäª÷°¿ÈÝ32HÜÏ­]¸	±Ö$I!F#®bY	!DÎ9·«««v»=¹÷Þ{UQ6ÏsRµL&èt:ÓçKøgàúÛívÕÊÊJÇq¡R. 2j6´Õjá¾}ûz/zÑÖúýþÐZ[çynÍ&:	0>Û{Îv÷øéì?aíISs2LHÇ#cL (ö2Æ®¬¬~â'®ÛÛÞv`eeeW¦<Ï{÷îµÖL)EÝ='þk8"É4´s<C«ÕEÇcÓjµ´Rª\[[[k×Þò·zë[ßzüÕ¯~õQkíI XAÄ c ¨ò<.aÚfYf­µÓÄ»COÚËY¿'r5XkmÇ JDì:tèìþýûûÉ¤*¢AÁÐ;@ý7ÚR¾ÐW;ôÿÌ}.}Ïäër§Î~}@ÖuQÁx<v»J)û²½L¹p>åú®èÚæ3Mî´6ÆPkmD)¥"²ápH<ÐäÙfþMïEì¥Ífã8FOÛõ©D;ìV0âÛô/oÐ¦Óü0J:åüÔsîÿ>$I2MÊÛp¢Ñúúzâ$¨ÝÑh´°²²Òä­5ó)ïßè©ñ~s÷l4DÄ$IBz?E½^ÏBL¦òn(­µµVÏ)Ù·å<¦ 1¸hös>ÿØcíûÜç>·RÚì÷û"cZ×5!Ð¨4LoõºóÁ8ÍÚÚZÕl6ûïyÏ{N[kO9O¯RJ©³,³\NuÆª!hì÷ôùÃ`3«,KÂFÜûuç/9NÜÿK¼´RáaPð}ñð¥ÔÔëÔ8pâAÈ²,ËÛzC<Ó ì¬ê;ý\ïEé m·ÛÕi*¥¡7¡ºÃk+°íä "Îyf[YYY¸ï¾ûZs1LX$DJ	~æ|úÀfògP0Æ¬ÖZ%IRÜ~ûí=!Äcl¨µsÇ1^íëÒï÷6)uèÛ1;ÔxxËg{V:¥t*Ù	Íù¯ô{OØ8MçÖYl@£ÑúHçDÈ@z®ïCá3Ýç}]~¡ÃÐÕ µz½Mf×tÀ³s=ÿ'k-ÉóXk1F4üþûïoO&¬ÝnG~ èßAß~ÇcH­µÖ£n¾ùæ
 J ØbG1ëõ|%·'E´}Vj­­1¦vòÂÓl9rDôz=YE/MÓ""S×5z?üky~äç>)Ù=ÉÄqLºÙl2)¥QJqBÝ½{wô/ÿò/ùÊÊJBáN"¾EvéýÏfÙîÙ"çÜj­ÕúúzÑh4Öá~aU19zô(yüñÇó3gÎ^¯g£(ÞyçÇÍæÉf³ÙRkmR[l®Õý{v¸â{G×P!5Æ83cL;ãeD¼ñÉ'¼é3ùÌ¡w½ë]Ë{öì[^^nDQ9s&RJ±]»vk-ñ@ïWªª~Mgÿu]¥¥6MS]¥\XX;wnãÐ¡Cgú§úØ¯üÊ¯<ÙívJ)OVUµÞjµÖÚ
%¸°(Ød=Á: H!ÄD)ÕË[Þ2þà?(ã86I Çã±O/ß2,

¾nð
p½úþ;</ý`"µk­·ü^ø<gU±a½¼wPU""îß¿ßnæ+¨]1 p»ÆÍZë§9t<3/½ÙjNb4¢úé¢kÄ}slc6"ã"Ñ¥Äî43 GØz¦é<ÏMUU8úþ#ðeRâââ"EHc1Fæææ"6 `n0Ì?~<7ÆB%¿=¸1[HûIjGØô¹F£aëº6J)iÌÏÏ¬µã~
<
t/¯
ÒDÉZKëºâ8ÎÊ²_YYÙuüøñv£ÑH1¼ª*âÿoÆê7ÿûNêBäÛ^¯§¢(cÖî¾ûîJ©³ZëBj­­÷K
Ú+¤ß¼Cµµâ8&°&H$¡Æ¦µfÖZêÁ;ÆÔvëeD$Zkæeþ:¹
¸çIcúÿ;Ö	ñR+/Á·Fe¸)9Ï² ßµkít:d0ðgûnØ{³ûxÀ >¯ñß®!¼¤÷
ó¬FÎ9	hgÁÅðw¶xÏÐ4MYY"MÓV¿ß_ø»¿û»¹²,³hccÎÙBàÏ#áùa­5ÖZÙn·?ÿó?¿Æ9ïi­²,UçÖKw®k÷
¹0 ,IÊÿÃØ×jË@´¾¾?~¼}äÈÜZ+Ô3ÂB++=Ìû¶³ ZÆqÍ:úôÚV«u°õlWE¿Í^Þ?pm0g}º}ci®ìÜ¹s"\Hu¿¿åsv®çG¦)QJyùa|ß}÷%  ¼ÿ_¸þÂóÉ|-ë^tj yÛm·©ÅÀ÷ÂÓ-ÏsïwæSÎµRªrì¦Ä%""ÖÃáp¦©JÄÇctk½¾Æ@D<9sNÒK H)¡ÑhðÕÕÕ<Ë²¹{î¹gÎZ§i¹âÏ£phï÷âÀSÝpÎ«ªªz¿þë¿~ôÝï~÷7Ö  N8Ñî÷ûÙ`0 ý~rë­·LÓô©¢(6¢(ªÀ¸kþýÚ¦Ç!ÌCc\)ÇqÜÇsQ-eyÃ¾ô¥[þäOþäÏ}îsË×]w]gcc#¢Hôz=Öjµ¨L&â}^U6!Ë2L&SK¨¹¹9t8BèÁ`PFQ4züñÇWßñw|ÛÛÞvìå/ùó£RÊJi2RÖ1ácÖÏùû
Öþþë X¾þõ¯¯Þÿþ÷«N§c1èÉi@]þo7<»	cV2ìÁ»0èÖ§RP×5$I2íçC_@_¯9ût½?.//#  R
½Âö! çnq?, rìØ1"¥$QA£Ñ _xìÿÃÌÈC1",ËÒ&I"c1Fº$[ôèêó=$4Ð¡qFCj­!Ä3éÂ¢×±Ät1>Ì!lzvt¢X=?üð<c,_XXàÆâo4Ì£Ò4µUUJ©B Ö8ê¸¢¨æO8°±oß¾³Zë!¤&÷3=§Bá3óÏÂMB	 °ªª¢UåÂþéÎsÎ¤Òh4¦ÐÄß?OòÉ9ÑhdÕ'&üÇ¼®µ^EÄ>¥´¤jÆ&ß³Ëµ|Ã¢2øùHE0L PÎ9MÓ;0;¢(ÑZGsæ;DÔ.IÒÇÑµcbBg¹WËjcu`
#x©OèVîý$Zkâö>âLn-"Zc©ª
)¥1Ær È|òÉXJÉüûy%ßËM¾TÄ³c>ä÷z½´,ËÆüü|ê= ýÇ¸ÏÚì\îìä6sj­åóLk=7>õ©OÍ5ÍÌÓTJI$Ë²)ëÕËü¿Ë²Ä4MQJi­µ1VìÝ»·÷?øg´Ö=D,Úã`'¸åÂa [­ÖyèíöÓpÈb­%ÖZJá§NJï½÷Þæ#GrÆ`17`9ÏkïJïÿ~h¬µÆªªü	!SÂì c6±ï¹üügý£}=îåx¾Ù	eNþ¹ÕuíÙÄ¥¼Æïõz©²É9Oa3p'èéyÚcçcød2ï¿ÿþ8Ïsî¬¢H¸lòíÕYáh4²1Õl6ùùù LàgÄ÷¥÷96.lÈB$"N\2áÛN§£|4¶Oº½¯ÀÜ÷è:J)ÑZc$¤(
Çq ]»v-~ìc[þâ¿¸«Ùl6!Ñd2¡1Â9÷V1ÓÁ±HAÆË9W 0Y^^^ý_ù'ºÝî×R§jÏ=ÉÒÒpC')è+¥ÎDQÔ7ÆÔIØªªÐ%J_Óï×ÈËé)çO&$Ïóv¿ßßÝéteyý_ýÕ_yÿûßx4íÝ½{w·(¤ÑhDÉÆqLÓH)§ W$IRèv»XÌÏÏãh42Y)!D=&EQôïºë®7¾ñGßð7<eÙSó pNk=´Öq+çÏ8Pûl=  *ãjnn®ìv»r\lÐ­Vôz½Pr>M5OüÚ÷k6ìãýûáÏÖð×¾7
¡!	Î¶Wc þüIÀüü¼W¨=+	 ¢(H`¾¸E
ê¿É6
ªZ­Vçù  
J©tîE_kÀo]áê3@c¬ DT>8\¡×¾ûÉ¥cBlll4Íf $9üïÿþï7¼ï}ïÛ3óùùù¨(
ê¼ÿ_þeð2µº®1FB*­u­µ¶¦µf.±©¦>Ü @Bìv àµ^ ÏÆSJR "eñN§e9ìØ±¥¯|å+sRÊ,Ïs 4cB!Þ# üû$øZ¥î÷ûÕáÃûoxÃVëºî1Æ&1 V~ñ\IØøµãd
sNó<§ZkÎ9 L&Í<Ï;ÆNE¹k`sn¬µÒÇiÖH(¥	 4 q,@ã]B=    IDATM©9çÊ=ØZ[k 7µ.(¥l.jê>Ç³o­µV:SZk­eÒ²4vâh8q"M½iªú3Ý÷o»ÃäBÁ!³û÷qU62µÖ
Ddþûß.Dfå}y¼F£¨Ùlf£ÑhîË_þòÂ¹sçZy~¿ÏÂFË	V³<ô×h4øèÀ1fÈ9£BÏZÝ¹®} 0|×	!Ðn·!l¢grÿßaê}P£(bý~_Ü{ï½ù/ÿò/çóØZËP}^óø,ýhA)%B¦¾¯¡W(éÙ¹6¯,Ë¶0f÷hWÇÎF câ^¯×Y5 <«v®çWBÜàSJÓªªO<ñDÊ7õ¢t6ÄpvñPní!cL#buøðá~§ÓY \ñ´ËÕïó©gzUUP%
!0cc­¥i²,I¿ßùùyC±ãñò<¿æ´ÚQy`ÃC\P!WJeÖÚùÑh´ü|doYsó6¡Ä÷qæk¿×xÿ8ëõõõþ;ßùÎO ÀB3Õ&k""3ÆÂeY+¥&YU 1vÍßÿÀãÄ±)yE)ç¼ ËFãð£>zä/þâ/®ÿÐ>t Ûíîn4m­uÒétøÚÚå8ý0g
DyÙo³Ù^¯óóó>Á9sFÏÍÍÉ£GNÒ4í8p`í]ïz×é·¾õ­O]wÝu#â·¤+UUm âDQ3Æ!Ä*¥l úã¥DÏ ðçÿm¬µ2¢qçý×¼æ5Ï|æ3r~~Þî}m·é©·ÔCa0÷÷ó/ýüß÷û]UUSÌÄûÿ9ú-ïXèAèñB4MhµZSgYWÜctÈÙÆÑ'ùz Âÿ·/$RÐh4¦ `hªïdt&¢zqqq¸°°°Æ@m6/ôòáþ¼ÐP3Æq¯Çq<²ÖÖàÒ<Âì_ò0íÊ³ÑcÔÃ¬µ¢(¼Ûí¦Æ=O=õÔÍ¿ök¿vÃg?ûÙv»Ý]ygýD)¥Ä?k)%Äq<e$
!l]×*ÏóÉ]wÝµ¾¸¸¸1u¿ß«««b}}úý¾ì÷ûkÝn÷\]×}JiÚ¾Û<WQÿB;@rÎ£ñxÜBÌýÃ?üÃÂéÓ§[óóó¢®k¦µ&~óôqäaøB°Ñ µR ÖzôªW½juyyùd¦kÉdâ&iÖ7I~Ìz:]« `x_|¯ç­uo"©²$É\e{cK+++{WVVºÃá0&ÀîÝ»u§Ó)!CÎù ÏóIYyQóJ©¥	!¤Þ+  ÆTk9)¯æ£(lb$%xv÷ÐÒs^qÎµRDQeY¶ûßþíßnüÆ7¾±;ÏóÌZËË²$ÛÏùÿå¾{áÁçèê$I*`Zkê}£¶w®ËÛ;(¥¤ª*E  ,üå_þå"cEêí6ü~ÇñvoÄ¼e ¥ÔRJëÉd2zë[ßºn­ÝàZkåàÙì\W¾~MCÄ©46d¨\¬8÷CCJ)ul¿øë_ÿzÓÓåçEQo!"¥D>?/½%/Ì¢Ø(6Øõ| CÓòÙú=lX¶ãùÔ')»úc¢Éd¯¯¯·s§ñi d¦;Þ¹[  !UUsÎEQÌ÷ûýf]×1ç<\d»À<cÌôLraf<×·ß~û¸ÓéôáÛÀó¼0ß[y¦NEH¦tENÊçÁäc«ÕÂº®·õØ¼ëëÙýÒ!Æ$	«ë:É²¬=>ô¡]÷à.5ÍV]×qÇ4IRUñ>æ³ä H)µÄ+Úíöú¯ÿú¯à·Öu>Õp8ôáÄcRªÑpÎ­!O4âÞ

½Bº±åápxãC=tË>ð>ýéO/---ÍF£R*¢eIÝz%> R
I@EàëºF£$ED½´´T­­­~è~hõíoûo¾ùÄÁÎÍÍ¨ëú$ ¢hX×usnªªB)%:Á;¯YÁ|> Fk]1Æú»wï>û£?ú£½þç^j4¥T4å²RÃa§_ã¡u®û¡@xp&zú³0ü`/ÝÒÇzÂ³Yv»ý¬ï'|»©9sf
lø´ÙÐðÞo aÚ""cí¦¦Iu»Ý2MÓa]×¥ YR¸SÀ_ÀÀ¾àXsÎ'BÚO>==3'ñE9ùöÅ¢HæææÚu]§ ðÂO~ò7Þÿý/¼áv9s¦©µ£ÑlêØýà};\ªº¯_ý¿ÿ÷ÿÖþìÏþìC[[[+{½^2~¿Ïzê)ýÐC^ùÊWKä\]×lz|L³>Ï"iKºcñº®Ó,ËÚEQìú§ú§ù(2­uÄ£q{fpÎ§tdï'è?OY!!Ä b%¼áo8£:eYRZ#¢aa çyÖØÏÒ®B!R1!$¯ªªÃ9ãxÉ³ï¿ÿû¿¯ûÂ¾°÷¾ûî[\[[kÃBöìÙck!DÉ+u$d<'Ãá°©µN4IÍ«Q¹	]l7·5f8çUEÆ6ÆÑhDÇã1BHçç¹ãX2Æäf¾!q,ËZÿ÷¿¸ººº+I´ª*æ«YÀïn¨ÎgçA8)sÞy©È;ßùcqély¦µvþÄKÿùÿ9¦i <MSª"Îw[É§û5úalÊÔ«N§Ó¿þúëW±g­-mãw ÀçF6ÞZkH·K·}qëh­9 $gÎi?ùä7ÜpC0Æ¸µV»ú\@Ù³r¾ZkAS¿:~û÷ Ü{üs}±øÁþ^Ï?ü³pw6.1Æ´ÖâäÉé#GkJÉÎþü:À¸Z+öC=´P×uR*­­B ÐÝ^Zkõ-·Ü2FÄ1 T°IvÀïÇd$  Ó`À/C±åB¼a?$IrÍX<æ­[F£AÆã1o4éÙ³gç	!û>ô¡íëv»s c8Ý4OîÇáù5:"«µEQ^ûÚ×®,,,<Å9?#¥h­J©JÄzz7lBÎ¹Çð¹b#ål?w	!1ç¼óJ©½ÆÃþô§oùÀ>pã>¸Üív;EQdÍfS(¥h$´(
ï!}>Ägâ8Fc¶Ûm¡åO>ÙÍk^sê#ùÈãzLJùâÔx<^Ë²l¥ãXSJ­KË$IÐ3ì¾WelªÞ¤1fÇñúÁ7ò</Êó<6Æ°¼Û®_	jÿ>x¼=güºCYcP×õt(çùëÚK)ÃúÃÁÉ^ã<ü2J)¢TUEºÝ.©ëz¤RJ¡(
Èó|"¡YU¶Z-ERJÕeY*!ñ^e;ÍÀLÒèFÎBVkmaáu^K8÷Q(	n·Û4ÏsQ×uw4íù¹û¹Ã÷Ýwß^ô¢í>uêTK)BXe¤ª*²2îØÖZkcÅþýûÏ½à/x\kýÐÂÂB¯ÛígMÜ&Q¦iº¡µ>`8</_48£dBaÆQUU«,ËÝ'OÜwîÜ¹km QUUÔM¶÷ø³ÖßPY1zCBL&U§Óé½öµ¯=UUÕªrÄNÆL¤[
¯çÐ½¤Ò®ëzwEûRûÿã?þãúûî»oùÞ{ï]züñÇçN>ÝÄ50ððÃ££5 HJ©q²&FÝ@8Ý¸ÂMÂ§kÚËí=çB,¸T,  QQ÷®eóTk-$¡a"×ûg¢I¼Çßv á¬L0`­5QJQ¥s¾@ä ¯µTUEÍf4iÎý×ý×BY­4ME¯×cy°xpé^ïJ)TUiÚº®µ¶þø1fs>6ÆÈ$IÖÃ!ÏÎuí^¡·Ø¡1Ýz·C#ëÐÇ6ÐiE¢,ËÆ<Ð=xð`sBxóëgãIJ)´Z-p	ÓZÓïoaû|_Èâ!düÛ±Eýð1ìº®Ù'¸·xpCÍ4àçÙ¥¢1¦iªµník_kc²,Ë¢¢((¥Ôûg;â{Bç=yÛ¢(TÇÅ¡C±KÝ"ÿY«Wz½ù}$d©ò<G|Ú#PJÑ_êµYÿÐðcµÆq,z½^³ÝnïùÐ>tÀ³ Z( *¥Öx@Ä³ÂC0Â(4 TØÿ½ßû½3Æ3Zë(
!Z[[ÓèYî3§=±³¦}Îµ²;%EÄ¨®ëRÚãxRêºÑhtðãÿø¿ÿû¿Hk½÷àÁÝÕÕÕ¤ÙlF°©L"ÎÿÁß¯²,¡Ñh@YS@!F#Ç±1ÆHJédmmmã§~ê§N}øÃ~´Ûí>$¥|\±¢µÞàOêMz§ãØei	!Ç1RJ§Þ±ÛyErUJiJi½ýû÷¯Ý~ûíÃ/~ñRS×5¢µMx?íµýïy <	'"ðÁµî%þ,õ wUUà- <feY²%áÜyC«Õ²£ÑÈEJ©)IÊà¾Ü¿¬>­¤(
0Æªª¨ÖZñ?´×9{	R(öÍ¢°Ñh "âu×]gc6MS«µFGWÝR¼>_¯ÙCÓÝ$"þeb4EZkÆZ /äf>¤iJ¬µ<MÓüÿñçÏ=»;MÓ¹³gÏæãñØ³ÈÆÆi40L¦TY4MÐZº®å-·Ü2îõz«Ýn÷¤RjEk-£(B ÉdbÍ¦OÑ¸ðã"æñZó»T;n¤É@çù\¦Ëo{ÛÛöZk;i&RÆ9Rå=xë¥MÞ³Ç74u]£{oþ?{o¬gYÞ_÷úlïzÞ³'!Â&FqaU¶¶¶?e´Ìø::+v:ÕA;£m´XZ«µÖNÇ¥j]
*.
ha°ä$gß÷Ùïí÷Ç¹ï×'/	`¿²$9ÏLæ$sNÎóÜÏ}_×çú,
c~úé=ÆØR¦=cL®µV(Î9!ð±ÒàÚ)²ò3âû>G5Ë²ÜàyÞÉÿýßÿ½íÖ[oÝôÈ#Lßu×]£¾ï7F`¥¿Ä2ÈÇð¹ ûm0±r¤µ6RJ-¥41dÙnH)l!b8çÚó<cdw {  0vÐa\ ©Öcpeú÷¤bìw	þ¹¯åìj
U5ªºÖ«AUJNAûöíÃib×º½¼*Çû]I¥}~¸Ø¶IÝÈ×øF£©»îºë:aý~aq¦Õ!Ã ©úÝs·¾õ­}cL,È­Æ! pÞ£k×Ñ{9é³pÏßó<UMwï¦+Ýà@@7¶+2Æ8ýïÿûõË/¿¼.ðmáBcìYâVëC7Qg¬I\ê¼wÜ°¢:¥?®a·oA0¨«ì÷Ë d{NJFA{öìÁlkÑÁzqk©*{Z»îµãÞ÷Î9çyÄÃ$©ù¾?òÓþ´òµÖÔ÷}äö#YúT|áZ}ÆXï3Î7Æt­²ß¤ aðÿÙ®/«û{OÜÏ5d'pÌ1æ«{{ö«  ÔL´ `ê?ÿó?§ É²,$PBª2¯V`CVBHce¯×K.¼ðÂù½èE3ÆJ©1¦Ä«v»m1¦ÑhHVQxH²ôÑ°·W¬sªï²ï¶ý"¯×ë¢¥Æo}ðÁ·]{íµ[¾ñolhµZÒf$~«Õ"Zk¦)ÒZ£è÷û$	0ÆÀÉÒ¢  ßï»÷IOLLÈåååÒãxþÒK/Ý÷©O}êÑñññû)¥E±O)Õµ¶]V=ö´ÿtá~Ãá[SÏv9í~& Zë1¶´yóæÙ/¾xég?ûÙäòòrD)e2r÷ Âîg©îZkãö@Ç F'©FAÇ¦éà­wÜyeó.ß÷«ÀµaBNÓÔDQ¤úý¾ Ñl6BY¥q{ò³uO©çy ¥ü¢"Î9±þeÞ={XQ!8çàû>!üpa9¬©.Â 06ê^ä²,zgsï  æy^Çq!bõ	@ 8ç¨ê½èr'Ï1Æ w>ÿüóÍ§?ýi, sssÄúZ 7Iq`ò2Æ ÏsS«ÕL·Û5###&Iåy^n%1ç¼[e.ùYáT!äXPÇ$à¤IÖ -,,ÑÑQÞívãÉ[n¹eãO~ò©F£Ñ(Ë!pYÈ÷}TõÔ¬ÁI»©¢(Ë[ÞÒGõFeÄro$õ:ï¯ P´,Ëc<îyÞÉ;vìxñõ×_¿í¡ÂlØ°!LÄ¥¾ï4MM©<Òü11F]èX®ØpL7ÝD®QJGí®ÊÐ*ÓNãØ¡ÒÉòIÍÊ-Ðløë>ï3lVäO\r$T<&ÿ¹,´äzô_)%Ç×ó<¸ýöÛ×ÏÏÏ
!¢0YeXÓr8	{¸ù7Æ,Ë4¥´äÇëÖ­[á÷1ÆXÙ0¦'±¿Ö®£w@RÙ{\%|ß/1ÆV­DÌ0P<JÛæYÓu«lhïÿ÷ëív»]Rr!1ÆÈçÊ_¶ZW:»W;OÌç¨é8jUóê¹ZeYUvÇ6FûöíÃ°jQáöúCÖÝ±à1¼¶>õu6v¥c2ÆFfff&yäBHe¥b;,8ÄÇ¸ê?iýÊM$Æz¿gyfÒh4VRÿêµ'ñü=ÿjïáêlÎ9¢4MçyQQc{öìYß}÷M0Æê1Î9'eY|A®ÆÈ²Ì!DEQrÎã+®¸bÁ÷ý °b`ikocUOÇTý àj9ÆÂÓ4M½0kYA0 [¿õ­oþñüä»îºkjbbb¤ÙlÖ²,ó$!cìÔ°²²2 °Ü¯Òs«ÒÔiJÆX&X)böï|ç®¿ú«¿z´V«= »³ã.!$/ËRÀ$Ìóô=íòµ*®RÑã/¬[·nÉ÷ý!$l($øÍÀÓù^»ýÉó<§(0Õõk%çP¯×MeN: °çyVÙ¨á°zcllPv¿'ÆÎó\5U¥ÖZ)eây^ÂKc% 8ÒÔ³ziõ °/26Æ0­u(häy6ç9vÕ6©f pÓ@®:&£NOO!ÄÀ´ÓÑ*Õßõ>Qñ9# À1Æõ8;Æ: xÕb¬mí6['q/H¦
 ¢(ú7n\Ü°aC÷{îÉlÒ©QGÙv	6ÕºÍ&ôû}  ¢l¸ÒZ`|9çFJi!!¤-Þ­ÀÀSmrî÷û}¨×ëPn·Û´,Ë°V«uÊ²\ÿ÷ÿ÷ëÃ0)Ë2 Ò¢(°ÛtjµÚ@Ê]rÝ½Ã¢0J)¥µ.£(_ùÊW.EÑReY*ß÷M¨ ößNdé°cêRÊéo¼ñä¯}ík'///o¢h¤Ûí`dzÈ½#nB¿AâÀÊ¦ÄYPk0	®ÊÉlÁBÛr±÷Ü§DU
¥'óÏû]~óLy¦ßk8<À5ÕÂ¯Ú`7k×½ºPYcìQJ[ó©Ï|æ3SKKK­z½î%IB!h	áÎìê»®2nM$ä]tQwrrrÎ³bØÎ.`íÙ  ü)¥ÁJi^¯×cWÌ¯µq{×ð~PmRÊóBüx µ{÷îñf³Ù²¶Ä¦þf{Ôê»ãê²,!¢'k¯]î9Õ¡TU.=ìTílSwïÞM11FÐóT
µýþèªg{UºiÁ_J	Rí;wÎÎÎÖëõ:RbX0â[]mÝÐÕ2­B«ÓN;­Àç¶o8¦	GK]R¸ÚÎC8çç¼Qåèõ×_?îy^Ëó¼ Ë2ZªªÎôõ]L)5B¥Ê:ÎòüÁD-±¶9~ÆíSGóUxEQ +-GR,`J)1Ö,ËrÂó¼Ò4Ýü¥/}éüÇÜúØcM~úé­~¿dYÆBØzAïûÈÀåÈ"Nò2V-¢¢ív;_.ËræCúÐ¯¯ºêªûëõúcZë­õ¼²OÉ1Ò%5[íÝCbµ1Fe2ÆN;í´7övïÞ=J)UZkZ!uÖ«(Na8 vÕÇ`u·ÛÕqëN§£÷îÝkB(cÆ£xU2cäö?'/¶`B¨,Ëd¦ t¿ßsQeQe)!aÃ0Ü/8 µîI)x3?+  [0E @ò<÷´Ö±~¿ßh·ÛçT+«_'éÍ²ìýfzzÚTJ]óñ\¤ÈM(´ÎÃ À_ZZªc|cuÌªïFÅ³Á& B-(Ã0ì!Øå_~à;îZYYiJ)=kä£Ó÷}HÓ¬Fúý¾£³BxË-sy×(" Ä¶PíÐ+	@j¸pr)q#ÏóRBBÉ[n¹eã-·Ü2ÉkEÁ]jªÕj5ÈócóP÷Ë¹0BH!D6::º<==}Ðó¼PEÌó\ÛÚ¼@¦2¿óËÉÜ,¨Ç0Æµ~¿?öÅ/~qú¿øÅçy­v»5M$	^^^FRJÔh4 Ë2t¸&±.RÞ$uïTõsÜ5,ÿ>t·*±#0þ+`üÿb\7«ÍäpÈáµðÈ[¾ýB!Füñõÿó?ÿ3 õZ­Æûý>¶M7rrËaé¦+8*{­c|^ziá"¡
+{7Nºw¼ø¤ãµ±cY÷%!¤_«Õcý4M±®¦õ¶D'! {V1!D´{÷îö¶mÛAøêêpåÙÜ³ªkÜó<pV4ÇÛýY)ð­´×yUïWõtg¬=³0!ÌÏÏ{eYFsÏÖ®6¯]ÇP\Yhu[ÀÜSK¤ó³ý¬1RÌ÷}<,»©®-«1EQ¨N8A8¹'¬±ÿo åPËLCÆ\%ÓZ×ò<eMþøÇ?5ÆÔìßcBz:ÛgÖÏ>Ã2Ïóø¢.¯Õjû1  $BhÐË+ûºÕD  ¾ïã²,!ÆX2 [}ôÑS¾üå/oþÜç>wB·ÛmÎÏÏû###´ßïcÏó!úý>PJMEH)5PBRZkcÕ:MS155ÍÏÏ/·Ûí½×^{í¯}íkï­×ëw»Ýý¾ï/1ÆÆX)¥TRJí¼«Òî`ßîê cÀÒI'4{Î9ç,=òÈ# Y BçÜT[ `¢()¥)Bc4ç\sÎ¥RJgY¦´Ö1Vöz=E3Ï<´ÛíÚM7Ý4Mæm(µìUmÁÔü¤NÍf>66VEQLOO'çõRÉääd*!Égy`jjê×ããTk-íÁe#@1Â
»Ýn#Ïó ç!ö88  õ,ØÔëuÝn·ÑÝAjóq¼Kâç°1ççç9 ä¿n¢âÕä;W,[(S¯×UQ¥çy1 K/½ôo¾yòK_úR[)aH1Ø6úÈ5nóíõzsõz-//ãóÏ?oÙ²¥±²²2yðàÁõë×ÏTÊb    IDATAÐÓZî¹3ÆÓÀçë¹&ÈnÀ8cj	[­V'Ë²õû·»cÜI$¬×ëLk]ÓH)!MÓÿ¦Ñ<¾ÛíBYzddDæyvÚiËA,¤iÚGEQh;!xÎÁ¤çêr
Ë:Cç!Ï²,züñÇkeYKKK^­V£»wïÆív·ÛmH%I2DWÔ
ðªÐÃ±'ÝóNLNÙbÿ@Å§cÝ=Ïéÿå{»=ÁyÐî^¬ÉIÏC*÷#Ö:Du¾ò¯)¥ à÷û}êyªù7jXí¤SA N9åRj­KB´ÞP®]Gÿúª¬+më$ÏóP1^kÿÖ k&P¿k×®¢ah'ênù¬¿ðÖ'sà9äyÞ@éà<k×¡û¶ëVÉñ!µç²ÊdÁ1Çq­ßï· ¨9ÃÿáÐ5ðõëC*cÑZûRÊV$·ÜrK1Ø´R¬µvAwÓIAÄ,KYaË½èE¹çy¥\f­±ÿ^ õI©gÏ
	!£Qmzë[ßºevvv"ÃZY¬ÕjáÅÅEÄ9+xx^«Õ cãû¾ÒZóîþéð}ÿ B¨*,lªµø0°x¤aó_·{&BP1GÕ `2UåÖ_üâ§_sÍ5[ðLLLLÔ²,óB ­5ê÷ûàû¾ÔàA@½^GÎ"©ßï;U)ËR7MY¯×³G}tùe/{ÙÞk®¹æÁW¼â; x0ÏóÔqÎeËXGK}h{1V
!zív{á¢.ZúÚ×¾eÙ¢Èëv»¸êA)5ç³ B
c,R²,Ë²×ëå PxWÖëõüÌ3ÏÌ.¼ðBõ7¼rÊ)ÁÍ7ßl|ðA²oß>B)u~Èèf5ÓÅ(!Dþò¿|éª«®Ú?==½811Çq´Ûíz½>¯µî¶Ûí\)%0Æ9!¤ ¥óÒlõÇSÏêþHn&X³{ìû>KÓÔó<1ÆHYx8ÿ¾jÂclÐ\X|e±BJ)l­qEÝü÷ñÀW!<HíØznsu]5R
y0addÄa¨Ê²Ì!iû®¼òÊo¾yü±Ç«g!BRMqFbî-Ý1Æ¨ïû¾²ùÅ/~qBqàï|gäû>³U@ä´*Pp´`$	j6cÌc Ü¹sçÆ;ï¼s2¢cE9ç(MSäûþÀ»!ÃC¼(¥P«Õ MS°& RÆqÜãß¸D)]¡fBÉ9×GJ<V
ôêÊ&')J©¨×ëÆX¶Z-S%,--¡05hSW×Y5îÝýÝ°7RõÞ9Ç*cfH|DæßáÉóóéªcÕ½¿ÊF;Ò[klE @^­õè-·ÜÒYYY©yÇâ8ÆvªÊfµá8ýZkm!Ú£~ï÷~¯\¿~}FÉc!¤mPÄQc ½v=³ue7cå0
!T0Æ²0±ráÆÊÕ
C "²V.BË²ôxà¢1®EáaSëùûõW÷®ªò¤Ýn*zÓq».vW'V­Fàß|*"ceY­×ëu:N!ÄØfÖYk¬7ÇÀ:që¡Òø;bJñG}´ââ¨Ü\k=è	]Ra¥6ÆÏóÒO>¹ 1F8Ö<2·µë)ªrausîy^Sk½îî»ï>é»ßýî&PG)ø¾O }ªuåy±j@1EQd###Kg}ö~ß÷ç}  ø/;ým^¯¢(BpÎ9¥Ôb1¶!ãÍ_ÿú×Oùô§?½õGÞ´iSc<xEQDò<Ç6m×PJBHBMiÇý~c¡Ûí:õ¦É²ÌÔëuEÌ²,[:çsö~üãèÂ/¼§(´Ö{	!K SJbàQçêúáÑ|ýjB("¥.}öÙ[·ní=ôÐCÑÑQ¿(
«
È,Ë´µGó RBHÚh4âSO=uå./¾øâüôÓOÏÛívaßÎÜÜÜø·¾õ-µÿ~ãÐSßk&&7oÞÿ¦7½i' < NîÞ×Zw-k±4Æ(B2Ë²­¶Y¥~¶12êâ-ìÍB!<77GÜ´7c7É|2cé¯K2µáZJ)Ri=¥TÊNço=âÌkäÐó0l"´oß>¦é!ªñ§+«1ÔÆ¨×ëai)e©µÎò<}å+_¹û]ïz×ä'?ùÉÎÂÂBÄ9§Æl?9pR
sXYYN§i¢»ï¾¿ûÝï¦SSSäK.Ñ`UÁNo8çÎÄu L>_ Çïò¹îg°©°sûý>m4a¿ßïh­×æ3YÏ9ï @H¡«5ø*ðeiªoRjà÷Å9w	Àª(¼V«uÏ9çq/7!$+¬s¬0ÎA¡0ÆE«ÕÏ8ãøÆo,¢(RzttÔEªõÕlØ ß±ªÌ¿¤n ²Åu$Pï©&Ãû\¼ÿ/½ª_TµÙ¯JË¿Ç3ä)ßEgïWÕ¸4Duîºë®©ÙÙÙ!DØét¨»aà¹êñZª÷*h­õI'$êõzî¤V6ÖoÇÖå ±², a*ççó,T |hÝíy¼;v4;ããã ð0Æ~3¤g³q¯zBÀ&b ñññÃÍkûÏák*ËÇíÛU
çkÍ4MS?Ë² |X%à#kk×ÑyUX_Ã!f (BÈ7ÆÔo¼ñÆºR*ÀSJé ÊBV~xÚºÁpÎU¦Å¦MºÍfs>Ïó!¤UÛ µ&ðyîo*C d}^}¥T;ãõ×^{í	yOÖûý>ÓZã0Qeh¸®1=Ïn·k:^^^V¾ïçw^¯^¯/eÙ7Æ®N>Ê=   Ïó¨Â£Ö¢BLÖjµ-O<ñÄÉùÈG6}÷»ß=!Ïó q{RJEæ#'÷@A EÇ!D!ÜÃ¤X 0¾ïÊ²L!²²,_õªWÍ|ö³}póæÍ;1z· $É¢(  m q{oÇ¾|¡µ¶ÑÆII¥KëÖ­Ûþùç/Þÿýc+++¾õãCRJÍ9BÙï÷KP666ô'''Î=÷Üå7¾ñgyæ!¤ ÊC1Æ5 ¾÷Þ{½}èCõüàcy«¾¸V6=` cò `·òA!ÄAÎyBÉ¥@RRJ7 QAH¨¤/?Û{#j~e! ={ö FÐëõÞr~j  ßï"- e<ÏSy±^§Ó§ö8çEY
!dÜdízJ  )¥Ðüü<ãx0ùvRk¼"¥Ä­»Øz/@e®@×±!ÔR¼òÊ+ç¾ñoôggg;µZ-(ËÒ¸pkV
  YA£Ñàë¹¹9qÛm·%ßùÎwÎ;ï¼Yu)¥BHYJí õ©vL=êïã8Fív¤iêÅqÜ LîÚµkãøÃÉV«ÕX\\ä1FRÔl6ÁIñ¢(2iR
êõ:äyRJèõzbRs®â8.Î>ûì^K¾ï÷¢(<ÏSI'³8V/!A yçÜø¾/ûý~^¯×»\rÉÒ·¾õ­1VÔjµ ÛíR15MHÓôI_7Äò¿ÚWÓð%ÃÐ3é¿?Õç½PdµÕ8Ç"a~2Ì|.Î£­wò*cçû~MJÙùÊW¾2öðÃ7\ø19©£¦8öóñ£ºé:X¿Pç¹R¢º´´ä5ÂJ)ä¼zÝÔ~-Åóè¿ª»m MzÖÖóÆÙpáwÔY¸3ÚmÖ 	!0 °_ÿú×ÁÁ[·n¬'QJ!W<ÛcÌùå,ËuP§Óàkàßï]u3¼v­1,+cpQT)ÅBÔÁ.ðÐhí:úkÛê³´¦ùcÌ¥5!DûÆolpÎ½¢(»³16`þ9I¾K#õ}ß(¥ÂDQ¤Ò4-Ï:ë¬Ä÷ý®R*!T_G</×®gïrõÝÏMgB(Ë²Ñ{ï½wý÷¾÷½ÉZ­ÖLÓÔ#PGT8:dø*ËÒYZ­&»Ýnþ÷¼'î÷û}Gd°Ïßâ5à<iQ¾çy-!ÄçüÆØæë¯¿þä¯|å+[î»ï¾Éz½>AT¥Ç9§A J)Ê²¬?NÓTt»Ýd||¼{Úi§esss|ïÞ½õ(¢¢(¼ññqÒï÷QçºÓéïûK\rÉ¾}ìcOMMÝ+¥|PJ¹ ¥ïû¬_¿%c"Aíy$»ÂþïO1ÊâKÝ æ·oß>èv»¼^¯{Y4Mñññb||<Û¸qcË-Ë^xáÊë_ÿúÅN:iV)µHY^ç2ÆÆË²ýæ7¿9öö·¿}!4B)$¡ÍfÛ{ªg¬½/c,;N®êQJBóYÅ¾ïc)¥T `<Ï°ìMëªµÖEy¶}v)çÒ4u)&MSxè¡ê0Æ Ë²ÁïRÇñ`b,Ëb^ ¥ë×¯O£(ê1ÆR¥Rê Ì3mnn)§Î£ÌÑçmª/ò<I)Éìì,RJ¹Ä-ä9ce9ðÚp{W 7M@!­5¶S{ç¹ö}¿4ÆÈZ­¦	!ÐëõÍ\Ìó|ßß÷M¦ÆN
dÙõ×_¿tÞyçíKd?c¬+¥,ß0Æý)ÀdAF PJ9ÒjµÖ}âX ¥TEÍóoÚ´	öîÝs¡)BÇq¬m¡c¢(8Á>)È_ýêW÷Íf¿,ËÜ#Á²hu&ç¤Æ÷}Rj)¥¤fY-¿îu¯;099¹¸gÏñN§eIÝsRBÇÒjA Fùî6^{O±ÂÝ¬q®gºænÏúmÞ#lU©¨ê:@éHûÿ«æþXpû+æâ86UirøË­{oÑjpÂÆ
¥#iNÜÿýPD)eý~W­ÜG1ø¾o¬É³ákËÞ2ËËËÚ%Ù}c<J)³~nhx²»þý×°{ÿ¤Æáª6-ÕdN·¸!G$²,jL)%Yy³³³ D_kM1ØJAMÕµº÷Ìÿ	ÃÃ%®;µIuÝ*¥\Z±òw aPëxØc*l«Á~ã=î¾;Ë ÷ß9çàû>ôz½Ô­ë=H$¤Ùlb;{RðªçGU²v½°÷W#Bcc°í!ÄÈÎ;'gffZ!cLíp  
 â8X8ÏÉê ÕúTkB|ÙË^c2Ji©RGò°~>êüãqXYUi­QYØ÷}çyÔjµ:×^{í¸1¦e	\¢*  ²,ÑpèKuS0ø¾ouÎ9ç$6lX¢¨Ï9/¢P,yRýx´ìÝn¯µï²=7Á{VYB'ßÿýÛ>õ©Omùîw¿»!ãñuëÖ5R¾ÄXwê»^¯§£(I½^{÷»ß½çª«®Z¾á¢÷½ï}SóóóãN§1ö,p+Ò4WVVæ/»ì²½ýèG¼ ¦Î À²}÷¬ÊTÁöíK®·|!ÔúNÑ¢µÖA)M `îU¯zÕÞË/¿¼ùío»ô<¯_¿¾Ü°aCïÅ/~qÿ.èmß¾}i||ü !dIJ¹¢ZÊó< /BAI)kJ©ÑÏ~ö³?üá µ÷}¿Éó ¤i¢(Bp~óóÁPÕ÷}[K!DÉ+!¥ÖZQJ#Ù^w ¢tëêÙ¾Ç4MSÃ  z½xg  Î¹ID{§q<BÂ0trapA+YññqPJAes®6nÜXRJó^¯'|ßW¶yÆÅÁ±¾);kw:Ð °ÖJ)ÙÂÂ5Æà(Qó ,¢V«Âq@ @ccchllÃªw[XXàívI)ù®]»ÂÅÅEO)Eì¡ï2È¾;Ð[­¤ijÒ4±Üó¼nYQ-+¥R­µ°ü@Ö}¬'LºÄfcãw»ÝúèèèØ=÷Ü³á¿þë¿&=Ï«÷z=ñ<-//#­µi4¦ßï«<ÏÜ¥DJ	!8Cd1¦RÅØØXrÖYg-çyÞó}?·ÑâæxHÑ®N1ÆRª1ÆÆ¸G)¿üòËç¯¿þúéRJË²DöýfvÈaáPR ¢,Ë4 ¨ÑÑQ911¡~øajaRlßt¸"ñ·Ù~×ÿïS½[ÕÂÌvsÈóüÃÝ±=´ÜäyEáEIÄôû}³²²b$1¾ïßü³ÍaÛñ|¹{â
;¥êõz¤ÕjùJ©¥tÝ~ô£<ðÀB(*FQË²D0vý!j4"IU¥ÆkÆTJi1%è¢(°X¦!®¦2®]ÇÖÄímB¨ç9ÔjµC½ª?¯}ö¬¬[¤BJ)1ööìÙS6Æ¸V¥Ï9Ï	!ÊúÔBÈT= å@¥á}ó²«!Cp>Å!#Ðju³Ò'½9®l'é®ú¹YædÕçëûâÀê>¥BQ¡8ÑÒÒ¢EA<ÏÃEQ 'Çö}¬_ä!Íúëûè }ßøø1Æ°1e	!Ú·Ýv[§×ëÕ£(ò<ÏÃÎðR:°³R!Ä ùõ<¤clc&MSçyyÒI'e¾ïçIÈÕL!½¶XÇË¶(ÏsÄCR¦©ßl6ssscwÝuW!Tó}§iJc(MÓ÷°ë«ûµ¸½ (
Ã9WÆâ+®èÌcºEQä6ý÷È£mÿÛ°Nf©À$çü;wõÁ~ðï}ï{ë¦¦¦FêõzMJÉ14Ïs È2h%Ü0µ1¦lµZ½w½ë]{¯ºêªû àÀþáF333þîïþîÄL×ëõÆcò¹¹¹¹w¼ã~øÃ~xttô×ÆÇ1ûB+ K[8¤÷ÎÚÆöÂÓ×ZÏ|òÉ^}õÕòüóÏ¥ÒO<19ûì³Z­Ö²¢¯êBºEQÄãRa(ì , JéÔÇ>ö±?òl	ÃpªÕj5$ñ	!Ô÷}Êó|ÐWºµ`ÃX±ØÐ°,ËsN_s$:ÃáÔçüyP7!tSVÆ ½¼¼,~ö³ÍfSöû}-0µZ¢ååe0Æ@«Õ:qæêùùyc>Ýét!DU@E|mBøäÞÒï]xJ©sÎ À)èû>¸ä7u­Êz ,Ë@kí&¬Ûí²v»MÌ÷}oqq1ãc;öY5mÏIÓ45y«V«%G}´çû~WJbR;ù¯Cä#y ÚétÏóFn¸á±åååæøøx¢I ë]d(¥fffF·Z­|zzúbfqq1TJEApc c,¤"BH>::ºò¼d!´ÊBÒÊÍ±n¢yFQ0Æ$Æù÷¼ç=ûxâ±;wò~u:ÔívBXªÛ¥±RÊ0ßÿýßOßó÷ôG.//Zkn/MÇû]+	;ðHïÐ¾×¥ð¤¶W|â "<,[F¾ïµpºª,KÅ1å·ß¦©?Þ,ËGZk ¸V«1cLc<vðàÁ_ýêW×ÏÎÎAàEA­¡óàÙÙ¢Â !Deöûý ¤AJ)Ùh4ú±<ÏóuËËËÍååe³´´#Ö]UfMÂwl¬/7)6Æ@®E¾ï;XíyóÁU¿?Bì1VF!þ=÷ÜÓÞ½{÷Ô-[F=Ï[ÈV½E\3aìÐÅT¢aÿ¹ÿëþï~6 ö¡,Ë1¦0Æ±¶aÇuý8ÌB÷<ÏEa!&ÃÊÃÉ5@èê÷J¸RJÛn»½å-oñ9ç\A=ÏÃycÎ¹êõz¨2 :dÿ_;ðÂ%j§i
Zk\«ÕHYRª®µýéO:b	  RJìH!H(¥ÆúUJ©É²\c F)¥´Ö1LOOw ©×ëeÇÊó¼µ çñÊ²Ù³åyNB<z¿ß¿ç{Ö/..i2±³Aà±' *kË õÓqÞyçeµZ­[e
 ÕCö£EQRµ¹ÒZ#k@`Õ7µÚxß}÷zÍ5×l»ã;6xâ#Òpaai­IEÔf®çf0ÕÊÊJñò¿¼û¶·½mâ1  úgögË[·nÍÿò/ÿ²\XX×ZóäÊ+¯|üãÿøÎF£ñ ò	 8 = pÊ1mï«9j?×ÓØÚFcÒ<ÏFQ¤_üâ/qÆd¥T¯,Ëc3Ær)eA)-m?­ìódRÊÆ¸933³á¿üå&­õäI'ÔÜ½{·ïÎ@!ôz½A½§.¤Ù:Ë1fR:1^,"Ò÷}äÔ
ÏçÞG  ´KDQ¿æ5¯¿ÿýïç19>>®LY(ÃC(¥¦)lÞ¼æææ CÔYéÕ:R©Z­¦Ý¢rS£µ	Ìô  ,K¢AøÝn7LeYf¢(2õzÝ8:¸I»9°,¦«ZI_)Õh6Mc)yçB¸RJ±Ý×,ÂI!ÄA crii)yÙË^¶tñÅÏ%I² ç\Àªéøq!+³&²:$¥$Ax½^¯a½îºëF<Ïça8U±í¿óï¼ÿøÀ­÷ÜsOð/|¡v÷ÝwGZëN$iÁÌÌÌi 01Î[­V<22Ò%¤y ÐA7:g7hm§±RjvÃ¿þ¿ù>33#>úÑÊ»îºcPB8T5ÀÈnÒ.^J)ó,Ëºo~ó^ñW¤§rJç{îAib1{*ðïéÑªÆá$pOøKèé3}¹óÍ6ë1f,°WM4-h}a\â¯ñ<ÏdY&  0Æd¾ï§Ê~¸lX.}¼^I¦cvÆßëõFcòæo^ÿóÿ|cìq¦c¸£r jË-Ù^ô¢½ËËË÷ú¾ ¢ÞöíÛó7¿ùÍÝññqýùÏþÕW_}õ8 EÉðZch;  3Ý/ò<²ìRÖkFc "m=RÊÖÆÇ"3Æ BÉóÏÎÎ6²,WJMbçÃ0Ì¬|ËXwm¿©¦UûmÒÐB[pkÐZgÒÖ:J¤eãq¯±à¨ûhLÚ>'cARd÷4$!GN=R% ~óÍ7×¤í$IQqçµZMeYfvi°³6Ð?ú @gOVÓ°ÖeYy×¹ï¾û¦vìØ1ây^hÚØÚ!×7
!cL3Æd¿ßWFÃB`aaÁ±d¤1&è­_¿~~qq±Ûjµ ÔákgÒs·eA`u1ÆÔó<¿Ûí¶ ¼îºë&}ßoRJ}Ë v Ç ü¥J@9\áØÂJ)ãû¾eYÆád{ÞGË0¹:Dµý7RRBH1]XXØøùÏ~ó~ô£éV«5 ÑÜÜ¢pÎQYàû>r5¢×mÍ®ÄüÉÄccc±y¥Ô,!D.--õ/ºè¢ü;ßùNúñëþó×®¸âø½ï}ï£¾ï?\Å. £ö  eÃ2WÀéÙ¸ÿÕf[94    IDATaö!ÔE11 i{1âkc¶vlYzcýò¿¹ÿþûÛÆÚ;¼f³I§§§Ñìì,  êt:Ðëõ©§íGL)¥RÊðïÿþïÇ!'^|ñÅÝ­[·ÎSJ»6D=0¾gû eYçÜdY,K!Jß÷û×\sÍ" ôo¸á"cí¼¸q¨Óªw»]¨Õj°´´ä_u«ÕRy7oÎ¥¨iÆqSjgt¹v*±´|mQZëbóæÍñ­·ÞdYÖPJycâû>Ê² pÉxJÓâ8F @Úí¶ßh4ÚJ) AHPãñÇ÷gggiYèÂ/DÆ¸õÖ[ÒBó¢3!%È§§§¯¾úê½g}öI, @ª®Àtzv× ã Ä÷}Çq£ÝnÿÃ?üÃú¥¥¥Ñ "Î9 ,¥DBWp ç<Ík^³cü«ÉÉÉë¯¿^PJ{öìY×étò<o\vÙeìØ±ãe¾ï7oÎ¤\÷_5ÁïX~/ª  3WE¥ 0WÝ¶m[¹mÛ¶>¥T¼þõ¯glU;Mz½ªÕjRÌÞÉY-Ø¥$)  {öÙg8õÔSg¥ù\ wÞygÈóRÔ~_péÀ;üîz?ßÿ©I>ÒQõcRJ 0RU¥ E)UÎ?Ë5ÌÎ^ ÚÔ1ÆÌ*¦ 
ÐÊäää<Æx^)ÕGð$?ÇÎY»Ü»êÑ11¢àq×<Ïë÷ûë¾óïL-,,´	!Açsÿ³ØpI!uÚi§ÅúÔ§îo·ÛßÊ²ìv»Ý/BB¥tlëÖ­;Îq£¹¹¹Aìð`f­É:6.¥Tõ=[ìRcKPnÉ¬òÆqµÖB¤cLØWÛºe!Îó?ðÀµ;vLlÛ¶mSÇ1cLû¾ï ¾ÌÚ*>|Gÿ §±`¢ ð<OSJB¨ð<¯EÑ<B¨«µ$:Pãø.'A©~¿/cs.1²2ÀNºTõñ¶ì¤µ&aú333íÙÙÙõëÖ­¢®e)ò<7Bsãóp¹k×àÞSÎ9 "ð1uÎùè7¾ññ8ÍfÓ+Ëh­~BçÜPJUÇyYq$yçbÚí¶×ï÷Ã PQåääd\¯×»Ýn7UJ	ëµV/<¿Ï-,,à±±1eÏ²¬Ñl6'÷íÛ·áW¿úÕ!¤Ç1¢gYlúï!vUËê É)o<Ï36Ô$I¢a5|bt:<|:Újge{B¬b± L|õ«_=áÛßþöÔÔÔTûäOfff¬¬¬ 0/48.w/­ò:lÜ¸ @YJiYE/¢TmÜ¸±û/ÿò/3wÜqGý%/yI¶~ýú=EQ<æyÞA èWÎE},Åªþyv½iÆXÉSZë °e½Î¹ -ÐöÏFJé4ëï¬RÜzë­l÷îÝlbb:åÄÁA)Fc`áê/ûY0 jÞyç/~ñ'7lØÐdyi)%j4èù¶@ !Üë1s.²,KÇÆÆºguVúüDØÆ{ÐP¸BÂÎÿ¡,KEºûî» HÎ<óÌ>¥4@	!Le(Ë2¨×ëÐh4mLëÞÑH­Éµa)cLQåÊÈÈÈ¾«®ºj÷©§íÜ¹3¸é¦x·Û%A [°!÷u$q¬J¢{÷î `êÀò«_ýêè+_ùÊùsÎ9gE)îÛ·¯¦bõz_yåÚcî¾ûnRáCÇIøòò²ì²Ë.[|ík_ûD¦{£(ZÊó<3Æ(g^eÃrÀÁFbQ#ZëuÿôOÿ4íy^ËJù!¹Û¢(Ðx§¤1fittô	P
1ó­V+YYYécæ!IeòÜsÏÍ1yQÂú}ª¤õx¬[  ´Ül¯×AÈW¿úÕþöíÛGï½÷Þfe¾1®¬¬¸ä¯Ê²4v !<Ïë#f?ò<ºuëÖ½y£íÛ·ûõz}dee¥â&s´¼C$ÅG þÌo;Ý©R¶Ä¨}ºàêßÛ=VªSJbÕÀI­~mcÆywaN`BªÝng£££óçþ¯×¯_¿s>/H+ àôëÏ2"y·éÆo<éÖ[o"ÔBÜ6_s¢ÑÎ¢ ôm·Ý¦~òäW\qÅ"clO·ÛMÍ¦±R¼qãÆ¥uëÖ%wÜqG°ÿ~=BWÁ5ÉöÑy¡kßð*IbzzzetttclÍf°êMçEQäïÚµ«6??ï»:phëA `°ïûìÀõ_ýêWë.¸à¼(
Öét<  xn·1ÎBÂ6vÈ5wnÂ]Ý#áólu2x;ÐJ)ÁKkµZ!cU@ý¥Ê°rll,-Ë2æ§F/,,1·aNØù?;+çA]%Áûi¶ï¼óÎõ\rÉæùùùxllÌ!P½^ïK)XeVh7¤X0}k1¤RR jõz}´ÛíNÝpÃZ­qÎYÇ¸V«çyÐï÷¡V«Aç:I²ÕjÍ_}õÕu:=»víJ~ñ_ ¥ÔØÎ;O+Ër!T¾â¯(¥y¥çy*MÓãÂÇú~ Ã0L¤£µÞpÝu×°°°0Ún·Ã¢(¨ïû8Ë²/|uhP]KÃ{{¾!ÈóÜ g35\Ï>BævU-UlA Àf$<ðÀ¤1¦m}åØúõë1  ~¿ïì¾!\ÎJÍ1'¥dÛ¶mRÚØ¿ÿøÄÄÄ1f1¶lÙm9 tÇÆÆfÞð7øy4MÃ0\È²,FçRÏÜc S]#ccÁ>×(k£`Ùðp³jÈpíz6`OsÎe­V+£(*<(§§§µUaB­Vn·klÒ GsÃz[· J)ÑZ{7ß|sté¥F¾ïsëÉ*íùÞÿ¨cóÙ ç¹±\Qey×]w	!®Õj2ðÿ³1Å"ÍúN8AxârûöíÙßøÆÉÉÉ­uÞív5  f³ @ZkÈóÜ0Æª+ð¸ìFª`v+Ü/{·û¥/}iðÒ¾ÔÛ³gO«×ëÕøÃz!Dª ¬õsAaìØ±Ã¿üòËGÚí6½ýöÛG^÷º×-}îs[WÆ¦1§iÚívóæÍýuëÖµ}ôÑ `Ïóõ4J)M) ö}s¾\EJVYÍå©öcÐó¼ÆØº¯ýë{ì±©éééF$\k]ê§3dÏ²eË²äó¶Rjc<Ï9ÏµÖñæÍ3 ,Ë"qÎ9ÏÃ0,Î>ûìP¬*-C×!õO9æÔ¡wÅ±KRªLÓ´E&øBÉ/¼pyÇçyRk­Ó4Å.1æYcZëTk½ð¾÷½o×¹ç{¿1f¿1&8õÔSiN @V½<k+«rõß:<h3Ãpõ½*æ  #IiÊ°úQkm ÐYÉ!Ô{Õ«^µrúé§/eÙ, @Ôëu¡q÷("!ñ}ßBäèèhêyÞü	'°KkýHe±Ì5+2÷FÐÊíR
eÉ Áºýû÷oýÂ¾°éÀ£±cL 9{géàRÞ­±6õþíßþmú3ÎØ¸}ûöûëõú %I¬Ñhì?ùäï¸ã±}ûö5ïØ¾¬ÄßXO`­¾ï§ãããsüàûó?ÿsÕï÷[àÉ<Ïò<ïüÇüÇÔ'?ùÉP`÷8w¶¹wY6?­×ëÁ¿þë¿~úÓ6õzÝûë¿þk~ÕUWëXõ!mDSõ|º¡Å,+c)¥	Àø¾¯ÀDQ$8çÖZcé ªÚÔç£cÓc²Þ½²,*¥f³,Ãçµ$©µÛíÂ÷<j­1¥UäU)%Ã°ùw¼cÃ-·ÜèC8±§µ>@)í*¥2Ë,Ôîl<À×c`ý J)Xi/RF¾ïe¹éë_ÿúæ½{÷N´Z­ZYLk1ÆÈ©ÅÊ²4!]E122rðMozÓÿÔjµÛ}ß_ð<8°éK.ùÿ~õ«_½R^rÉ%!D$I¢1¦Â 5àøù°²,«Ö&Ó;wîÜüå/y]-Æ¯"EQ¸:f÷T ]5Þ=c¥1ÆVå|H×MÃÉJ­=°xæîÝ»':aFy³'xçy1°aÃ´oß¾ûÖÙwJQxß¾}Þç>÷¹æ¦M¦Þþö·¯?í´ÓvÀ|$I½^ÏRieKQQXµÊË²tI¿Êæpûñ±ð®¹á`Qàyø¾ïÈHÚÖîlô6î¬ó<ÏXò²J1VA¡ø-oyËâí·ß¾tûí·EáqÎ±ÖVVVP¿ßÇÍfÊ²DÐo sÎ1ÍÌÌàÑÑQêû>U6"âCÅzïù 1àû>cÀúû!1RJ)#£££èÀd·v»= ¨&k ôû}¸óÎ;õöíÛÕ)§¢¬ßl6¢(ü²,5!aïûúiæHìæËI9«>~eYj­µð</UJ-ey²$IzàÀ!¥ÔÃ©nîëXDQJqçô{î	Ö¯_O<Ïnºé¦Ú¿ÿû¿7Þÿþ÷çsssm­µßétTç{¦§§Ú¶mÛüñÓ4åçAe@)ÏóLÇ:IQEnÙ²V«i­µq¦âë¤©Ç CÍ±ÿ(ÆØWJµ8çÓ½^oóûßÿþ:N§×ëJ)!vþÆè÷û µF###tii©öå/ùôo¼ñuãããþ»Þõ®_E±ìy\^^Æc,Ó4-Î8ãîÄÄÄ¼1¦G)´ÖÊ®ÏILø¶,!ªÓé)eVeìy^÷ÜsÏí}êSÊ@ú¾o<Ï¼ÎKÍUc!æ>ðì
ÃðÑ²,çcµ-[¶´'&&6ìÝ»w Â
 Xÿä]c*Ì¿ÁáëdlÃFé÷£ÚÉa÷gk*<Ìð8b!2ÔlB±rÀâ¬³ÎZùÄ'>±wzzzÏØØØ^Ïóæ	ç¼¢HÁêd¼í¿[cÊ¢(ú¡ù^¯·Ðl6{ZëÒÞÏ'ÇÂþü»X¿v@caQ¥Ôo~ó'üøÇ? Ô¢àA`g"m}aÀ± -ÓÁj ß³gÏèÞ½{×mß¾=Þââ"´ÛmA*¥|tjjj ÔvíÚ¥CaNk×Ñ}qÎ,
­µ þÊÊÊÌÔÔÜ+¬%³	¾m ØòË_þÃ*["°ÿ£ibß÷"j4(cöÙÏ~nÛ¶ÿñÿ1ö#vfãUpjx¿s¿:Ï8'#sáµZM5MAív[!¤Ó¯q;Õ?^ À
èÌÐààe]öðìì,zè¡xàÑ<ÏÇ[­ÖúÇ{lddd$0Æ J)äyª@)a" `¡(ã/~ñæ¦n
Þö¶·µßûÞ÷Ö K)÷À²1&sLü®½GÏ RW_âaãuûöí;éÿù71Æ: (¥ª£²,¡V«¹Ä_­/..v¦¦¦ü81&kµZ0ÆµZ-rzz:KÓ´¨Õj*IíÃ×®ç¯)ËEQDã8 Emxï{ß»!ÏóÑ0C)%RbÇTrÕäS[[¶æspÆ±Vcs®ÝPgèsPõ¬8ZjT¹`Õ
!ü={öDû÷ï÷,íÙ³cðÿ³÷¥Av]ÕÕûLw~óë÷zTK-KBò #Ø1\ÄÁ"S B JAAÂ$E*qàOÈWÁ±CÀU6¶!	ðcQlYÐ<=o¾ã¾º·yîÈftªº$µ¤î~ï»ÏÞk¯½mÛÐn·e!!´¬Áo&2Mà}ðÁí+¯¼²ôÞ÷¾·rµÖ4ËéTÖ+q]7LÍYtEÒ¶ílÔU÷ý {}dú}~:%¦e@³N',û½úµùQjª)3bÈk_ûÚ£÷ÜsOåøýÄOàz½®£(2µÖ¤^¯Ó0a8ýºheý~môö·¿.ºè"å;1 lÛþµ×GtåCRÅ9Ïíß¿ßjµZ´\.cÎ9
 ù¾r¹ø¾Zkð}Å"$IFBØ]wÝå¶ÛíÚ?üáñZ­ÖVJÔb¼Ëå8± ¨Ì.>%Õ©ø¼N­éÏèd"C°³ ^ª@Ñs \J)lÛF÷ÝwþÑ~RÞå:c
åQ`ÆÄN6M\(èââ¢ñüÀ~òÉ'f³éh­z½ÞÛ[­V÷\}õÕÃßúÖ·&Bëº 8Ø¶½<Ëå`ii	*ÊË42Jx÷÷L(þûuqÒ"B ÈÀÈÒÒÒú¿ù¿ÙÐjµÆòù|clAã819¢!1A@(¥Îã?>fæë×¯>þñìt:A>Rª½)¥dBqÍ5×ôLÓl1Æ|¥TÂ9WÙ³Á9_f§Î`¿ÒµtEñ¨£(eqÎy hoÙ²¥aYV/CÞëõd©T¢KKK(u%(´aaØ}Ýë^·EÑ¬eYóQ-Yår¹¹÷¼ç=KÿøÿØ³,«!ÃcÇqPE ÒR¾ÿHJ¹|[¥RÊ0$(Î¹Îý¦ +\³Q©T^¯9ç XêÐcôJBÉ+ÍE²xä))  úÄ'>±ô7¼á°a{RGµÖóZkRDQ¤cJkqg¢`XÖ2#QJ¹\.B$å.ã
'Ñ³\ÊtÕ¤È¶mÜëõ¥TÎ²¬¡]»v­¾å[F  d¦§´xQ?k©¿. ×uapp/..Òv»«ÕjCaÖRMÓ4ãôîæ®ë.lÞ¼y â0bpRWlèïâ¯!þY]¨Ï­ßü¡ì$IdjÒ££(B³¦i2¥B0¥+¥
ÀR®!p¥JÇkÇútPª)¥,"Ç0´°°n½õV¸è¢ÐÈÈ¤:_HJÙ´,+LÿUÚ@a@Æþ  cl9X©ûìî5CÇq¬LÓäÒÄó¼ h½^WêÔÐ©ÏËcÙk9[d!­N-	 ¡rÁu]ôO|¢-à×ã8^Ûjµðå_n6MfÛ6BÎ9J¥¬Eis¹ÈácÇ÷wç­ZµÊú½ßû=*¥Ä³0c,ËâIèL÷+;3"Ó©ÌrÅ¬p{%ÈsW?½UJ!vAà`+Q}îsß·o_½^¯çz½ ¬BQ¡ÑR66Ã
 ~óÍ7_yòäÉüºuëNÜ|óÍÇÇÇi3Sã´s¹\¢¾(Ó4uf"óëºkþ·åL9ý£¹+îâû¾áy^!¬ùþ÷¿?Ì+*¥ÌS¶ )¥iËlµltµPÉ ¿lrÁ²,H8ç:U(ëºc,RYSáS	®JÈ4MEdßï·á½M²û3uwUJ)!}ßÃ°=Ï#Q  ÏóP¯×Óã@ú|-ã éh>6MÕj5Ëu]!dpÎIªi® @f1V¶m«$ItGêÿëþ·ieg1»W²×2ÒûÁèeð+°3âUÚGãc¼È9?<<<l}éK_Â7Üp:zôhâ8×h4L¥Í97mÛfI`ÇqtJT^#cÂK/½ÍftV'f:ý§»ï^í}ÃÛcúÍR#(bBòÕÃçÍ¦977GÍ&
 Ðív!¢Ý¥¥%´´´òù<¾è¢Ë.»,ç8ÎÐG?úÑüä'/Ãp3Æxak:Î°i­u!cÏ0GaEQd(¥)%3MpÎq6bòó8`þ¶Yá}d	1ÆA<Ï³O<YÜ¹s§«µ6r¹¶me	TöÞdÅ]Ö	 I)qEdvvÖpÇ>pà@þ³ýlé¹çs)¥xÝºu³ë×¯Ak½ëÒK/=Z¯×;Zk`Á÷}h4È4M¼°°À¢(2Ëå2ët:¸_8óL^>#caIÇB¨Â[óÅ/~ñ5=ôÐZÇqJ)ív»¨T*AE*0ÆÀó<pþùô=ïyO®R©8qâÒGyäêr¹¼ªÝnÛÍfÓZ\\¬APò<.¾øâÐ²,_qÎ%¥T÷ëjü,Ì°3¡Àé¼~òWZJDi­[¥Ri¾Z­¶Ba&úiÍ9çBÿÊ+¯\üùéB¡0+¥l
nÇ0ÿôOÿt¾P(4ÀOEe(¸2N5ô" ¤i1ÆÃ)]Â(I¿×ëµµÖó¹Ô­uÖ4ÍÓ4gòùüçy3¡)åa3ãv»=Ç9_(Ëm R"ÕUÒ ×®ÜûL;¤_³X,B±X¥zôÑG!$ä·Úíö" ÌsÎçRóaÌj­ç$UJÍFQ4+¥ÑZÏ0ÆfÃ¥ÎsÎq÷R1¥TBñÇéXfgû²,%IBc&c¬Øl6üñ'OVcçqÎc¦¤àyÞ²¦[*µJ¥Ú¼y3zýë_Ï È¿ýío?ÿþûï¿ÊuÝñ$Iì PÇÚ0ä5¯yM1æFCeÉaLÎì\ÁýÛWØõå¢!RRJ[­õrN¹6!¾ÖZ?~¤(uû]Îå²q¤ìùUJ¡$IPÇØ²,611á0ÆÊO>ùäª·¾õ­zè¡Íív{£ÖzÌ²¬r«Õr-Ë2!4)Á)8ÃÈ®Qê¼·d®Õ©)¦*­5ÒÑZZë D©Ìxä4YÏfÃr®cÜõ}VJyÈ¶í=Ò}JåøÎ;½^/BÉ´1¦u«ÕZnúx´Ö¨×ëÇqLÆX¾Z­Ö)¥k>òÿo|c³ã8MÓã8v¯×cZkì8N6.²=É]qCËD?Í æ\,úÄ1&AXã´ÖCßûÞ÷Vík_®ÕjE­µEO-Ü?6fç+¥¨iÞO<1qäÈ«zè¡7ýÃ?üÃEçëõ:Å^­V[âwÃàadÒç_ãöÇqL\×µÂ0,µÛíÑ[o½uÌ4ÍçyNÖø8Åã|ß_~~)¥qg¹g
pçyÙ]¢mÛÖRAlFØn·e`Î9¢B0![²mû·üKãNÝ³øÄ4ÍÎæÍç®¿þú©J¥2ßn·[J)1AÀ$ÅbQJ)¥ëº*IM)Õçe)[i­ÑÆmÛT)ER8ÕÓRêîªLûÎ0Ewß+Ô?Sý±B«]§R	 tBÓã}ÃÃÃ?úò¿üã|>¿?ËÚ°aÃ8,Ë
$áRÊÍv»½»¡vîÜ)<(â8VRÊÌtäeu[vÖÕu|Æ D©JÃ;ÓÓÓyß÷ÇqX§ÓÁ!ð<RÐív¡P( BZ­xÅbaabbÜxãvå}ûöÑzÈäÿú¯ÿzdõêÕÇc³A,Ú¶Ý2#L$±,+ñ}?N>2ÖZÇJ©L_Dÿ²%¿	,µ¬¦?VJQBõÂ/xßûÞ÷l!ÕZc!ÊØÙÊªýN»ç(ËA£Ñ@¾ï£àCéôkðÑÑQT­VUó7oÞñÁ~póg?ûÙrz`hhÅqÛí6¢ÈéõzÃ0\Ë²L)e §ÜÿN;fv&¬¬ãvª!BlqåG?úÑê»îºkõÈÈÈàüü|Þó<sNÒ:Ê²¯#@XP¾-    IDAT®ëÂÿñ.¸À/<øàëþßÿûo©×ë°eËg»Ý® £ãRJ^zé¥PWk!¤ëºËõ,ÈÉËáÖ©þS"¥ômÛn]uÕUÝ{î¹'¶,K6MéþA B1!Úÿüç§.½ôÒcRÊY!D BÇqÖzaÓ¦M'ÆÇÇG~üãçÓÆE)Ec!¥LÂ0pª{IÓB¥Ì¿À²,?Ëu(¥í¡¡¡ R©ðB¡ LÓÔ¥R	Áó<ÐZC±XZ­Å"2ápÎ+7ÝtÓÐw¾óRÊVJlDâëõ©9 ¢âññqãî»ïö^ó×Tÿöoÿ¶\,=)¥aÛ¶Ç±B	­µÄ+Ã02gÇe½äÓ¡,éÐ} ì¹õÊñqÎëº Æðc=V£æ,Ë2Ó¿ÃA@&¥àûþ287<<Ëå Cäº.sO<9ñ¾÷½ïºÛn»M=ÿüóÏh­rÎ^¯'ëõzóòË/ïMNNªýRg¬q}ºÉs÷o×ý´2¥8þ©4va)%I5}¥ÒË?ùä.! ¦.VEQ´G2÷tË²¥Å"@R8zô(=zÞýîwÃ¾ðô| 'IBÇ	 ¥µ\×MBRªútytÆìyY¡?1OG|c)eÇuÝùááá%J©wÁøy:ú
+uÏ °ÿéû§  ID£ÑàårÙèõzí'|2¢
BÊ÷ééi(JËr%Õj¢(BeiÄ¶mT«ÕÐèè(>tèúà?q£w¾óP,QÚÄhBÂn·+ÇQ¥µFIdfÚ0íÑ>¢ý: ²,K)i¶mÛE)åð×¿þõBHÙó<§ÕjQ8%=!dYÖòóÇ1¸®1EËår®i¤Ýn+P9"7C ôÆ#Ó4ý¹¹¹8ÏKÛ¶uªµ¬­53ÿÞUg[¬èÛ{  ËåÖÚTJ8çõGy¤$g&Ky(A|ÆãÀÐÐ4ÈqCE@J)¼ãïÍ7«={öï~÷»Éb×u!ÄLÄÁcÓ4y§ÓáBA **I @Ñ?Íèî×«d¹T:¤ @B| ÜÿÑ~V­Zß}÷ÝÁ¶mÛêÅb±Ïç­v»M»Ý.¦ÇqÆ$IB´ÖÈ²,æ{EQÆ®Çs1¦eá$IPfà±ßÓâýw6DþkÉôW	  4Ói(±uëÖÞ÷¿ÿýY×uçUþüÏÿ|âî»ï^Ëåª®ë:cÖív±mÛºZ­f÷°RJÉ+¯¼2LÓL @ú¾¿¬Gæo(]úU{(ÐþQâ8ÆãÐv»maH1Æ8Eô_v¤N6P­Vatt¡^¯#J)þïÿþoZ¯×ík¯½üáþ¡122o·Û<òÈª|>??111Çñb>ï!J©ïºn'1H)Û¡ }"Ãú´Ñ¿´bç}ÀN÷ÿû?'ÀBzðàAczz¦I2ëp×u~ÀJÍ§  "i¡%IBÒkä8ãíÛ·ïMØuÝâ7Ü¾þõ¯ëýû÷a033J I)ø¾_+Ë%BSpøþMÐ¿1F
xbJ©AîË_þrÅ²¬2cÌËçóÆìì,ñ<1Æ ß] À²,`Á5kÐ/¾dxxØzÛÛÞV=ÿ+_ù
Ø¶7mÚtpçÎëfff*kÖ¬ñkµÚRE]ÆX]Ð1F+oÇ3]é
¶4Ï/B6zïxÇ;ºwÞygâReÛ¶NÙ°1&	!±çy«®ºj>IyBH1û¾ÏSµÇñä?üá£7Ýt1cV.Óù|>Âw)¥ëºhppÐu|ðAw~~>y×»Þµøú×¿~ño|ã|½^Ã·BÛ®>Í3B(Iâû¾åºn!4áû>NÄÌ
ô,i;]¼8MÑ¼üù0 J©iFñÿùÇ½O}êS±ÖZ!)eRê¦+¥¸RJh­% iJgÕõ©Q»e!Äÿ`þc ¾¼ÀJGZ0çÜà;Ï=÷\é©§ÊÕj5«Ûí\.R!npJÓ-IÓ4áâ/Fóóó`Y¾êª«Gy¤lÛö¦={öÀ>ô!üOÿôOÏag=ÏÓóÙ7¿ùÍ;ï¼Ó`0±ëºDA2áv±êc`ËÏ 0}ô4¤ÀJs'À+)%RÞÎ;m¥Eál=É£aË`t:b5B×j5¶eË8~ü8h­áGA6m¢×^{­%È[51n&IÒÕZG!2¥2!Ë²/}ÆÿãµH)%¥4N¤mæÜæ´ÖáÄÄÄRª§ô\ûãëYsûè_¶ù)³@)¥26M¥®½üäÉ2"2ÃcµZ²f @¯×  Û¶Q¥RññqbÔjµã8è#ùbÁ7Þâ8Fça h ¢Hº®«S-ªle¶áÊ;ý\âW_aH\×5!Å©©©á'x¢V«ÕòsssË# ¨Å>Ýqäû>ËeÌcív[J%oß¾}õv»½:ÃÖ®[·N P½^LÓD©¼ JcÓÊ&Æ+4^¼â,³ñ[Ôn·©iö¶mÛrívÛEsBÙ$BôïIÇ°¸¸®ëçºÝ.8óåsrøðaxÝë^®¾új"0Bù ÃðS3¡s
¿Ûí är9ÞWó/kR¿Úgà¨!5Å±`E °$ÀB!z÷»ßÝ¹ðÂßøÆ7V=ûì³õ;vLÓ4¯¸â
zøða£ÛíÚç `ÆqLR¸Õj!Ã0À4MDAßÿþ÷ñûßÿ~
 FúÁR£&E)YÎ9GYüï=ã×O«ÿwNg BÓ4K){³ecûÜçíÛ·ã'OÓ4±ïûêrbÆ^XXÐµZM+¥Ä^­[·Î?uåqí8
ÃeÚé~¡Tñ²ôjïÍÀ¿,ÈÄ=BÐn·s6l Ë²`qqqùßV* @±X@½^±±1è§÷®[·×ëuÂ³Bùf³YÝ¿ÿØÎ;ÛµZ­3>>î¦äóùvµZ]t§sâÄÎêÕ«O6Mð<OÂË&õ/#Ðÿ&¤¿»ÒñS¬µ&c\( ë¢ A°lº Ò©.a¸L9% lÄÃq|çw}öÙ«Þò·­[·[5¶eËrüøqE¶,Kk­Á0öüÀ{úé§«ïÿû+­V+çy^NÑeU
pq«ß\%sYR GyÄfYã°|>OÒÑpÅqÍfr¹ÜòXÕÔÔ:tÐîÝ»ñk_ûZ8ï¼ó¬õë×W `CïÔÊÏÎÎ®GåÞøÆ7vÇ	$MÓTi²SM¦eÍø)N³gúÊÞ@EóÎe]Ö0£$ILq(¥s=Ï  ctÝu×R
'IB!Ô²,&¾ï+!DÏ4ÍñaoÛ¶-^µjÕÀøø¸966&×®]Û«ÕjJiH¡F£0000pÃ7Tnºé¦ðÖ[o=1ÂÏÀRE¾2Á+Ó4uÊÊ[q3ãË²(ÆØ¡^¯gÏÌÌ¬¦&òTc³"
­ýNwf¥ô{â8Y9)åÐm·Ý¦Úí6¹ùæ½|>?í8Îb$KQu¤B(p'ãX$I"c2-ÜU$Î´Îâ$ú]s°,Åqã86¶mÛfÙ¶m\qÅ$ÕA'OÃ0 ÙlBÖØ©Õj°yóæåæZ¹\]»v!!$IBËå²Õn·«o~ó/èt:ö¿þë¿®ú£?ú£}cccGK¥Réw÷wÍV«EµÖFÊX¶ Pãð0I´Ý;ïÇsëg*>Në´ÀÓn:¦(¥$C!DMÓÄñLÖLeM£ôîL*&=³ºÑhàN§Ã8ç(Ë¡|>O¾ýíoãÜúõëë¥RéÆx!4Oi!ü BJiBcÅI±Ä+úI¯á'¯Ek­(¥Ò£Î_yåW\qE¡\.O	!¡¨ <«âOÿp:÷yJ©S22C<óÌ3066F£_CrYÓ{`` z½^6Õs4556lÀFår9 eYðÏ|.ºè"tÑEá b1ÖLÙ±RJb¥TBTÇ:%ÈùçF¿Æ%@)ÐKÀyê©§FÃ3MÓ,ËÄqäû>ôz=$¥\®û÷ªX,¢N§R![µjU^k½á/ÿò/KNÇ3MS^sÍ5$%0J©qª×eBfÓéZél½ò^z5ã³-	 -Ë"<ð £Òlêv»hqqqYË,ÿ B¡ ãïû0>>###077ÝnwYûFüä'ëºëºÕ[n¹å¼7½éMxóæÍEBÈiþüü|opppÑ¶íRª#è*¥­5§ÊþçW	ü,+Ó*ÌXé,(WJõci­;¯{Ýë6nÜxâé§}ægÊJÅ¹üòËÍÅÅEïÞ{ï-oß¾½$I>Ë¹e½^ar¹ôz=üâ/Ò^xÁ^¿~}sw]·ÊèÓ(mØgN¶(Õ³;à~<¨ïÙ_Ûí¶¶m[rÎcË²ZR¯Ñh4GFFôí·ßNÞó÷ÐÉ²µZ-h6Èó<h·Û  èÚk¯%13IRjGQdØ¶-R÷a~¯¨ûÌW{ÑÜÈæÓùs%àqÇ¦iò äÄÄÞ´i^XX@¾ïk×u¡ÓéaP.¡T*A¡Pµk×B¹\ééi@ájµ8r¹½äK­[·:KKKÅýû÷×´Öñ¡CbJiÜl6ýééé!¤±°°0ýÎw¾SoÝºµÍ9ïõLgø÷JÜÿ¹-ËêAê½^$YÒ]aè¢30Ð¶m`ùë¦¦ît:ZJ÷îÝ[:räçº.¬[· ¥Tu»]=<<¬}ß×Åbw»]û©§*ÿÁüÁP±Xá÷BI|VîÑPL¦îØ`Û6!(IR¶)!lÝºEäº.ÂÃÁ¡ÝnCÐh421r=::
£££E\tÑE$	%J)kpp°¶ÿþ×ÎÍÍ<üðÃùV«7oÞMÓT¼ÝLu0Æ§nÀ
c¬ú»êýãÐMÿi²TsÅq¬]×¡PkÝð<oêK.{ñÅRaÔ4ÍLO EQá?ÿó?ßô¦7Ú¶Ýív»`FËuÝðT^,¥ò;îX@yi¬Tã zB1¶«ÕjÍ÷ýÞ÷¾÷½î]wÝÕBbM6Íc¬kÛvjåeû´LenI`!BJ)+?Dk­´ÖëîeñévN#ðiÉ!¥1ÃD;¾ýöÛíýû÷¼ûÝï^¼úê«FGG§ÃXf$ è!"¥T,¥ Bp­5'ôg]«f-g»Ë_ÆªO´ñÎ;q$xrrþùhÕªU°víZ8rän·Û(cæÁêÕ«!Ï£|>IÀÈÈLMM¡N§½^T«U;¢-[¶Ø_úÒî¿ÿþÍõW5¹uëV²iÓ¦Ú\ÐB\×H½!$J$ ²,+Ncêw°>þvÆÈ&<éúÂLÀÿØ±cXr¹\Æ4 Bôz=R.¼;Zk½,l
 Æ]XX°:Ûí6;qâ·víÚÚW^¹j|||vxxxÒó¼JiÓuÝÒGÅsNI¤aÊáH¿£¯N$*"î8¯Z¼ðÂ'ßûÞ÷úÅbqsÞMõîÁÃ³Ip	ÈË>é\.§}ß×¹\N¥5;;««Õª6MSçóy8|ø0Ôëuíû>B@¹\J©^³fÌÍÍeYËNeQÃ0ìõó·¼á_`ï{ßû\Îy16áç¼C)B<uW)[EfyKÚÄ<÷ÿca(cD¡;vì0MÓ4c¤R© Çq¥8çNùè,'ÎòhÎ ¸ÑhXQ¶Z­B·Û ÐµÃÈGQTbÅaRJi2eê -áó&#}@Qü«Ï¦FXÆôÎö2#é´.J¨Õji)%XçÅ"är9¸â+ P(@¥Rxî¹ç Óé@W«UD!BÁ
Ã°ô©O}
ÝrË-ùë®»nôÍo~swãÆ½áááÖâââ!d¶T*ÍÀç| ºÅoêecù	À)ÔÂ¢'I2ÆZù|~úúë¯?rõÕWç\×µ,Ë²B¥­[·ÜvÛm#?üðïû5ÎyRj¦I-ËÒsnÝ{ï½Å·½ímÃ#óDkMcÔµ6Éä{ÒOFÐgzüú)õáÏÜ@;M¥@
ÝétT>aÆQ¹\. tÙeo¼Ñøüç?o¦dËåL)%N§¯ðÄÄùï|§X¯×¯¹æq!DÇ¶m)¥¤ID1æà23Më7¾}µÏ8ùÔ§>µì¤1FRJ¢µ¶0Æn·;ôøãv:üüü¼éy.ËÏçÁ0 ,3ÿ8ç°°° ÍfRÈ÷}Èçó!Ú¹s'RJ¡V«E\×¥Fª`§WçÜíõzö~ðò±},¸üòËÆ"c¬àüOþm W@¤Bpjì)¥<JéàÔÔÔÄ<0¡§2|ßÇÙvFÇï»é¸¨eYºX,j ÐéBÉÙÙYQ­VEÇª×ë)Î¹8zôh1S=s.kµÓ4çy|Í5q
Yg ${.R.Æ3Îy^)5üà®ó} raFíÛ·ÍÍÍÁ®]»`nnÀ÷}èt:ºÛíB£Ñ Û¶!IX\\Ì.`¤µ&óóóN©T*NOO{û÷ï××^{moãÆéFQÓZÔõý&2}ÉÓÃf{j0Î¹mféÑG-ái­Ë²°ïûÈu] Â¾}ûÐ;H½^']t RÊ ¤lDk @[±$É¼ÖzN)5Çq#ôQ1ß÷mß÷K.¹dÒ4Í£RÊÓ4[¶m÷¤B(ÖZs!WJqÇsRò$IRJ¦L@c\ýÊW¾²jqq±1v  ðÊB/VÆ¸~#!×u3]/¤BBR*X$öÁó¬lÛ¶mà»ßýnmrrrÐ¶íB¡PbBeP1f¥ÆP4=cJ)¥2!èWjdÔþ (¹4´Örð±Ç;oß¾}Csss¹(çU*¨×ëP*t¡Pùùyxé¥`jj
N8{öì0aÏ=P.Ñââ"ö}J%¦µö9R~ôÑGGî¾ûîQ¥Tnjj
.»ì2ÎcJ©¼i%Pcl2Æpl¨þÆÍ/SãÜúõ4W<{(Èò	)eý¾ûîxþùç(¥9!ÃcBÊÆ½\××u3=@Bccc`b-³:n4dýúõ,Ccó<¯Çq¥ÕjÕ:Î`·Û°,«df16Çq!#°TjJ¦/K~)¥Ã:RJá4?5:m !?Õ0ÕYÓálv"ï7³m%I98{Baè¾ûî[áycf$Iããã`&,--é^¯ÃÃÃ(Óg!J)¢¸®Ëòù¼uï½÷zÛ·oÏ_zé¥y±²¥a&ÆØRsÒIèL+¬?Ö9¿ÚûI)BLá¦9üÔSO­Ûµk×çyùÅÅEÁ²ü23ÐJ)²:!"(
  !h­Á¶m Ôó<ËåÄ5kâ(ËaÆ$m¦­²ÀÑZ[!~/ÕÛõé_¤þû_âäYÑ$êß{ À!
 ®ïûUß÷ÇxâÁ(rIãàjµ
é`*¥tª×ëéf³	GÕI ¥&''Á÷}hµZ1´YZ­bÆrvîÜYxøáË÷ÜsOõ;î¨>ûì³ån·[Z³fjÕ±8u4W+÷è×µo+Ï^6Y×Ï¤NGÛuÊÂéÔE$ðMÓl9³H)RÎI)*Jóºë®ëNLLÈ;vãÇjµJ8ç¨Ûí"×uã80==­·lÙ¢Ö­[Qã©Ë¶F§Æ90B§øÖYÇæÜúþ¼!û»8³æ¨Jå£$¥T$I"lÛW_}5yê©§ÜãÇ»®ë½^XJ¥j·ÛP¯×ÑîÝ»Ñ#GÐ¥^

  "2(¥,ÝCÔoøØÿó¼ª à§?ýéÌÁ1Æç!¨eYv­V+Ýzë­µ8a<33që8U£ÑPÝnW---©n·«c:c].õÀÀ T*½¸¸Íf`ll¹®Z­r]OLL|>OæóyüÆ7¾n¸áxtt´a£T*5Ôñí)?Ïóúô¿	;ÆS¥Ë«¶Z­U÷ß=¢R¦;1Öa(BBÈ$IRH))%ÇsÎ9OÇq,¤ÒqU­VEq«Õ
$éb;¦ivÂ0ìx×®V«Íµk×.­Y³¦ ÉÂÂDQlÛÆÇÇ!lÛî "íâé3 4MqÎ³ kpÎsQ}ë[ßZÛh4Þ#GØ±cÇÐÉ'¡×ë-wÖÂ0Ô!EJDcõ'ÔîÝ»³çGONNÂÒÒÄqÍ&k68}ñÅóµk×r¥!¸a´Ö.çÜÐZSË²p¿2A:SýÏL¦uEJÌÂÖ¯_ï|á_(@>IcL(íÌaÎ9^ZZbrÖ­[-º®ÓZÛã ¥TD	c, öR> ¦irÆÖZ[RÊÂîÝ»½Õ«W###SBYq[*¥x:Â«(¥1¦RGËÌµK)¥´mÛ:eÎ¹$ÉÀÝwß=¾´´TEÙ @²Nx*4]1¦à»PeÚn©¤Âë0uEÚ4Í|ßÇÅbu»]siiÉÙ»wonÇÅ={öT><°sçÎú~ô£F£1bf ¦izc+à©ÖZ9jÐW|í"Ä(-1;A{úìììï~÷»u)¥Ûéth«ÕB´Ûm¥ÒsssêÈ#úèÑ£zjjJONNB.J¥011æææ`jj
8ç(I2<<L	!ã8¶ëºö/¾hFQd`ÝVFÃ=qâDRêyG ¬¹¦Nw¯Ë»@yÒ$"\BHõßüæøøÃAË²rI!±þ`Û6`u¯×SR$ö}_·ÛmÝl6µmÛjù¡$I ×ë¡b±×¬YCÓ4í¥¥¥ÜøÃâ¶mÛ*O<ñDíØ±cív{ Vu:QÎyµT*Y 1B÷iaàpÎmÛ¬ÛíZ2Ö®]Û&´BÖZ¤1P÷OBéçwsòJØ¬Ä¦µö0ÆõR©´úk_ûZ])åj­éââ"²,Ò1N-Ðaê'Oªn·«Â0ÔRJÒëtÔµÛm¤"s1f<x0÷è£R¥Õ«W\×Í'IR2M³DÉK)MÎî)Ó4r¥z7~-÷SúìJ)Ï0ÁÝ»w·mÛ¶!J©§µfQa!ôz=@3Æã8c,3nÛ¶U·ÛÍ$iÀ¶míûþò×ß´iÞ¶mýáhïÙ³§¤µð<¯EQÙ4Í* T  ØÙÊ    IDATrÒÜ&#àÓ¿Ì{él_áõ!!!XJ©B­VºýöÛk±RÊXXX©©)Í9×s%¥T­VK"D$B!£(R¶m«ÑÑQ522¢-ËRBAOOOg  ¶,KÛ¶¥R	!°a¤T*ãXR»T*Ùù|ÞÞ¿¿óÅ/~wÞy|ll¬eFW)ô×7¿î½:ÜNÿç2ÄÈÓé»ÔZ'J©(õ<è	!zat»Ýn×0ÞâM6ÁÒÒÞ±cv]SJqÇ¨V«aÆ3]×õæççKëº2ñ¢©7ÃeZÝ?±ÎXþ,ë&²Ñw1ø¾¯áË¯ît:Zk­Rò;¿ó;öwÜá´Z-+Ër¹B(îBcccøê«¯¦õzÝØµkU©T,Çqr¦iÒé2æj²ßðöWáâLþþïÿ>ÓyA©.fÎ¹ifþùç¯<x°°víZvìØ1ð}_LNNééi.às>55Åùìì¬{öìÚ÷}mWårY·Ûm}èÐ!],µaÀ9×íº®FCÎÏÏó#GÄÓÓÓA>ïXÕÆ©ÆúE/_vðøEþd5;Y§5Ûã¸ µ®ïØ±£rèÐ!×4Mº,	BHEB$RÊ BÛ¶»µZ­Ïç»¹\®+è/c±eYb`` Ü¹sg!47:::yÁ¼ì²Ë¦n¸áé~ðýèGOÜxãÇ>òLÅÞÄ#GT«Õ¥¥%Ø»w¯ ÿ²Ë.[R¶SÀDö	  c @dYãB\Ë²êÏ<óÌv»]ÃÐ¡)J)ÒZKË²RB2¶W1æÅbSJy|iiI´Z-qäÈuàÀX½z5Ú²ej·ÛdqqÑÊçóE¥Tm~~¾AyppÐ	ÃÐ4$I"B"|²nÔRü¬|Þû/Þì#Ó°¢ÖAV¹\Î?úè£Æ% RJ¹cK)eY¤Ûíßþö·ÝoûÛ½{÷æwìØáJ%(]PÏ0(ÃØ÷}á8`)!BYa£(*·Z-¶fÍi3Zë¥(×u9ÆXauúsç¤/ÇÒkÙcì(¥ª»ví{é¥Ê!3}+dyß¯	ç3Æxßx.çsç§´!D`e*
eeÆOX)E(¥Ì²,siiÉÞ·owèÐ¡ÂüãòÓO?]Ý·oßÀîÝ»«Ç+·Z-o||\@Çq]X¯ä ~¶+Æ±  Î96&IâPJ«AÞÿýÆ22õÜÜ>~ü¸ZXXäæKKK|vvVX%RºÝnëÔÄ	ôÐÐ®T*ÅqÅbõz=\©TÐÚµkI»ÝftwìØQèõzF£Qéõzå¸Qb±QJ}P1Ð§¡v®ÿíýç0ûÈ4:S&Àr>144T¿ýöÛRF ¡B1Í9×A¨$I$ç\Äqü²ø ¢V«ÉááaMÑaè8µçyúÀºÓéÀÜÜÚµk9pà 38`ïÝ»×RöîÝ[yægªO?ýtåÈ#íÛ·®ëÊNÊ¸NR÷Ø¬V8e)J)çØ±cÖºRÊn
ÊL*¡ölØÿW 9 À!1vFÕ²¬Ñûî»¯²  B`qqQQJµïûºÕjÉ($B;ÃÃ0qKÃ04BH
íyfenöÄ²,611a¸GÉÿÇüGùî»ï®ÍÍÍw:a  z¦iRÆèt:	cL¦Í°å§Ïú¬øU Zk,`¦izN§6;;»æÎ;ï¬åóy!D{½0Æ´i*ÕNRQ$Q$K)9¥T¦)¢(©Ë·NYT.Ñ®]»èÔÔuäÈÂ;ª333µCíÞ½{¤×ëa8À9wÃã$qªi¦2-ÓñíÜõóÝ}¿_ÎO ZeÙ¶]øêW¿:$GN9(±@¤Ra
!ü(BqÒëõøüü¼h6"Â¶mÁaJÆJ¥Åt§%!Döz=¥µVyàÀ>99H)?ù?iNLLÌ!Z i­åJmØÓIàü: ÀþxÛgJø²³1»Òs,S	¾wmÛ Zëp||<Ù¸q£S/¾ø"är9ìyjµZ¨P(}ûö±Ûn»Í¹ç{òüÈÈãyE1vmÛ¶RFaÆòTÞÙý_1¡ufßx7¡SªBiÏóðÅ_l<þøãlqqÇqºÝ.Êårà8¬[·\×%Ï>û¬yàÀWk]¢ÖgffÊ©4A`%cL÷³J_­E³Yñ,YT§èF |ÐÂM7Ýtò(;vL '¥¤ç¡ÙÙY	}¦À(ÕØÂÖívÍ'N°uëÖr¹2úøÂÂ¤cxÚ4Mm¦¬Õj|aa!ã88çbÜrË-f±XÌ\0³$V¿èño}Ñ¸â jÀa4O^sÍ5Ã=öíû¾ ¢R" Äùç¾ï}ïë¾áoðBq·ÛU©À@yÛ·oÏ½ðÂòæoÍk^3]©T¦Åb ")%GI­5R
­µñgögõM6ßzë­Ã<ð@irra<öØcèCúJ·ý&;5ý"ûC)ÍS-¥TaH¥T400Ð;yòd¯Z­ú ¢½^qÎ!ËiÓ4B'I'IÂ1ÆÊó<¡ö}?³oGq£|>i¥Raïÿû)ç¾úÕ¯²©©©rEFµZ-ù¾ß.íÛ·{Íf3þùç^zi¤µ3-¯¦w&®>ÝRHX)ÕÎårÓï}ï{ÜÿýÕg}Ö@iÇq\Ó4i·ÛÅ¦iêT/8qÂ tðàAÐZó~xáÅ_´MÓ$i2«Êå²JÇÝ¨icìZUzî¹ç¼ññqÏç[qw,ËÂ0  zåHÛÊ³$	¢êÔ¡X¥É¯ùå7î¸ãùÔ-ÓNM²±RuLÓÔk×®\.ch4pìØ±LQJH) 0 `Q-õ¤FZ¡Ò1Öh4ÐÒÒ¡µvÍ¦ÛëõÜ8s6l`wÞyggÃs¦i6RQú3qÿÁÓ  ¦iê0%Æ8!d¶R©LOOO#BH>cl ãXa	^.õ={ðìì, «V«±Ðb±Ðøø8BP.C®ë¢y±yófÝíve©TRù|Û¶msÎiÇü'°9çlïÞ½Ü¶íæ7¿ùÍ¢eY ÐtLfÀÉ¹ÂêÌ)3Z! â8nnÙ²ejlllzjjª1ÆIØq,ÍBÉ  ÄN²m[7MÜh4X¯×3c¬P(×u!400 FC·Z-Ã0+øÆU*vèÐ!´°°`$I"r¹ñðÃÛ¶JÅÝ¸q£aQJ!Î9Bã8 Ð©X¶NGç<±,+¢3ÆNë®~66 N·¤`¦N©Úçyb±81nµZhÕªUééiÇ¶mÚétX.ÃºÓéJiÜíveª÷FgggË²Øàà )ËË REØó<äyÌÌqWQÜ¾}{ü_ÿõ_A$­J½^·?óÏR©v»ÝÄ¶íþÆîo>d`à¹õêÞYsM)¹\..ËÝb±Ø	Ã0<2!JÍ D¡eY¡ã81F}ß'½^B°ëºÌ03"Eµm1ÆÀqHÄêv»8c»×ëy¶mÇÕj5Ú¾}»ßjµÛí¶|Ë[Þ²ø|`±T*Å333¸Z­ÊÔìàhÀ»£~á:SÛ¶- æw [½zõô/¼à!bI)%J©¬a¬¤Âqhll,Ðóóóæôô´9==mdf1!9CÓ1rÚét0¥ÏÌÌDJ©¤^¯s¥T2??ïJ¥ÖW^ÙøØÇ>6;>>¾ÈóÃ0ä©ÑicûoB|ÿ~½â÷ýF¶mKBPJ	Î9ït:ñ^Ø¹õÖ[wß}÷ùùùZµZÍ8qÂBÀyçg»®¾ùÍoÒgy­[·ÎÍçóuJéÒyç7ÿ®w½Ë(ËsÎSýñ_ê¹Ü~ªà,á¼RÊ¸îºëð}÷Ý?üðÃí;ï¼sxzzºròäÉã8f$øùçWaããã¥ãÇaVÇ	:ÎÀèè¨óéOÎ?ÿü®ëº~$\J©8çÚ0W ì{²Ã¡RM·®ræòË/ßw×]w©ÿ÷m6ã8laa]rÉ%h`` .½ôRHºÝ.:qâcÝn×iµZùééicÌöíÛ @®ëBvt:EªT* BBHç¼óÎëwÞyÝ«®ºªñú×¿~rõêÕB øÊçtîPgR¾VaL)m ¿õ­o-<yRMOO·:±fÍxll,Bñr¹ÌGGG±±±îøøøR¥Rii­CBHÝÝ¨ÖÚ±,«R«ÕjRuÃ7Lv:¦iÎ¦,¾D¢I-rÎ L^vÙeS_üâ~ÿ÷¿þÂ/ØBàâ/nz^lÎ´*íÞRB$!$fu¶nÝ:wï½÷N×ëu¨T*îää$³måóy(
ªÑhð¥¥¥`Ãë¯¿>¸äKx½^Wív[?~>»wïF®ëâÐÉÉIgÍ5¹5kÖX/½ôkµZzõêÕbÛ¶mçyáÀÀ?77ç_rÉ%ñÆåêÕ«uÖqúM=ÏÿÛyøEAÊÌ  c§< X(JÇþíßþ­ðÙÏ~V?÷ÜsÁÑ£G¾ï1jÙ  (Ó4eY1!$C­5ïõzÂqE)Õ©îv]BÌ òÝn·899I·nÝº¨µnQJý$I¸eYs®ûGÙV>ß},éª0ÆDª«¹týõ×ûøÇ?I	! ÿÿ·wf¿u%÷ÿÕv¶»ð©Í½dÜÝ6Ü#'v#°ýâ86àY y`øa Ãc¿ÄïF^Ì<æ/0y$È$A2é`v¶ ÝîÅ©ÕjSwòsï9§¶ß<°êæè6)QkSÔï")ÞKªªÎ¯ê÷­ß2ð½½=&¥ä.]òúÔ§ðÓþ4Øh´Ö°»»ZkfÅööv²»»ïïï[[[Åææf2EÛ¶lmmmÖL(nrÆtÎyÆ¿qã söìYwöìYì÷ûñ ±þ¨µ¶YMRë/½ôÒ/þðÿýÕ_ýÕÖÛo¿½PÅÀ{?üà4MÍ¿üåêßøFsîÜ9wùòeñÆo¯¼òÊðg?ûY¿ªªlkkK¥i
;;;liiI¬¯¯3D»»»,tmwYk­ïõzì·~ë·ø«¯¾joÜ¸Ñ:çjç\yñâÅòk_ûÚ¸×ë Ð"âÌ	'ñïtRgsÓéÔ@3vR|÷»ß=÷GôG÷¾1Æôsr&	Zk­rúü üâ¿8Çæ'?ù	¾ýöÛòç?ÿy±¹¹9RÓéT%IÂoÞ¼É ,K0ÆD{RJäÃÚÚ¶mëÏ=ëwwwí`0¨¿úÕ¯î|ï{ßÛºtéÒrÚ4ÍLhTJÖc}j!:ç|r?^ÂÁ%µÐ î´³l¤ÎZ[#âÆÓO?ýÎ+¯¼ÂþäOþdûÿøyæáÍ7³ÕÕÕlssSµmë{î¹æsû\yþüù¦m[X[[Ë^ýõáõë×óét\¿~]ììì.¨étÇcµ³³Ã8ç¸´´äWVV ¨ÝÝ]  0kkkÃýìg£o~óßøßÈÐZsDtds½vE×4M¢½/®}å+_½óÎ;þêÕ«Ãá0IÓíííùº®õË/¿<þþ÷¿¿ñ/|aomm_¾|YM&ùæoÊ·ÞzKe¯¯¯···{ý~?5Æ¨­­-"Ìd2qeYº7nXÆ]YY1eY6KKKå·¾õ­½ßû½ßÃ) 4.\0mÛÞò|Sdúý	TÏc¶6´7¾ýío¿»´´ÔîííÊ²LgYRJ¸pá{áôW¿úÕêé§ÞBøç¼¨ë:¿zõªúÇüGùOÿôOâÊ+jww7ï÷ûÙõë×U$¹RF£úå_Þúé§«ápØ<ûì³õK/½4Îó|wF£Ñ6çü¦1fC1âï-çèùHÀìÇwÇû°é	e4|HýtÃáÐ ÀdyyyïG?úÑî¥KvÿôOÿô©¶mÏîìì²,MÓ@]×Þ{ß^½z®\¹¢z½^$IzéÒ¥ü¥^ÊÃ¡jô<¹ì!*µÍó|?Ô=5/½ôÒþóÏ?ýßüæ³o¼ñÆÅ?û³?[}óÍ7Aã àË²t!jó<g£ÑH5M5M£¦Ó©È²9çbPÝC÷µµvÖÅ&1&´Ö	47X­ëz5Ia$I÷¸Ú»
cLÚ¶ípwwwÅZ;ä§ï¿ÿ¾xóÍ7Ùx<fs8wîF#~uuµíõzãÕÕÕí¦iÆ««« mÛîH)×` * Lwst/aÒMÀ]	 1s®¤=kíªò­õÇ~ùË_®nllÈç{n2*ï}e	¼¶Ö 09è¢]¯×c  Û¶-8çËkkkgñ_à¯ýÚ¯]_XX¸»8utb¾v/¦Ói&¦i:lÛv$¥Ls6I=cÌïýncý|âÎ=¦l^ºïo:8"Jkm?Ë²ó;;;Ï¿ûî»ÞxãseYs|mmÏ9ãÛñ¾ô¥ÍñÆÆF»°°àà 
!XQ¬i®µNµÖÃíííå,ËW¯^M1b:zkmûüóÏRÊí^¯·çùXk½+X} há vº(~$·d÷úÝëïJsåyÎ@eÙR®fYöìx<~úÕW_}êoþæoªªÊ1r}}9sc<"ºO~òÆ9W½üòËë_þòßAÄw¼÷ëÆª×ëÙét
YIÎyaYnæ©ø¸è½÷_úÒ>¨ëú<Ïw¦©³1{®;w·Xðì÷iÌ2MÓÜ³¦éªª$ÉÛ¶!U´]êOø^¯B`L?B0k-ãË²,³¶m¸P×õ°,Ë¼ii­å°³³mÛÆß`­Å ¢ÂF#óì³ÏVO=õÔÍÏ~ö³ï0Æ~Æf¢²pD§	!D2J©Õ<ÏÏZks)åèòåËË?ÿùÏÓöÅ_ÜÍ²¬2ÆXï½BÄÁúúúêk¯½¶´¹¹9øéOçyÎÖÖÖXY*MSùÁ¤UUñÑhäF£¹zõj½ººjË²T_ùÊWRcáWËËËÕ¹sçöåW~åæ×¿þõñÞ¿«µ^1"êÃR­ÇÛéSJAÛ¶ ¥dUUq)eÒëõ{{{$ùä_ÿõ_WE¦²®k6L\¦:Iò×ý×·÷µÖ­1ªmÛaY+eYß}÷ÝtwwW\¾|µmËcÐ4F#`¡µÒ4ååeR"cÌ_¸pÁ~êSª½÷[øÄ'®6MsE)uM±c­ms.FE!bGIæså½Ï'IVE u·v ­ÙÛ)% µ±±­¬¬ô¬µ+ pj¯-^»vmq0äÿ÷ßßÞÞN$qçÎ«~ó7s &¡;tÿÍ7ß<óúë¯···Ó7oª+W®${{{½íííáµk×òªªdQ,Ë2 Z)ÕL&¦iÓï÷w>ÿùÏ¯ÿÎïüÎû¿û»¿ûVÛ¶µÖ[B \)c×çÕ6$ÚÞÄ @N§Ó÷~µßï|ggçß´mû±ÍÍÍÑd2Ic¬×ëù,Ë$IvÏ9s½×ëíL&7ùx<µÜñx<(Ëòsnqmm­ÿÓþ4k&Y^^¶gÏÕÓéÔ¨'Ï³Ï<óL{gÎ¹çùµÁ`ð> lìïïO9ç.ImÚë=Ê}!&
Æ²mÛ"MÓ¥4M/ìïï/õûýÜ#cL)ÅB­NJÎ4 0Rb]×)c,e%s)r%åt:Í&I¿®ëÁêêjvíÚµáøÃô;ßùÎøóÿüÍ$Iv«ªyÓ,ËÆÞû÷~"¥¬¦)ó<oÂå¤?Ê°?jûpÜòcÕd=bNµRÜÃ¥µ6N§ÅÅÅçÜE ¸ðüäâx<¥iíîîò<ÏqggÇ\ºt©K.­÷z½½ÍÍÍòìÙ³7¦¹)¥ÜÎèÇÛã!>ÃB'æ¤®ë>"¤ËIóW®\¹pýúõÅ·Þz+ÓZó¦iØúú:ÿÌ3Ï¸¢(Ìòòr9oþê¯þê/¼÷ïÀµv6¤?Ô9û ¡6@Û¶1ä=kmªµRJ¦é¬hoÛ¶`,ËXè,¨1EUUC (Ò4URJÎíä!ê0¬·±éÖÖV¹¸¸XÃA·6I¦mÛ²ÀYàûN x»ER_fuoB  @ @mi8çæ@q L$ ´ÖÚ=¹2AÄ~]×Ã<Ï÷c¥÷~
µÂ<c,v/ÕBHkmê¥J)Ù4]&¡I/:ú8Þî4osÝN.Ëh&Bò<_iÛö¬1fI¦"nIøétjsS!Ä8Ë²ét:5J)¯Âø¾ Àªªâ
 òÝÝÝA¯×ËC½5w¬µ¶R¦©²,«÷ööÚ'ÐâéneGõç¢ã©®".2Æ³,[^YR$IÂwwwaaa!6Òpa÷s¸i­­8ç:I´Ö2)eÚ¶ís~¾,Ëù¹ðõ¯}'Ë²kóuï}%ÐmÛú<Ïg¢Ü¼?õR³æiJÆXféeynR)Åc1k-Ï$
!üd2ÁðúøkVÄõê½Oy(²] @ "t+Ý8Åñ¢$ÆZk§jcûu]o!6RµVÇ¢µt|8²2Ú1	c,/¢çËYYE¿ß¦mÛÊ{ß2Bk]ôz½E e9ØØØè/,, ç7M.//«ÍÍÍÂ#¢°UU5ÿøÇKDtÆüÕW_~æ3iWVV¶µÖ{IÖÚ=kísnS)U"b5&±[Gj,=þëÐ{;u3 ²,Åp8L­µ$IV¼÷«ó¡÷>	ÆYx¦mUUuçã¦i¦Þ{S"¢l¦R$)8çÊ9ÇÃH)Ak=Ì]ÂµÖàÌk)e5L¶²,ÛöÞï;çê4M-"¢1Cê28ç 8¡,4sJØ8@iÀØ¦icE!¦Q±Ì9×Ëó¼(Ë²eY )eV¥¾ªªFJYs8(¥2¥ÔÐSà å½O+ãñxØï÷c»zõªM¤yá¦u]û¶m/n%I²5L6¬µ761ç ö³Ù>íÕ|
 c¼m[å½ïeY¶ËÞûE)eÁ9WeY28È08Rî
!*k­)û Àsj0äÎ¹!"1c¬X__OWVVt¯×k«ª2Yy8È4óûûûfiiiªµÞ³ÖîXk÷cÁ``Âål,·+øOÜÛ¹:4ÿä(µÖ9"öó<Ï¬µ
ylòêØy¥sÎY!ç!8»¤æDTÆ¼×ëu]§u]üãg_üâË­Éd2î÷û- ñx¬Ã¡nÛV3ÆLl^i­u¡LÏIý>¬àýì3Ñ78(ÛÍX¥R*ÙÞÞ.F£ÑP1
~L "òà÷8 0UUMØW3ÆZ¥Tå½/­µ.è ÈâÅäd2Qy§BÜ{?` P8ç!ç±P«½÷[)å.iè  ÆIDAT¾÷~c:n¥iZI)µsÎ!ú&¬¹â»1z;çDç D]×LJÉR³nqñcD¶m 4M"¦óYccR
¬µjdy)¥R¶hÊ²tÎcÖ9ë?Ìê*Íw=-àa"ÆyP!$Íó<Icl¦Ö7IçÇÚb@î½O1)c$i½÷ÚZkýAXv;rÎ¡®kÈó{ïye¦Lk¡£©y6/þ=5è³~â¼h­Y$ x8çó"Ë²Ô{/ eÉBÑd´Öz 0óv:­µ[YYÁº®ÁÃá¦ ¨½½=9RDmÛ$IXÊòÁÀzï[Æ®ëÚöz=ç½· `Ñu+ø¨ÀõlÝÍïøwÓ4Ì{EQ­µB¤Î¹T#b"¥ûûûlqq§½÷8Lü`0pÎ¹16ÕZ×B-¥ô¡N£´ÖÃáp¥ªªgÞzë­³1÷â/~PUÕ/ó<ßá×mÛºÐ¦èÔ¶ÁtëÅ(Ó`-.B¤©Bp¥Ô¬yIÐfÞ{ÔZC¯×C­u·Ø?(¥b:0;¨åÌDè(;"± xï!IYäEì`k2[âs'XK)M¨GÛì[ê4MY<h[kÖZ9çD$2MS¥µN¦RJ¦©]ÜQ)Å¥ÊZ!bÆËÃm;ÀA-ÈÄ{/¼÷©1FC ¦®ë&Ïsý÷ß¦©^ZZÚæï{ï'BÚZ;É²¬6ÆÄ.À²$ >þÎÞÜ><sÖó<O&IçysNH)ãÅ.2Æ¼1Æ@¸ÍÇQi­S!âsk-gðÞCì8ÞiÒKÑ$ÎZ«­µuç5ç\c\HIÃÃ.4s,tyg1îëH¢ß	¶íïï³pc  8çª®k¹°° êºViÉd¢¢àÖZWmÓ46ØB 8èÎ ¼÷²`½÷EÛ¶Y¯×shvwwÛÑhô\S"bçye©¤uhV5ÛCkV@sùpâº÷#¢òÞgc²Á`  7MÃR(pÞ{£µn8ç:
bp ú0k-GDe­MR)c,qÎ%Î9¥²!õÍ%IâCrÎ½ÖÚEÑ8ç hCs<.vÝNtÀ(d³,Ë2YZZJÚ¶YñétÊÒ4E!×Z»Ýâ¤¾m[ä
=óÞs8¸|¥wÎñ¶mUçªm[eY¾½½­­õ1ÖØ®RúêÑ[k}$1¡ÎÜIhr?ûN¼ì  PJ1k-Xk¹sÎ¥µ6å§±ÌZFXsZk~1Öj­­Ò5M£ó<71ç¢"ÈÞ xØeC7!ÓZ³,Ë D± Rkmk<^¤i  u]ÒÄ¸6MÓiÈ3óAöð3(CãBÄB³æB)³Ö²¢(  fNvl " ¥T¬CÅ$áÞ{áãÂ»tApÂ¶m="ú$I<"ú¦i°(
ÔZûîáî^ºÿ>.àQ¿WH`Æç9wÎ @±<Ï}]×>Ïs °Ö"¤íahêJ©(â± Pñ¢(êºv1m·ú×Dêºf½^/¦°X[&tpÃ£niw°SÌÃ1Â{/C×Yç9³ÖÎj %IáÓ¥iê1;ÁöûýÙóÖ¶-$IÂc<Ðó(Î(¥  °,K$Iì"¡Æ7Æ`÷ç$Ü=j0Ú0V1¥à y×Z4Me¸]cMÓ°¢( ®kÆ9ÇPSÃ!zï Ø(¢[ka0pçªªj8.¼ýöÛÏ¾÷Þ{ßþíßÞ¶Ö¾ï½_GÄ*MS]Uï÷ûçöNc#A½÷ç94:$	ö9¬CëAt:Ï.m¢Ónk£Ã>¢¡pÎq)%­±À³R*vGEÆáç£÷ÞEa½÷ÖZëó@;¬]!Dì$ñ ì(wÎñ$IDÇ¢Ü¾m[<Ó4ÆÉÞ{ç9:çX]×"Ïs&pµÞ{ç¹­ëçyi­Ðm³â×Î9m­5áâÀÆ"Û¥O>	MNûâ[|Îó<gÎ9fáY	Æ´Öà2cZ:Ëûñxì³,Ã$I0¬c¦©,\4ÌlY¦àþ"ÝAJ	ÖZÐZcçè½÷RJ[×µóÞ»$Iâùe]`ÇÈ°hÛ­µ,ìÐát 8 bZk¬ª*>XÛ¶<dèp­5³Ö²~¿ÆoqJ)û*ÓZ àqo
ëFcR!
Dµk"ºêQ#¢cM¸¼ôQ>JÔ!ûópÑº11&c"¤rçÏcÈ
ðs1¢`É õz= b:¢(xÓ4"Ë2Î.¤yw¾ÄËº:k-ôR3ñpÛLñ"sÖZ`Ae0N  Ïó]]KoIÕï6í^ %IMÓ@¯×`­PZ`æi­¡ßïó¶m1MS¨ª
ÃÚ| ¢Û }ÞÙÙÅÅE@D¾19çXe"óDY¼ßï3ÆlooÃh4Ð(Â·mëR±^¹Qñ¡7q`üÚüº:Ö Ö4wÎñ<ÏÅA?]Á½÷LJ9¶¶4î}Zë_ê `|¾êÿ9¤fÄNq³Ú3KMkÛ8çLJ	ûûû°¸¸ èÏn};ëÁ°,Ëf©±ªµBÄÚ¬I¦Ø¶-Z 68êà¸áI »Q@G`YGLìl3Q±©@täãßÞ{ÐZCQÌ9ÇÂá<ÞÆÏýîïÃ!]¦¥Ññûp~N ç >ìaí²p;ÉCd~LUµðõÙ0ts,ËÀZshÛ²,ë:+¬m[¦)ëDÕB¦oÃ¤Øì1xØ¸?Êýs»n¢×|L("K9çXHa±AÎ!DlB8xbçÞ!Ê@R×õ ªªsï½÷Þk­úÂ¾°î½¿ja6á`Æ["XnGøâ¡(,D²î3ß/¾&v`øÝM»Ks,SL£ïÅ¢ÓZñðëx!ó¶m}<,Pv:9cÆou£cocwg_Äp öoÛ;óÏBmSeñ ÈQ&I¢C®÷÷÷í`0pÖZ/¥D ðaß¸%í7>Ï´zâ1 èMÓÌÒrC9sÎºóíJÛ¶Ø9¢s.Ú6LX$,IÙÅo×Y`¢(bBpÎa7Â8h­EçF;h<Ï¡[F!Úy)%ÔuÍÂ%ñ-ÿ~XtõLÇÉdñÒ+Ë2à³²,a00cßÇcPUdY6;kÄóJpbfµ³,cÓéE!BÄ+¼÷±´RÂd2AÎ¹Rúõà§Ó)fYÖ=CÞò{G1RþÞ/þRY<'H)ÙüóüôÞÏÎ8ÑÇàCY,Ë²Ç8çqg,~j­!`h4{ß®_C<Ü½"ØîY½Öét
Aè³ÄèÄý"Î÷ó®?Ð4Mìæ~Ké¥4MYÁþþ>ÃY=l8í!ùýÕ¹ó8àÝÖÚxF½6h/ñMXÀR²8q®â©ëãe|<·GûMÜ» x3+SE+fXEß+Ï£áR.YaÓ4>IP5óeúÿ9>`w2ÑyÒí>ÃCþý¨Û ÃÒ7p¾nÖI2Õ=®]¿÷À{ü=Èóÿ×±d·qÄðvççþvxè3rØã|o×Í1úø¨qß çà1q~PÂ3ïý cs>fí;çï½nÑ·D£Üçü°ÐÜÎ®Ð³ÿæ!ìqQfs{a×AcÔ_å!5§Ûi;ÆæÖ`¼\¼åb!®;ØbvöïóBÜçÜÇÊ ºÌ.ºu çÎÞó¢P,¥Á1¿H{È?k±;<ßÇ­ÇvËu9';ðEîç!¸£·¾¾×¯_ñxKKKeôz=çùLè6¸÷Ï£&³È:*³ËøµÃüùîeäI¿åwÅ`¸ÿv@Îâåqçâ.ø3ØÍ:@Ä}Ì÷=6±Îü²£»9ösÎÅü±ÀÎ¡`æ`Ï×á¿©	aãìÿÿYG-\ZÐÄãâÌG ¼Óûu¾«M@àÀÛÎÓ!Ñ°k]cpî&  X­Bhï½µ«Fy§ãØiâDÍ;Ä9c¡L\×x»D<q\vý!·{é}Ú8Z'`¯í^(tíÃï
»BóS·ïÜ­ Hvà	]BvCDzÝ¾no÷,ÿýv©ûñl­ÍÍM8þüì{ÒNr	- v|°£ü¢0ØÙY×æÆÈÛPúëÐ×SàýÏÏýd6v/@[31ÛçQeªÎ#; ÝyØ/Ù]lCqÇ¥Ãr«ôCFû}Øº~ïw»÷¡çà°(áÛÔÂ;½~¾Ðk°k>ü{ &¼Î~¾Né	î¢w;¾w²ßÄG7gDÁãÜ^ÚýüØmÄ# AçÒcÞ»Ãú ÿ	óöa~îç/a;h}Ò}çû?ÍýcòüÇR.±N,³Ò³gÁ?]ÿ>Ö<JÄë¦úN§SðÞÃÚÚäyý~þë«ÏÿyÒÎ%óÝ 	f­ÅØw¡øpXtËOÌ¼âqç¾õú¨JÜQ ¼ú9ÿ ÞK½ùHÂã¤øR(â4¼ïçõdèïùzÛyí#VGãî½G8D°=îA6âNó.Ò]ç½ó¼Sg3_G}L·[B4ñx¼n=GçÜ,½´Sÿù×uËEÌïQ´û$ç{F£Ñìu±AÕQç'Á·ïÖzbk7Å7ÖÖ"à¼Þb¹%ò/m|¿ù -âdú¤'6ð~ì»=<&øM±¸ûæ7ÄÝóa01>|-ÕÅx
wqß6òIã£^ë4?4OÊüA}¯(A÷kÉ¾<|ûÏºQ`
]¿o	Êé\4Þòý]K7­ªj&PF£H¥­õ-)ÆÔ=õûwÇùl±ùRü<
³Ý9mwnèÜóxÙÂî3sØúØÈûý|F NÓu·Ï!¬Q>ªÔüÇ±ÃÖÿFóCü6>GÝÞéöð°½òIw°½·ýºèÒú"âtÓM)Ü_ïsÝÀ¿>¡(X§¤³ÃRJÐZòÐóób79ç µQ4Ôd¥aG10ÎC·6cðA
ñû£p(¥¤ýçøÇ=G<ê&·ò¤ÖQ@SâI2äXm8kþ?¿Ó8Í¥QéüÆêzv'ñI[ÄG??GÝ
ÏÝ lû9ïpÝM ñd¬²ùa§(Eq¯Ó êQ¯ù×mø£û³±HíDQ³Û¶Á`ð!ûò¤qX-¿aÚ(¶vÇ¨8ÿúÃ¢k3ûÚ£;yÜ_ön£î¡[ÊrZ¼ÂÙðüíèín)ï%ÒRìáz§ý õu\{HÜ½}¦ñ#äõ{¿û=?fþã·[ò&
xñ"=Fÿu#ýbÓ£éÅF"Ý(·Éd1³¯wîÓÞÅ!I 8cq&öÅ¦,QDBsn6ÆPJÍR¶ãÜÅÏ£@H<;{Tªï|#{é«qW¿×Q]|xð2ÈD;pö@ÄÉu'{ýÙz>õ<ÑsE$AÐa 5AAAA^H $G 	=­ ç   >*(¿ È$   âCñ Ñ  è@AqR @    8Å HAAAA§î½§Q     S
¯ªF    bÆØìA<Îðë×oÐ(AAAAº"Ò=ü_F     N)âÚú.üûo|¢ Ñ    â'F ÎÿM#ÛÛÛ ?Xß¿}åïà?ýÇÿ@#BAAAZHÄ!îÄQé¾L<Îüí+¢¿|þâÿþ?øw/~úØÇhT   x"9¬á	ÇÄãÌ_{~ÿ;p   \{ï2<ýÔÇH$    H<®üøµ×àGÿõ¿ÃÚúÖ¿
këÛð¿þ÷ÃÓçÏÀÙ³«T    ' ÇíímøóÿóðûßùX[ß:XÇç>ño?ôO]ÿò¿/|ö³páÂyè÷ûÀ9§$   âT·}óS@â¤â½ªª`íúuøç~þÛÿøðÁúö-ßóÿ¢¯ò*iÈÜ    IEND®B`
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/web/style_dark3.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=PT+Serif|PT+Serif:b|PT+Serif:i|PT+Sans|PT+Sans:b");

.ocks-org body { background: rgb(12, 24, 34); color: rgb(189, 187, 201); font-family: "PT Serif", serif; margin: 1em auto 4em; position: relative; width: 960px; padding: 1rem; }

.ocks-org header, .ocks-org footer, .ocks-org aside, .ocks-org h1, .ocks-org h2, .ocks-org h3, .ocks-org h4 { font-family: "PT Sans", sans-serif; }

.ocks-org h1, .ocks-org h2, .ocks-org h3, .ocks-org h4 { color: rgb(186, 184, 198); }

.ocks-org header, .ocks-org footer { color: rgb(153, 153, 153); }

h1 { font-size: 64px; font-weight: 300; letter-spacing: -2px; margin: 0.3em 0px 0.1em; }

h2 { margin-top: 2em; }

h1, h2 { text-rendering: optimizelegibility; }

h2 a[name], h2 a[id] { color: rgb(77, 77, 81); padding-right: 0.3em; }

header, footer { font-size: small; }

.ocks-org header aside, .ocks-org footer aside { float: left; margin-right: 0.5em; }

.ocks-org header aside::after, .ocks-org footer aside::after { padding-left: 0.5em; content: "/"; }

footer { margin-top: 6em; }

h1 ~ aside { font-size: small; right: 0px; position: absolute; width: 180px; }

.attribution { font-size: small; margin-bottom: 2em; }

body > p, li > p, div > p { line-height: 1.5em; }

body > p, div > p { width: 720px; }

body > blockquote { width: 640px; }

blockquote q { display: block; font-style: oblique; }

ul { padding: 0px; }

li { width: 690px; margin-left: 30px; }

a { color: rgb(0, 149, 168); }

a:not(:hover) { text-decoration: none; }

pre, code, textarea { font-family: Menlo, "Menlo Web", "Menlo Web ss", monospace; }

code { line-height: 1em; color: rgb(195, 193, 205); }

textarea { font-size: 100%; }

pre { border-left: 2px solid rgb(66, 66, 66); padding-left: 18px; margin: 2em 0px; }

.html .value, .javascript .string, .javascript .regexp { color: rgb(117, 107, 177); }

.html .tag, .css .tag, .javascript .keyword { color: rgb(49, 130, 189); }

.comment { color: rgb(99, 99, 99); }

.html .doctype, .javascript .number { color: rgb(49, 163, 84); }

.html .attribute, .css .attribute, .javascript .class, .javascript .special { color: rgb(230, 85, 13); }

svg { font: 10px sans-serif; }

.axis path, .axis line { fill: none; stroke: rgb(0, 0, 0); shape-rendering: crispedges; }

sup, sub { line-height: 0; }

q::before { content: "Ã¢â¬Å"; }

q::after { content: "Ã¢â¬Â"; }

blockquote q { line-height: 1.5em; display: inline; }

blockquote q::before, blockquote q::after { content: ""; }

h3, h4, p, ul { padding-left: 1.2rem; }

.banner { padding: 0px; }

#toc { margin-top: 0px; }

@media only screen and (max-device-width: 1023px) {
  .ocks-org body { font-size: 72%; padding: 0.5rem; }
  body > p, div > p { width: 90vw !important; }
  li { width: 82vw; }
  h3, h4, p, ul { padding-left: 0.7rem; width: 90vw; }
  h1 { font-size: 2rem; }
  pre { padding-left: 0.5rem; }
  .banner, h1, img { max-width: calc(-2em + 100vw); min-width: calc(-2em + 100vw); }
}

@font-face { font-family: "Menlo web"; src: url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01.woff2") format("woff2"), url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01.woff") format("woff"); font-weight: normal; }

@font-face { font-family: "Menlo web"; src: url("OnlineWebFonts_COM_d6ba633f6ea4cafe1a39ab736fe55e88\\Menlo Bold\\@font-face\\a6ffc5d72a96b65159e710ea6d258ba4.woff2") format("woff2"), url("OnlineWebFonts_COM_d6ba633f6ea4cafe1a39ab736fe55e88\\Menlo Bold\\@font-face\\a6ffc5d72a96b65159e710ea6d258ba4.woff") format("woff"); font-weight: bold; }

@font-face { font-family: "Menlo web ss"; src: url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01-ss2.woff") format("woff"); font-weight: normal; }

.join, .link, .node rect { fill: none; stroke: rgb(99, 99, 99); stroke-width: 1.5px; }

.link { stroke: rgb(150, 150, 150); }

.node rect { fill: white; }

.link path, .node rect, .node text, .join { transition: stroke-opacity 500ms linear, fill-opacity 500ms linear; }

.node .element rect { fill: rgb(189, 189, 189); stroke: none; }

.node .null rect { fill: none; stroke: none; }

.node .null text { fill: rgb(99, 99, 99); }

.node .selection rect { stroke: rgb(230, 85, 13); }

.node .data rect { stroke: rgb(49, 130, 189); }

.node .datum rect { fill: rgb(217, 217, 217); stroke: none; }

.node .code text { font-family: monospace; color: rgb(189, 189, 189); }

.node .key rect { fill: rgb(161, 217, 155); stroke: none; }

.link .to-key, .join { stroke: rgb(161, 217, 155); }

.join { stroke-dasharray: 2, 2; }

.link .to-null { stroke-dasharray: 0.5, 3.5; stroke-linecap: round; }

.link .from-data { stroke: rgb(49, 130, 189); }

.play circle { fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 3px; }

.play:hover path { fill: rgb(255, 0, 0); }

.play.mousedown circle { fill: rgb(255, 0, 0); }

.play.mousedown path { fill: rgb(255, 255, 255); }

.play rect { fill: none; pointer-events: all; cursor: pointer; }

code span { transition: background 250ms linear; }

pre.prettyprint, code.prettyprint { background-color: rgb(34, 34, 34); border-radius: 8px; font-size: 15px; }

pre.prettyprint { width: 90%; margin: 0.5em; padding: 1em; white-space: pre-wrap; }

#return-to-top { position: fixed; bottom: 20px; right: 20px; background: rgba(0, 0, 0, 0.2); width: 50px; height: 50px; text-decoration: none; border-radius: 35px; display: none; transition: 0.3s; }

#return-to-top i { color: rgb(255, 255, 255); margin: 0px; position: relative; left: 16px; top: 13px; font-size: 19px; transition: 0.3s; }

#return-to-top:hover { background: rgba(0, 0, 0, 0.35); }

#return-to-top:hover i { color: rgb(240, 240, 240); }

@media print {
  .pagebreak { break-before: page; }
  div { break-inside: avoid; }
  pre { break-inside: avoid; }
}

.modebar { display: none !important; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/web/default_dark3.min.css

@charset "utf-8";

.hljs { overflow-x: auto; }

.hljs, .hljs-subst { }

.hljs-comment { color: rgb(121, 121, 121); }

.hljs-keyword, .hljs-attribute, .hljs-selector-tag, .hljs-meta-keyword, .hljs-doctag, .hljs-name { font-weight: bold; color: rgb(13, 147, 165); }

.hljs-type, .hljs-string, .hljs-number, .hljs-selector-id, .hljs-selector-class, .hljs-quote, .hljs-template-tag, .hljs-deletion { color: rgb(233, 28, 96); }

.hljs-title, .hljs-section { color: rgb(209, 21, 83); font-weight: bold; }

.hljs-regexp, .hljs-symbol, .hljs-variable, .hljs-template-variable, .hljs-link, .hljs-selector-attr, .hljs-selector-pseudo { color: rgb(188, 96, 96); }

.hljs-literal { color: rgb(120, 169, 96); }

.hljs-meta { color: rgb(12, 113, 131); }

.hljs-meta-string { color: rgb(77, 153, 191); }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://fonts.googleapis.com/css?family=PT+Serif|PT+Serif:b|PT+Serif:i|PT+Sans|PT+Sans:b

@charset "utf-8";

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizaRExUiTo99u79D0-ExcOPIDUg-g.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizaRExUiTo99u79D0aExcOPIDUg-g.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizaRExUiTo99u79D0yExcOPIDUg-g.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizaRExUiTo99u79D0KExcOPIDU.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizfRExUiTo99u79B_mh0OOtLR8a8zILig.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizfRExUiTo99u79B_mh0OqtLR8a8zILig.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizfRExUiTo99u79B_mh0OCtLR8a8zILig.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "PT Sans"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptsans/v18/jizfRExUiTo99u79B_mh0O6tLR8a8zI.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rC1cgT9rct48Q.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rm1cgT9rct48Q.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_rO1cgT9rct48Q.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "PT Serif"; font-style: italic; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRTQgYoZZY2vCFuvAFT_r21cgT9rcs.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFbzr-_dSb_nco.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFSzr-_dSb_nco.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFYzr-_dSb_nco.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 400; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRVQgYoZZY2vCFuvAFWzr-_dSb_.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qfVyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C8A, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qWVyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+301, U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qcVyvVp8NAyIw.woff2") format("woff2"); unicode-range: U+100-2BA, U+2BD-2C5, U+2C7-2CC, U+2CE-2D7, U+2DD-2FF, U+304, U+308, U+329, U+1D00-1DBF, U+1E00-1E9F, U+1EF2-1EFF, U+2020, U+20A0-20AB, U+20AD-20C0, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "PT Serif"; font-style: normal; font-weight: 700; src: url("https://fonts.gstatic.com/s/ptserif/v19/EJRSQgYoZZY2vCFuvAnt66qSVyvVp8NA.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+304, U+308, U+329, U+2000-206F, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/web/style.css

@charset "utf-8";

@import url("https://fonts.googleapis.com/css?family=PT+Serif|PT+Serif:b|PT+Serif:i|PT+Sans|PT+Sans:b");

.ocks-org body { background: rgb(252, 252, 250); color: rgb(51, 51, 51); font-family: "PT Serif", serif; margin: 1em auto 4em; position: relative; width: 960px; padding: 1rem; }

.ocks-org header, .ocks-org footer, .ocks-org aside, .ocks-org h1, .ocks-org h2, .ocks-org h3, .ocks-org h4 { font-family: "PT Sans", sans-serif; }

.ocks-org h1, .ocks-org h2, .ocks-org h3, .ocks-org h4 { color: rgb(0, 0, 0); }

.ocks-org header, .ocks-org footer { color: rgb(99, 99, 99); }

h1 { font-size: 64px; font-weight: 300; letter-spacing: -2px; margin: 0.3em 0px 0.1em; }

h2 { margin-top: 2em; }

h1, h2 { text-rendering: optimizelegibility; }

h2 a[name], h2 a[id] { color: rgb(204, 204, 204); padding-right: 0.3em; }

header, footer { font-size: small; }

.ocks-org header aside, .ocks-org footer aside { float: left; margin-right: 0.5em; }

.ocks-org header aside::after, .ocks-org footer aside::after { padding-left: 0.5em; content: "/"; }

footer { margin-top: 6em; }

h1 ~ aside { font-size: small; right: 0px; position: absolute; width: 180px; }

.attribution { font-size: small; margin-bottom: 2em; }

body > p, li > p, div > p { line-height: 1.5em; }

body > p, div > p { width: 720px; }

body > blockquote { width: 640px; }

blockquote q { display: block; font-style: oblique; }

ul { padding: 0px; }

li { width: 690px; margin-left: 30px; }

a { color: steelblue; }

a:not(:hover) { text-decoration: none; }

pre, code, textarea { font-family: Menlo, "Menlo Web", "Menlo Web ss", monospace; }

code { line-height: 1em; }

textarea { font-size: 100%; }

pre { border-left: 2px solid rgb(204, 204, 204); padding-left: 18px; margin: 2em 0px; }

.html .value, .javascript .string, .javascript .regexp { color: rgb(117, 107, 177); }

.html .tag, .css .tag, .javascript .keyword { color: rgb(49, 130, 189); }

.comment { color: rgb(99, 99, 99); }

.html .doctype, .javascript .number { color: rgb(49, 163, 84); }

.html .attribute, .css .attribute, .javascript .class, .javascript .special { color: rgb(230, 85, 13); }

svg { font: 10px sans-serif; }

.axis path, .axis line { fill: none; stroke: rgb(0, 0, 0); shape-rendering: crispedges; }

sup, sub { line-height: 0; }

q::before { content: "Ã¢â¬Å"; }

q::after { content: "Ã¢â¬Â"; }

blockquote q { line-height: 1.5em; display: inline; }

blockquote q::before, blockquote q::after { content: ""; }

h3, h4, p, ul { padding-left: 1.2rem; }

.banner { padding: 0px; }

#toc { margin-top: 0px; }

@media only screen and (max-device-width: 1023px) {
  .ocks-org body { font-size: 72%; padding: 0.5rem; }
  body > p, div > p { width: 90vw !important; }
  li { width: 82vw; }
  h3, h4, p, ul { padding-left: 0.7rem; width: 90vw; }
  h1 { font-size: 2rem; }
  pre { padding-left: 0.5rem; }
  .banner, h1, img { max-width: calc(-2em + 100vw); min-width: calc(-2em + 100vw); }
}

@font-face { font-family: "Menlo web"; src: url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01.woff2") format("woff2"), url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01.woff") format("woff"); font-weight: normal; }

@font-face { font-family: "Menlo web"; src: url("OnlineWebFonts_COM_d6ba633f6ea4cafe1a39ab736fe55e88\\Menlo Bold\\@font-face\\a6ffc5d72a96b65159e710ea6d258ba4.woff2") format("woff2"), url("OnlineWebFonts_COM_d6ba633f6ea4cafe1a39ab736fe55e88\\Menlo Bold\\@font-face\\a6ffc5d72a96b65159e710ea6d258ba4.woff") format("woff"); font-weight: bold; }

@font-face { font-family: "Menlo web ss"; src: url("OnlineWebFonts_COM_cb7eb796ae7de7195a34c485cacebad1\\@font-face\\9f94dc20bb2a09c15241d3a880b7ad01-ss2.woff") format("woff"); font-weight: normal; }

.join, .link, .node rect { fill: none; stroke: rgb(99, 99, 99); stroke-width: 1.5px; }

.link { stroke: rgb(150, 150, 150); }

.node rect { fill: white; }

.link path, .node rect, .node text, .join { transition: stroke-opacity 500ms linear, fill-opacity 500ms linear; }

.node .element rect { fill: rgb(189, 189, 189); stroke: none; }

.node .null rect { fill: none; stroke: none; }

.node .null text { fill: rgb(99, 99, 99); }

.node .selection rect { stroke: rgb(230, 85, 13); }

.node .data rect { stroke: rgb(49, 130, 189); }

.node .datum rect { fill: rgb(217, 217, 217); stroke: none; }

.node .code text { font-family: monospace; }

.node .key rect { fill: rgb(161, 217, 155); stroke: none; }

.link .to-key, .join { stroke: rgb(161, 217, 155); }

.join { stroke-dasharray: 2, 2; }

.link .to-null { stroke-dasharray: 0.5, 3.5; stroke-linecap: round; }

.link .from-data { stroke: rgb(49, 130, 189); }

.play circle { fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 3px; }

.play:hover path { fill: rgb(255, 0, 0); }

.play.mousedown circle { fill: rgb(255, 0, 0); }

.play.mousedown path { fill: rgb(255, 255, 255); }

.play rect { fill: none; pointer-events: all; cursor: pointer; }

code span { transition: background 250ms linear; }

pre.prettyprint, code.prettyprint { background-color: rgb(34, 34, 34); border-radius: 8px; font-size: 15px; }

pre.prettyprint { width: 90%; margin: 0.5em; padding: 1em; white-space: pre-wrap; }

#return-to-top { position: fixed; bottom: 20px; right: 20px; background: rgba(0, 0, 0, 0.2); width: 50px; height: 50px; text-decoration: none; border-radius: 35px; display: none; transition: 0.3s; }

#return-to-top i { color: rgb(255, 255, 255); margin: 0px; position: relative; left: 16px; top: 13px; font-size: 19px; transition: 0.3s; }

#return-to-top:hover { background: rgba(0, 0, 0, 0.35); }

#return-to-top:hover i { color: rgb(240, 240, 240); }

@media print {
  .pagebreak { break-before: page; }
  div { break-inside: avoid; }
  pre { break-inside: avoid; }
}

.modebar { display: none !important; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://netdna.bootstrapcdn.com/font-awesome/3.2.1/css/font-awesome.css

@charset "utf-8";

@font-face { font-family: FontAwesome; src: url("../font/fontawesome-webfont.woff?v=3.2.1") format("woff"), url("../font/fontawesome-webfont.ttf?v=3.2.1") format("truetype"); font-weight: normal; font-style: normal; }

[class^="icon-"], [class*=" icon-"] { font-family: FontAwesome; font-weight: normal; font-style: normal; text-decoration: inherit; -webkit-font-smoothing: antialiased; }

[class^="icon-"]::before, [class*=" icon-"]::before { text-decoration: inherit; display: inline-block; speak: none; }

.icon-large::before { vertical-align: -10%; font-size: 1.33333em; }

a [class^="icon-"], a [class*=" icon-"] { display: inline; }

[class^="icon-"].icon-fixed-width, [class*=" icon-"].icon-fixed-width { display: inline-block; width: 1.14286em; text-align: right; padding-right: 0.285714em; }

[class^="icon-"].icon-fixed-width.icon-large, [class*=" icon-"].icon-fixed-width.icon-large { width: 1.42857em; }

.icons-ul { margin-left: 2.14286em; list-style-type: none; }

.icons-ul > li { position: relative; }

.icons-ul .icon-li { position: absolute; left: -2.14286em; width: 2.14286em; text-align: center; line-height: inherit; }

[class^="icon-"].hide, [class*=" icon-"].hide { display: none; }

.icon-muted { color: rgb(238, 238, 238); }

.icon-light { color: rgb(255, 255, 255); }

.icon-dark { color: rgb(51, 51, 51); }

.icon-border { border: 1px solid rgb(238, 238, 238); padding: 0.2em 0.25em 0.15em; border-radius: 3px; }

.icon-2x { font-size: 2em; }

.icon-2x.icon-border { border-width: 2px; border-radius: 4px; }

.icon-3x { font-size: 3em; }

.icon-3x.icon-border { border-width: 3px; border-radius: 5px; }

.icon-4x { font-size: 4em; }

.icon-4x.icon-border { border-width: 4px; border-radius: 6px; }

.icon-5x { font-size: 5em; }

.icon-5x.icon-border { border-width: 5px; border-radius: 7px; }

.pull-right { float: right; }

.pull-left { float: left; }

[class^="icon-"].pull-left, [class*=" icon-"].pull-left { margin-right: 0.3em; }

[class^="icon-"].pull-right, [class*=" icon-"].pull-right { margin-left: 0.3em; }

[class^="icon-"], [class*=" icon-"] { display: inline; width: auto; height: auto; line-height: normal; vertical-align: baseline; background-image: none; background-position: 0% 0%; background-repeat: repeat; margin-top: 0px; }

.icon-white, .nav-pills > .active > a > [class^="icon-"], .nav-pills > .active > a > [class*=" icon-"], .nav-list > .active > a > [class^="icon-"], .nav-list > .active > a > [class*=" icon-"], .navbar-inverse .nav > .active > a > [class^="icon-"], .navbar-inverse .nav > .active > a > [class*=" icon-"], .dropdown-menu > li > a:hover > [class^="icon-"], .dropdown-menu > li > a:hover > [class*=" icon-"], .dropdown-menu > .active > a > [class^="icon-"], .dropdown-menu > .active > a > [class*=" icon-"], .dropdown-submenu:hover > a > [class^="icon-"], .dropdown-submenu:hover > a > [class*=" icon-"] { background-image: none; }

.btn [class^="icon-"].icon-large, .nav [class^="icon-"].icon-large, .btn [class*=" icon-"].icon-large, .nav [class*=" icon-"].icon-large { line-height: 0.9em; }

.btn [class^="icon-"].icon-spin, .nav [class^="icon-"].icon-spin, .btn [class*=" icon-"].icon-spin, .nav [class*=" icon-"].icon-spin { display: inline-block; }

.nav-tabs [class^="icon-"], .nav-pills [class^="icon-"], .nav-tabs [class*=" icon-"], .nav-pills [class*=" icon-"], .nav-tabs [class^="icon-"].icon-large, .nav-pills [class^="icon-"].icon-large, .nav-tabs [class*=" icon-"].icon-large, .nav-pills [class*=" icon-"].icon-large { line-height: 0.9em; }

.btn [class^="icon-"].pull-left.icon-2x, .btn [class*=" icon-"].pull-left.icon-2x, .btn [class^="icon-"].pull-right.icon-2x, .btn [class*=" icon-"].pull-right.icon-2x { margin-top: 0.18em; }

.btn [class^="icon-"].icon-spin.icon-large, .btn [class*=" icon-"].icon-spin.icon-large { line-height: 0.8em; }

.btn.btn-small [class^="icon-"].pull-left.icon-2x, .btn.btn-small [class*=" icon-"].pull-left.icon-2x, .btn.btn-small [class^="icon-"].pull-right.icon-2x, .btn.btn-small [class*=" icon-"].pull-right.icon-2x { margin-top: 0.25em; }

.btn.btn-large [class^="icon-"], .btn.btn-large [class*=" icon-"] { margin-top: 0px; }

.btn.btn-large [class^="icon-"].pull-left.icon-2x, .btn.btn-large [class*=" icon-"].pull-left.icon-2x, .btn.btn-large [class^="icon-"].pull-right.icon-2x, .btn.btn-large [class*=" icon-"].pull-right.icon-2x { margin-top: 0.05em; }

.btn.btn-large [class^="icon-"].pull-left.icon-2x, .btn.btn-large [class*=" icon-"].pull-left.icon-2x { margin-right: 0.2em; }

.btn.btn-large [class^="icon-"].pull-right.icon-2x, .btn.btn-large [class*=" icon-"].pull-right.icon-2x { margin-left: 0.2em; }

.nav-list [class^="icon-"], .nav-list [class*=" icon-"] { line-height: inherit; }

.icon-stack { position: relative; display: inline-block; width: 2em; height: 2em; line-height: 2em; vertical-align: -35%; }

.icon-stack [class^="icon-"], .icon-stack [class*=" icon-"] { display: block; text-align: center; position: absolute; width: 100%; height: 100%; font-size: 1em; line-height: inherit; }

.icon-stack .icon-stack-base { font-size: 2em; }

.icon-spin { display: inline-block; animation: 2s linear 0s infinite normal none running spin; }

a .icon-stack, a .icon-spin { display: inline-block; text-decoration: none; }

@-webkit-keyframes spin { 
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

@keyframes spin { 
  0% { transform: rotate(0deg); }
  100% { transform: rotate(359deg); }
}

.icon-rotate-90::before { transform: rotate(90deg); }

.icon-rotate-180::before { transform: rotate(180deg); }

.icon-rotate-270::before { transform: rotate(270deg); }

.icon-flip-horizontal::before { transform: scale(-1, 1); }

.icon-flip-vertical::before { transform: scale(1, -1); }

a .icon-rotate-90::before, a .icon-rotate-180::before, a .icon-rotate-270::before, a .icon-flip-horizontal::before, a .icon-flip-vertical::before { display: inline-block; }

.icon-glass::before { content: "ï"; }

.icon-music::before { content: "ï"; }

.icon-search::before { content: "ï"; }

.icon-envelope-alt::before { content: "ï"; }

.icon-heart::before { content: "ï"; }

.icon-star::before { content: "ï"; }

.icon-star-empty::before { content: "ï"; }

.icon-user::before { content: "ï"; }

.icon-film::before { content: "ï"; }

.icon-th-large::before { content: "ï"; }

.icon-th::before { content: "ï"; }

.icon-th-list::before { content: "ï"; }

.icon-ok::before { content: "ï"; }

.icon-remove::before { content: "ï"; }

.icon-zoom-in::before { content: "ï"; }

.icon-zoom-out::before { content: "ï"; }

.icon-power-off::before, .icon-off::before { content: "ï"; }

.icon-signal::before { content: "ï"; }

.icon-gear::before, .icon-cog::before { content: "ï"; }

.icon-trash::before { content: "ï"; }

.icon-home::before { content: "ï"; }

.icon-file-alt::before { content: "ï"; }

.icon-time::before { content: "ï"; }

.icon-road::before { content: "ï"; }

.icon-download-alt::before { content: "ï"; }

.icon-download::before { content: "ï"; }

.icon-upload::before { content: "ï"; }

.icon-inbox::before { content: "ï"; }

.icon-play-circle::before { content: "ï"; }

.icon-rotate-right::before, .icon-repeat::before { content: "ï"; }

.icon-refresh::before { content: "ï¡"; }

.icon-list-alt::before { content: "ï¢"; }

.icon-lock::before { content: "ï£"; }

.icon-flag::before { content: "ï¤"; }

.icon-headphones::before { content: "ï¥"; }

.icon-volume-off::before { content: "ï¦"; }

.icon-volume-down::before { content: "ï§"; }

.icon-volume-up::before { content: "ï¨"; }

.icon-qrcode::before { content: "ï©"; }

.icon-barcode::before { content: "ïª"; }

.icon-tag::before { content: "ï«"; }

.icon-tags::before { content: "ï¬"; }

.icon-book::before { content: "ï­"; }

.icon-bookmark::before { content: "ï®"; }

.icon-print::before { content: "ï¯"; }

.icon-camera::before { content: "ï°"; }

.icon-font::before { content: "ï±"; }

.icon-bold::before { content: "ï²"; }

.icon-italic::before { content: "ï³"; }

.icon-text-height::before { content: "ï´"; }

.icon-text-width::before { content: "ïµ"; }

.icon-align-left::before { content: "ï¶"; }

.icon-align-center::before { content: "ï·"; }

.icon-align-right::before { content: "ï¸"; }

.icon-align-justify::before { content: "ï¹"; }

.icon-list::before { content: "ïº"; }

.icon-indent-left::before { content: "ï»"; }

.icon-indent-right::before { content: "ï¼"; }

.icon-facetime-video::before { content: "ï½"; }

.icon-picture::before { content: "ï¾"; }

.icon-pencil::before { content: "ï"; }

.icon-map-marker::before { content: "ï"; }

.icon-adjust::before { content: "ï"; }

.icon-tint::before { content: "ï"; }

.icon-edit::before { content: "ï"; }

.icon-share::before { content: "ï"; }

.icon-check::before { content: "ï"; }

.icon-move::before { content: "ï"; }

.icon-step-backward::before { content: "ï"; }

.icon-fast-backward::before { content: "ï"; }

.icon-backward::before { content: "ï"; }

.icon-play::before { content: "ï"; }

.icon-pause::before { content: "ï"; }

.icon-stop::before { content: "ï"; }

.icon-forward::before { content: "ï"; }

.icon-fast-forward::before { content: "ï"; }

.icon-step-forward::before { content: "ï"; }

.icon-eject::before { content: "ï"; }

.icon-chevron-left::before { content: "ï"; }

.icon-chevron-right::before { content: "ï"; }

.icon-plus-sign::before { content: "ï"; }

.icon-minus-sign::before { content: "ï"; }

.icon-remove-sign::before { content: "ï"; }

.icon-ok-sign::before { content: "ï"; }

.icon-question-sign::before { content: "ï"; }

.icon-info-sign::before { content: "ï"; }

.icon-screenshot::before { content: "ï"; }

.icon-remove-circle::before { content: "ï"; }

.icon-ok-circle::before { content: "ï"; }

.icon-ban-circle::before { content: "ï"; }

.icon-arrow-left::before { content: "ï "; }

.icon-arrow-right::before { content: "ï¡"; }

.icon-arrow-up::before { content: "ï¢"; }

.icon-arrow-down::before { content: "ï£"; }

.icon-mail-forward::before, .icon-share-alt::before { content: "ï¤"; }

.icon-resize-full::before { content: "ï¥"; }

.icon-resize-small::before { content: "ï¦"; }

.icon-plus::before { content: "ï§"; }

.icon-minus::before { content: "ï¨"; }

.icon-asterisk::before { content: "ï©"; }

.icon-exclamation-sign::before { content: "ïª"; }

.icon-gift::before { content: "ï«"; }

.icon-leaf::before { content: "ï¬"; }

.icon-fire::before { content: "ï­"; }

.icon-eye-open::before { content: "ï®"; }

.icon-eye-close::before { content: "ï°"; }

.icon-warning-sign::before { content: "ï±"; }

.icon-plane::before { content: "ï²"; }

.icon-calendar::before { content: "ï³"; }

.icon-random::before { content: "ï´"; }

.icon-comment::before { content: "ïµ"; }

.icon-magnet::before { content: "ï¶"; }

.icon-chevron-up::before { content: "ï·"; }

.icon-chevron-down::before { content: "ï¸"; }

.icon-retweet::before { content: "ï¹"; }

.icon-shopping-cart::before { content: "ïº"; }

.icon-folder-close::before { content: "ï»"; }

.icon-folder-open::before { content: "ï¼"; }

.icon-resize-vertical::before { content: "ï½"; }

.icon-resize-horizontal::before { content: "ï¾"; }

.icon-bar-chart::before { content: "ï"; }

.icon-twitter-sign::before { content: "ï"; }

.icon-facebook-sign::before { content: "ï"; }

.icon-camera-retro::before { content: "ï"; }

.icon-key::before { content: "ï"; }

.icon-gears::before, .icon-cogs::before { content: "ï"; }

.icon-comments::before { content: "ï"; }

.icon-thumbs-up-alt::before { content: "ï"; }

.icon-thumbs-down-alt::before { content: "ï"; }

.icon-star-half::before { content: "ï"; }

.icon-heart-empty::before { content: "ï"; }

.icon-signout::before { content: "ï"; }

.icon-linkedin-sign::before { content: "ï"; }

.icon-pushpin::before { content: "ï"; }

.icon-external-link::before { content: "ï"; }

.icon-signin::before { content: "ï"; }

.icon-trophy::before { content: "ï"; }

.icon-github-sign::before { content: "ï"; }

.icon-upload-alt::before { content: "ï"; }

.icon-lemon::before { content: "ï"; }

.icon-phone::before { content: "ï"; }

.icon-unchecked::before, .icon-check-empty::before { content: "ï"; }

.icon-bookmark-empty::before { content: "ï"; }

.icon-phone-sign::before { content: "ï"; }

.icon-twitter::before { content: "ï"; }

.icon-facebook::before { content: "ï"; }

.icon-github::before { content: "ï"; }

.icon-unlock::before { content: "ï"; }

.icon-credit-card::before { content: "ï"; }

.icon-rss::before { content: "ï"; }

.icon-hdd::before { content: "ï "; }

.icon-bullhorn::before { content: "ï¡"; }

.icon-bell::before { content: "ï¢"; }

.icon-certificate::before { content: "ï£"; }

.icon-hand-right::before { content: "ï¤"; }

.icon-hand-left::before { content: "ï¥"; }

.icon-hand-up::before { content: "ï¦"; }

.icon-hand-down::before { content: "ï§"; }

.icon-circle-arrow-left::before { content: "ï¨"; }

.icon-circle-arrow-right::before { content: "ï©"; }

.icon-circle-arrow-up::before { content: "ïª"; }

.icon-circle-arrow-down::before { content: "ï«"; }

.icon-globe::before { content: "ï¬"; }

.icon-wrench::before { content: "ï­"; }

.icon-tasks::before { content: "ï®"; }

.icon-filter::before { content: "ï°"; }

.icon-briefcase::before { content: "ï±"; }

.icon-fullscreen::before { content: "ï²"; }

.icon-group::before { content: "ï"; }

.icon-link::before { content: "ï"; }

.icon-cloud::before { content: "ï"; }

.icon-beaker::before { content: "ï"; }

.icon-cut::before { content: "ï"; }

.icon-copy::before { content: "ï"; }

.icon-paperclip::before, .icon-paper-clip::before { content: "ï"; }

.icon-save::before { content: "ï"; }

.icon-sign-blank::before { content: "ï"; }

.icon-reorder::before { content: "ï"; }

.icon-list-ul::before { content: "ï"; }

.icon-list-ol::before { content: "ï"; }

.icon-strikethrough::before { content: "ï"; }

.icon-underline::before { content: "ï"; }

.icon-table::before { content: "ï"; }

.icon-magic::before { content: "ï"; }

.icon-truck::before { content: "ï"; }

.icon-pinterest::before { content: "ï"; }

.icon-pinterest-sign::before { content: "ï"; }

.icon-google-plus-sign::before { content: "ï"; }

.icon-google-plus::before { content: "ï"; }

.icon-money::before { content: "ï"; }

.icon-caret-down::before { content: "ï"; }

.icon-caret-up::before { content: "ï"; }

.icon-caret-left::before { content: "ï"; }

.icon-caret-right::before { content: "ï"; }

.icon-columns::before { content: "ï"; }

.icon-sort::before { content: "ï"; }

.icon-sort-down::before { content: "ï"; }

.icon-sort-up::before { content: "ï"; }

.icon-envelope::before { content: "ï "; }

.icon-linkedin::before { content: "ï¡"; }

.icon-rotate-left::before, .icon-undo::before { content: "ï¢"; }

.icon-legal::before { content: "ï£"; }

.icon-dashboard::before { content: "ï¤"; }

.icon-comment-alt::before { content: "ï¥"; }

.icon-comments-alt::before { content: "ï¦"; }

.icon-bolt::before { content: "ï§"; }

.icon-sitemap::before { content: "ï¨"; }

.icon-umbrella::before { content: "ï©"; }

.icon-paste::before { content: "ïª"; }

.icon-lightbulb::before { content: "ï«"; }

.icon-exchange::before { content: "ï¬"; }

.icon-cloud-download::before { content: "ï­"; }

.icon-cloud-upload::before { content: "ï®"; }

.icon-user-md::before { content: "ï°"; }

.icon-stethoscope::before { content: "ï±"; }

.icon-suitcase::before { content: "ï²"; }

.icon-bell-alt::before { content: "ï³"; }

.icon-coffee::before { content: "ï´"; }

.icon-food::before { content: "ïµ"; }

.icon-file-text-alt::before { content: "ï¶"; }

.icon-building::before { content: "ï·"; }

.icon-hospital::before { content: "ï¸"; }

.icon-ambulance::before { content: "ï¹"; }

.icon-medkit::before { content: "ïº"; }

.icon-fighter-jet::before { content: "ï»"; }

.icon-beer::before { content: "ï¼"; }

.icon-h-sign::before { content: "ï½"; }

.icon-plus-sign-alt::before { content: "ï¾"; }

.icon-double-angle-left::before { content: "ï"; }

.icon-double-angle-right::before { content: "ï"; }

.icon-double-angle-up::before { content: "ï"; }

.icon-double-angle-down::before { content: "ï"; }

.icon-angle-left::before { content: "ï"; }

.icon-angle-right::before { content: "ï"; }

.icon-angle-up::before { content: "ï"; }

.icon-angle-down::before { content: "ï"; }

.icon-desktop::before { content: "ï"; }

.icon-laptop::before { content: "ï"; }

.icon-tablet::before { content: "ï"; }

.icon-mobile-phone::before { content: "ï"; }

.icon-circle-blank::before { content: "ï"; }

.icon-quote-left::before { content: "ï"; }

.icon-quote-right::before { content: "ï"; }

.icon-spinner::before { content: "ï"; }

.icon-circle::before { content: "ï"; }

.icon-mail-reply::before, .icon-reply::before { content: "ï"; }

.icon-github-alt::before { content: "ï"; }

.icon-folder-close-alt::before { content: "ï"; }

.icon-folder-open-alt::before { content: "ï"; }

.icon-expand-alt::before { content: "ï"; }

.icon-collapse-alt::before { content: "ï"; }

.icon-smile::before { content: "ï"; }

.icon-frown::before { content: "ï"; }

.icon-meh::before { content: "ï"; }

.icon-gamepad::before { content: "ï"; }

.icon-keyboard::before { content: "ï"; }

.icon-flag-alt::before { content: "ï"; }

.icon-flag-checkered::before { content: "ï"; }

.icon-terminal::before { content: "ï "; }

.icon-code::before { content: "ï¡"; }

.icon-reply-all::before { content: "ï¢"; }

.icon-mail-reply-all::before { content: "ï¢"; }

.icon-star-half-full::before, .icon-star-half-empty::before { content: "ï£"; }

.icon-location-arrow::before { content: "ï¤"; }

.icon-crop::before { content: "ï¥"; }

.icon-code-fork::before { content: "ï¦"; }

.icon-unlink::before { content: "ï§"; }

.icon-question::before { content: "ï¨"; }

.icon-info::before { content: "ï©"; }

.icon-exclamation::before { content: "ïª"; }

.icon-superscript::before { content: "ï«"; }

.icon-subscript::before { content: "ï¬"; }

.icon-eraser::before { content: "ï­"; }

.icon-puzzle-piece::before { content: "ï®"; }

.icon-microphone::before { content: "ï°"; }

.icon-microphone-off::before { content: "ï±"; }

.icon-shield::before { content: "ï²"; }

.icon-calendar-empty::before { content: "ï³"; }

.icon-fire-extinguisher::before { content: "ï´"; }

.icon-rocket::before { content: "ïµ"; }

.icon-maxcdn::before { content: "ï¶"; }

.icon-chevron-sign-left::before { content: "ï·"; }

.icon-chevron-sign-right::before { content: "ï¸"; }

.icon-chevron-sign-up::before { content: "ï¹"; }

.icon-chevron-sign-down::before { content: "ïº"; }

.icon-html5::before { content: "ï»"; }

.icon-css3::before { content: "ï¼"; }

.icon-anchor::before { content: "ï½"; }

.icon-unlock-alt::before { content: "ï¾"; }

.icon-bullseye::before { content: "ï"; }

.icon-ellipsis-horizontal::before { content: "ï"; }

.icon-ellipsis-vertical::before { content: "ï"; }

.icon-rss-sign::before { content: "ï"; }

.icon-play-sign::before { content: "ï"; }

.icon-ticket::before { content: "ï"; }

.icon-minus-sign-alt::before { content: "ï"; }

.icon-check-minus::before { content: "ï"; }

.icon-level-up::before { content: "ï"; }

.icon-level-down::before { content: "ï"; }

.icon-check-sign::before { content: "ï"; }

.icon-edit-sign::before { content: "ï"; }

.icon-external-link-sign::before { content: "ï"; }

.icon-share-sign::before { content: "ï"; }

.icon-compass::before { content: "ï"; }

.icon-collapse::before { content: "ï"; }

.icon-collapse-top::before { content: "ï"; }

.icon-expand::before { content: "ï"; }

.icon-euro::before, .icon-eur::before { content: "ï"; }

.icon-gbp::before { content: "ï"; }

.icon-dollar::before, .icon-usd::before { content: "ï"; }

.icon-rupee::before, .icon-inr::before { content: "ï"; }

.icon-yen::before, .icon-jpy::before { content: "ï"; }

.icon-renminbi::before, .icon-cny::before { content: "ï"; }

.icon-won::before, .icon-krw::before { content: "ï"; }

.icon-bitcoin::before, .icon-btc::before { content: "ï"; }

.icon-file::before { content: "ï"; }

.icon-file-text::before { content: "ï"; }

.icon-sort-by-alphabet::before { content: "ï"; }

.icon-sort-by-alphabet-alt::before { content: "ï"; }

.icon-sort-by-attributes::before { content: "ï "; }

.icon-sort-by-attributes-alt::before { content: "ï¡"; }

.icon-sort-by-order::before { content: "ï¢"; }

.icon-sort-by-order-alt::before { content: "ï£"; }

.icon-thumbs-up::before { content: "ï¤"; }

.icon-thumbs-down::before { content: "ï¥"; }

.icon-youtube-sign::before { content: "ï¦"; }

.icon-youtube::before { content: "ï§"; }

.icon-xing::before { content: "ï¨"; }

.icon-xing-sign::before { content: "ï©"; }

.icon-youtube-play::before { content: "ïª"; }

.icon-dropbox::before { content: "ï«"; }

.icon-stackexchange::before { content: "ï¬"; }

.icon-instagram::before { content: "ï­"; }

.icon-flickr::before { content: "ï®"; }

.icon-adn::before { content: "ï°"; }

.icon-bitbucket::before { content: "ï±"; }

.icon-bitbucket-sign::before { content: "ï²"; }

.icon-tumblr::before { content: "ï³"; }

.icon-tumblr-sign::before { content: "ï´"; }

.icon-long-arrow-down::before { content: "ïµ"; }

.icon-long-arrow-up::before { content: "ï¶"; }

.icon-long-arrow-left::before { content: "ï·"; }

.icon-long-arrow-right::before { content: "ï¸"; }

.icon-apple::before { content: "ï¹"; }

.icon-windows::before { content: "ïº"; }

.icon-android::before { content: "ï»"; }

.icon-linux::before { content: "ï¼"; }

.icon-dribbble::before { content: "ï½"; }

.icon-skype::before { content: "ï¾"; }

.icon-foursquare::before { content: "ï"; }

.icon-trello::before { content: "ï"; }

.icon-female::before { content: "ï"; }

.icon-male::before { content: "ï"; }

.icon-gittip::before { content: "ï"; }

.icon-sun::before { content: "ï"; }

.icon-moon::before { content: "ï"; }

.icon-archive::before { content: "ï"; }

.icon-bug::before { content: "ï"; }

.icon-vk::before { content: "ï"; }

.icon-weibo::before { content: "ï"; }

.icon-renren::before { content: "ï"; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://gto76.github.io/python-cheatsheet/web/default.min.css

@charset "utf-8";

.hljs { overflow-x: auto; }

.hljs, .hljs-subst { }

.hljs-comment { color: rgb(136, 136, 136); }

.hljs-keyword, .hljs-attribute, .hljs-selector-tag, .hljs-meta-keyword, .hljs-doctag, .hljs-name { font-weight: bold; color: rgb(49, 130, 189); }

.hljs-type, .hljs-string, .hljs-number, .hljs-selector-id, .hljs-selector-class, .hljs-quote, .hljs-template-tag, .hljs-deletion { color: rgb(136, 0, 0); }

.hljs-title, .hljs-section { color: rgb(136, 0, 0); font-weight: bold; }

.hljs-regexp, .hljs-symbol, .hljs-variable, .hljs-template-variable, .hljs-link, .hljs-selector-attr, .hljs-selector-pseudo { color: rgb(188, 96, 96); }

.hljs-literal { color: rgb(120, 169, 96); }

.hljs-meta { color: rgb(31, 113, 153); }

.hljs-meta-string { color: rgb(77, 153, 191); }

.hljs-emphasis { font-style: italic; }

.hljs-strong { font-weight: bold; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-e0a3aeb3-b8b7-460a-9834-1dfd69c9dd73@mhtml.blink

@charset "utf-8";

#modebar-5cd3c9 .modebar-btn.active .icon path { fill: rgba(255, 255, 255, 0.7); }

#modebar-5cd3c9 .modebar-btn:hover .icon path { fill: rgba(255, 255, 255, 0.7); }

#modebar-5cd3c9 .modebar-btn .icon path { fill: rgba(255, 255, 255, 0.3); }

#modebar-5cd3c9 .modebar-group { background-color: rgba(0, 0, 0, 0.5); }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-562696fb-00d0-4926-ac19-faa444f6bae7@mhtml.blink

@charset "utf-8";

#modebar-d58e7f .modebar-btn.active .icon path { fill: rgba(255, 255, 255, 0.7); }

#modebar-d58e7f .modebar-btn:hover .icon path { fill: rgba(255, 255, 255, 0.7); }

#modebar-d58e7f .modebar-btn .icon path { fill: rgba(255, 255, 255, 0.3); }

#modebar-d58e7f .modebar-group { background-color: rgba(0, 0, 0, 0.5); }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-948f1715-01e3-4eac-808b-ab1f91b35f3f@mhtml.blink

@charset "utf-8";

.js-plotly-plot .plotly .mapboxgl-ctrl-logo { display: block; width: 21px; height: 21px; background-image: url("data:image/svg+xml;charset=utf-8,%3C?xml version=\"1.0\" encoding=\"utf-8\"?%3E %3Csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 21 21\" style=\"enable-background:new 0 0 21 21;\" xml:space=\"preserve\"%3E%3Cg transform=\"translate(0,0.01)\"%3E%3Cpath d=\"m 10.5,1.24 c -5.11,0 -9.25,4.15 -9.25,9.25 0,5.1 4.15,9.25 9.25,9.25 5.1,0 9.25,-4.15 9.25,-9.25 0,-5.11 -4.14,-9.25 -9.25,-9.25 z m 4.39,11.53 c -1.93,1.93 -4.78,2.31 -6.7,2.31 -0.7,0 -1.41,-0.05 -2.1,-0.16 0,0 -1.02,-5.64 2.14,-8.81 0.83,-0.83 1.95,-1.28 3.13,-1.28 1.27,0 2.49,0.51 3.39,1.42 1.84,1.84 1.89,4.75 0.14,6.52 z\" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3Cpath d=\"M 10.5,-0.01 C 4.7,-0.01 0,4.7 0,10.49 c 0,5.79 4.7,10.5 10.5,10.5 5.8,0 10.5,-4.7 10.5,-10.5 C 20.99,4.7 16.3,-0.01 10.5,-0.01 Z m 0,19.75 c -5.11,0 -9.25,-4.15 -9.25,-9.25 0,-5.1 4.14,-9.26 9.25,-9.26 5.11,0 9.25,4.15 9.25,9.25 0,5.13 -4.14,9.26 -9.25,9.26 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpath d=\"M 14.74,6.25 C 12.9,4.41 9.98,4.35 8.23,6.1 5.07,9.27 6.09,14.91 6.09,14.91 c 0,0 5.64,1.02 8.81,-2.14 C 16.64,11 16.59,8.09 14.74,6.25 Z m -2.27,4.09 -0.91,1.87 -0.9,-1.87 -1.86,-0.91 1.86,-0.9 0.9,-1.87 0.91,1.87 1.86,0.9 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpolygon points=\"11.56,12.21 10.66,10.34 8.8,9.43 10.66,8.53 11.56,6.66 12.47,8.53 14.33,9.43 12.47,10.34 \" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3C/g%3E%3C/svg%3E"); }

.js-plotly-plot .plotly .mapboxgl-attrib-empty { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib .mapbox-improve-map { font-weight: bold; margin-left: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a:hover { color: inherit; text-decoration: underline; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right .mapboxgl-ctrl { margin: 0px 10px 10px 0px; float: right; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left .mapboxgl-ctrl { margin: 0px 0px 10px 10px; float: left; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; right: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact { min-height: 20px; padding: 0px; margin: 10px; position: relative; background-color: rgb(255, 255, 255); border-radius: 3px 12px 12px 3px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact::after { content: ""; cursor: pointer; position: absolute; background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"%3E %3Cpath fill=\"%23333333\" fill-rule=\"evenodd\" d=\"M4,10a6,6 0 1,0 12,0a6,6 0 1,0 -12,0 M9,7a1,1 0 1,0 2,0a1,1 0 1,0 -2,0 M9,10a1,1 0 1,1 2,0l0,3a1,1 0 1,1 -2,0\"/%3E %3C/svg%3E"); background-color: rgba(255, 255, 255, 0.5); width: 24px; height: 24px; box-sizing: border-box; border-radius: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover { padding: 2px 24px 2px 4px; visibility: visible; margin-top: 6px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover .mapboxgl-ctrl-attrib-inner { display: block; margin-top: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-inner { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl { clear: both; pointer-events: auto; transform: translate(0px, 0px); }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right { position: absolute; pointer-events: none; z-index: 2; right: 0px; bottom: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left { position: absolute; pointer-events: none; z-index: 2; bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-canary { background-color: salmon; }

.js-plotly-plot .plotly .mapboxgl-missing-css { display: none; }

.js-plotly-plot .plotly .mapboxgl-map { overflow: hidden; position: relative; }

.js-plotly-plot .plotly .mapboxgl-ctrl-logo { display: block; width: 21px; height: 21px; background-image: url("data:image/svg+xml;charset=utf-8,%3C?xml version=\"1.0\" encoding=\"utf-8\"?%3E %3Csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 21 21\" style=\"enable-background:new 0 0 21 21;\" xml:space=\"preserve\"%3E%3Cg transform=\"translate(0,0.01)\"%3E%3Cpath d=\"m 10.5,1.24 c -5.11,0 -9.25,4.15 -9.25,9.25 0,5.1 4.15,9.25 9.25,9.25 5.1,0 9.25,-4.15 9.25,-9.25 0,-5.11 -4.14,-9.25 -9.25,-9.25 z m 4.39,11.53 c -1.93,1.93 -4.78,2.31 -6.7,2.31 -0.7,0 -1.41,-0.05 -2.1,-0.16 0,0 -1.02,-5.64 2.14,-8.81 0.83,-0.83 1.95,-1.28 3.13,-1.28 1.27,0 2.49,0.51 3.39,1.42 1.84,1.84 1.89,4.75 0.14,6.52 z\" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3Cpath d=\"M 10.5,-0.01 C 4.7,-0.01 0,4.7 0,10.49 c 0,5.79 4.7,10.5 10.5,10.5 5.8,0 10.5,-4.7 10.5,-10.5 C 20.99,4.7 16.3,-0.01 10.5,-0.01 Z m 0,19.75 c -5.11,0 -9.25,-4.15 -9.25,-9.25 0,-5.1 4.14,-9.26 9.25,-9.26 5.11,0 9.25,4.15 9.25,9.25 0,5.13 -4.14,9.26 -9.25,9.26 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpath d=\"M 14.74,6.25 C 12.9,4.41 9.98,4.35 8.23,6.1 5.07,9.27 6.09,14.91 6.09,14.91 c 0,0 5.64,1.02 8.81,-2.14 C 16.64,11 16.59,8.09 14.74,6.25 Z m -2.27,4.09 -0.91,1.87 -0.9,-1.87 -1.86,-0.91 1.86,-0.9 0.9,-1.87 0.91,1.87 1.86,0.9 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpolygon points=\"11.56,12.21 10.66,10.34 8.8,9.43 10.66,8.53 11.56,6.66 12.47,8.53 14.33,9.43 12.47,10.34 \" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3C/g%3E%3C/svg%3E"); }

.js-plotly-plot .plotly .mapboxgl-attrib-empty { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib .mapbox-improve-map { font-weight: bold; margin-left: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a:hover { color: inherit; text-decoration: underline; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right .mapboxgl-ctrl { margin: 0px 10px 10px 0px; float: right; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left .mapboxgl-ctrl { margin: 0px 0px 10px 10px; float: left; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; right: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact { min-height: 20px; padding: 0px; margin: 10px; position: relative; background-color: rgb(255, 255, 255); border-radius: 3px 12px 12px 3px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact::after { content: ""; cursor: pointer; position: absolute; background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"%3E %3Cpath fill=\"%23333333\" fill-rule=\"evenodd\" d=\"M4,10a6,6 0 1,0 12,0a6,6 0 1,0 -12,0 M9,7a1,1 0 1,0 2,0a1,1 0 1,0 -2,0 M9,10a1,1 0 1,1 2,0l0,3a1,1 0 1,1 -2,0\"/%3E %3C/svg%3E"); background-color: rgba(255, 255, 255, 0.5); width: 24px; height: 24px; box-sizing: border-box; border-radius: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover { padding: 2px 24px 2px 4px; visibility: visible; margin-top: 6px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover .mapboxgl-ctrl-attrib-inner { display: block; margin-top: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-inner { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl { clear: both; pointer-events: auto; transform: translate(0px, 0px); }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right { position: absolute; pointer-events: none; z-index: 2; right: 0px; bottom: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left { position: absolute; pointer-events: none; z-index: 2; bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-canary { background-color: salmon; }

.js-plotly-plot .plotly .mapboxgl-missing-css { display: none; }

.js-plotly-plot .plotly .mapboxgl-map { overflow: hidden; position: relative; }

.js-plotly-plot .plotly .mapboxgl-ctrl-logo { display: block; width: 21px; height: 21px; background-image: url("data:image/svg+xml;charset=utf-8,%3C?xml version=\"1.0\" encoding=\"utf-8\"?%3E %3Csvg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 21 21\" style=\"enable-background:new 0 0 21 21;\" xml:space=\"preserve\"%3E%3Cg transform=\"translate(0,0.01)\"%3E%3Cpath d=\"m 10.5,1.24 c -5.11,0 -9.25,4.15 -9.25,9.25 0,5.1 4.15,9.25 9.25,9.25 5.1,0 9.25,-4.15 9.25,-9.25 0,-5.11 -4.14,-9.25 -9.25,-9.25 z m 4.39,11.53 c -1.93,1.93 -4.78,2.31 -6.7,2.31 -0.7,0 -1.41,-0.05 -2.1,-0.16 0,0 -1.02,-5.64 2.14,-8.81 0.83,-0.83 1.95,-1.28 3.13,-1.28 1.27,0 2.49,0.51 3.39,1.42 1.84,1.84 1.89,4.75 0.14,6.52 z\" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3Cpath d=\"M 10.5,-0.01 C 4.7,-0.01 0,4.7 0,10.49 c 0,5.79 4.7,10.5 10.5,10.5 5.8,0 10.5,-4.7 10.5,-10.5 C 20.99,4.7 16.3,-0.01 10.5,-0.01 Z m 0,19.75 c -5.11,0 -9.25,-4.15 -9.25,-9.25 0,-5.1 4.14,-9.26 9.25,-9.26 5.11,0 9.25,4.15 9.25,9.25 0,5.13 -4.14,9.26 -9.25,9.26 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpath d=\"M 14.74,6.25 C 12.9,4.41 9.98,4.35 8.23,6.1 5.07,9.27 6.09,14.91 6.09,14.91 c 0,0 5.64,1.02 8.81,-2.14 C 16.64,11 16.59,8.09 14.74,6.25 Z m -2.27,4.09 -0.91,1.87 -0.9,-1.87 -1.86,-0.91 1.86,-0.9 0.9,-1.87 0.91,1.87 1.86,0.9 z\" style=\"opacity:0.35;enable-background:new\" class=\"st1\"/%3E%3Cpolygon points=\"11.56,12.21 10.66,10.34 8.8,9.43 10.66,8.53 11.56,6.66 12.47,8.53 14.33,9.43 12.47,10.34 \" style=\"opacity:0.9;fill:%23ffffff;enable-background:new\" class=\"st0\"/%3E%3C/g%3E%3C/svg%3E"); }

.js-plotly-plot .plotly .mapboxgl-attrib-empty { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib .mapbox-improve-map { font-weight: bold; margin-left: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a:hover { color: inherit; text-decoration: underline; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib a { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib { color: rgba(0, 0, 0, 0.75); text-decoration: none; font-size: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right .mapboxgl-ctrl { margin: 0px 10px 10px 0px; float: right; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left .mapboxgl-ctrl { margin: 0px 0px 10px 10px; float: left; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right > .mapboxgl-ctrl-attrib.mapboxgl-compact::after { bottom: 0px; right: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact { min-height: 20px; padding: 0px; margin: 10px; position: relative; background-color: rgb(255, 255, 255); border-radius: 3px 12px 12px 3px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact::after { content: ""; cursor: pointer; position: absolute; background-image: url("data:image/svg+xml;charset=utf-8,%3Csvg viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"%3E %3Cpath fill=\"%23333333\" fill-rule=\"evenodd\" d=\"M4,10a6,6 0 1,0 12,0a6,6 0 1,0 -12,0 M9,7a1,1 0 1,0 2,0a1,1 0 1,0 -2,0 M9,10a1,1 0 1,1 2,0l0,3a1,1 0 1,1 -2,0\"/%3E %3C/svg%3E"); background-color: rgba(255, 255, 255, 0.5); width: 24px; height: 24px; box-sizing: border-box; border-radius: 12px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover { padding: 2px 24px 2px 4px; visibility: visible; margin-top: 6px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact:hover .mapboxgl-ctrl-attrib-inner { display: block; margin-top: 2px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-attrib.mapboxgl-compact .mapboxgl-ctrl-attrib-inner { display: none; }

.js-plotly-plot .plotly .mapboxgl-ctrl { clear: both; pointer-events: auto; transform: translate(0px, 0px); }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-right { position: absolute; pointer-events: none; z-index: 2; right: 0px; bottom: 0px; }

.js-plotly-plot .plotly .mapboxgl-ctrl-bottom-left { position: absolute; pointer-events: none; z-index: 2; bottom: 0px; left: 0px; }

.js-plotly-plot .plotly .mapboxgl-canary { background-color: salmon; }

.js-plotly-plot .plotly .mapboxgl-missing-css { display: none; }

.js-plotly-plot .plotly .mapboxgl-map { overflow: hidden; position: relative; }

.plotly-notifier .notifier-close:hover { color: rgb(68, 68, 68); text-decoration: none; cursor: pointer; }

.plotly-notifier .notifier-close { color: rgb(255, 255, 255); opacity: 0.8; float: right; padding: 0px 5px; background: none; border: none; font-size: 20px; font-weight: bold; line-height: 20px; }

.plotly-notifier .notifier-note { min-width: 180px; max-width: 250px; border: 1px solid rgb(255, 255, 255); z-index: 3000; margin: 0px; background-color: rgba(140, 151, 175, 0.9); color: rgb(255, 255, 255); padding: 10px; overflow-wrap: break-word; hyphens: auto; }

.plotly-notifier p { margin: 0px; }

.plotly-notifier { font-family: "Open Sans", verdana, arial, sans-serif; position: fixed; top: 50px; right: 20px; z-index: 10000; font-size: 10pt; max-width: 180px; }

.js-plotly-plot .plotly .select-outline-2 { stroke: black; stroke-dasharray: 2px, 2px; }

.js-plotly-plot .plotly .select-outline-1 { stroke: white; }

.js-plotly-plot .plotly .select-outline { fill: none; stroke-width: 1; shape-rendering: crispedges; }

.js-plotly-plot .plotly .vertical [data-title]::before { border-width: 6px; border-style: solid; border-color: transparent transparent transparent rgb(105, 115, 138); border-image: initial; margin-top: 8px; margin-right: -30px; }

.js-plotly-plot .plotly .vertical [data-title]::before, .js-plotly-plot .plotly .vertical [data-title]::after { top: 0%; right: 200%; }

.js-plotly-plot .plotly [data-title]::after { content: attr(data-title); background: rgb(105, 115, 138); color: white; padding: 8px 10px; font-size: 12px; line-height: 12px; white-space: nowrap; margin-right: -18px; border-radius: 2px; }

.js-plotly-plot .plotly [data-title]::before { content: ""; position: absolute; background: transparent; border-width: 6px; border-style: solid; border-color: transparent transparent rgb(105, 115, 138); border-image: initial; z-index: 1002; margin-top: -12px; margin-right: -6px; }

.js-plotly-plot .plotly [data-title]:hover::before, .js-plotly-plot .plotly [data-title]:hover::after { display: block; opacity: 1; }

.js-plotly-plot .plotly [data-title]::before, .js-plotly-plot .plotly [data-title]::after { position: absolute; transform: translate3d(0px, 0px, 0px); display: none; opacity: 0; z-index: 1001; pointer-events: none; top: 110%; right: 50%; }

.js-plotly-plot .plotly .modebar.vertical .modebar-group .modebar-btn { display: block; text-align: center; }

.js-plotly-plot .plotly .modebar.vertical .modebar-group { display: block; float: none; padding-left: 0px; padding-bottom: 8px; }

.js-plotly-plot .plotly .modebar.vertical svg { top: -1px; }

.js-plotly-plot .plotly .modebar.vertical { display: flex; flex-flow: column wrap; align-content: flex-end; max-height: 100%; }

.js-plotly-plot .plotly .modebar-btn svg { position: relative; top: 2px; }

.js-plotly-plot .plotly .modebar-btn { position: relative; font-size: 16px; padding: 3px 4px; height: 22px; cursor: pointer; line-height: normal; box-sizing: border-box; }

.js-plotly-plot .plotly .modebar-group { float: left; display: inline-block; box-sizing: border-box; padding-left: 8px; position: relative; vertical-align: middle; white-space: nowrap; }

.js-plotly-plot .plotly:hover .modebar--hover .modebar-group { opacity: 1; }

.js-plotly-plot .plotly .modebar--hover > :not(.watermark) { opacity: 0; transition: opacity 0.3s; }

.js-plotly-plot .plotly .ease-bg { transition: background-color 0.3s; }

.js-plotly-plot .plotly .modebar { position: absolute; top: 2px; right: 2px; }

.js-plotly-plot .plotly .cursor-grab { cursor: grab; }

.js-plotly-plot .plotly .cursor-ne-resize { cursor: ne-resize; }

.js-plotly-plot .plotly .cursor-n-resize { cursor: n-resize; }

.js-plotly-plot .plotly .cursor-nw-resize { cursor: nw-resize; }

.js-plotly-plot .plotly .cursor-e-resize { cursor: e-resize; }

.js-plotly-plot .plotly .cursor-w-resize { cursor: w-resize; }

.js-plotly-plot .plotly .cursor-se-resize { cursor: se-resize; }

.js-plotly-plot .plotly .cursor-s-resize { cursor: s-resize; }

.js-plotly-plot .plotly .cursor-sw-resize { cursor: sw-resize; }

.js-plotly-plot .plotly .cursor-ew-resize { cursor: ew-resize; }

.js-plotly-plot .plotly .cursor-ns-resize { cursor: ns-resize; }

.js-plotly-plot .plotly .cursor-row-resize { cursor: row-resize; }

.js-plotly-plot .plotly .cursor-col-resize { cursor: col-resize; }

.js-plotly-plot .plotly .cursor-move { cursor: move; }

.js-plotly-plot .plotly .cursor-crosshair { cursor: crosshair; }

.js-plotly-plot .plotly .cursor-pointer { cursor: pointer; }

.js-plotly-plot .plotly .cursor-default { cursor: default; }

.js-plotly-plot .plotly .main-svg .draglayer { pointer-events: all; }

.js-plotly-plot .plotly .main-svg { position: absolute; top: 0px; left: 0px; pointer-events: none; }

.js-plotly-plot .plotly svg a:hover { fill: rgb(60, 109, 197); }

.js-plotly-plot .plotly svg a { fill: rgb(68, 122, 219); }

.js-plotly-plot .plotly svg { overflow: hidden; }

.js-plotly-plot .plotly .user-select-none { user-select: none; }

.js-plotly-plot .plotly .crisp { shape-rendering: crispedges; }

.js-plotly-plot .plotly a:hover { text-decoration: none; }

.js-plotly-plot .plotly a { text-decoration: none; }

.js-plotly-plot .plotly input:focus, .js-plotly-plot .plotly button:focus { outline: none; }

.js-plotly-plot .plotly input, .js-plotly-plot .plotly button { font-family: "Open Sans", verdana, arial, sans-serif; }

.js-plotly-plot .plotly, .js-plotly-plot .plotly div { direction: ltr; font-family: "Open Sans", verdana, arial, sans-serif; margin: 0px; padding: 0px; }
------MultipartBoundary--M1Z3KsozFIkauVNHnO1JKgFU5V1kIKjWAAW3yoR8IT------
